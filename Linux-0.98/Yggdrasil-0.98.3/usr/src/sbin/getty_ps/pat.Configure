This is an unofficial patch to getty 2.0.  It corrects a problem in
which Configure doesn't create a shell script called Cppsym that it
needs to determine predefined symbols in your C-preprocessor.

Apply using "patch -p0 < this_file"

*** /tmp/,RCSt1000540	Mon Oct  8 21:04:07 1990
--- Configure	Mon Oct  8 20:59:59 1990
***************
*** 8,14 ****
  # and edit it to reflect your system.  Some packages may include samples
  # of config.h for certain machines, so you might look for one of those.)
  #
! # $Id: Configure,v 2.0 90/09/19 19:23:44 paul Rel $
  #
  # Yes, you may rip this off to use in other distribution packages.
  # (Note: this Configure script was generated automatically.  Rather than
--- 8,14 ----
  # and edit it to reflect your system.  Some packages may include samples
  # of config.h for certain machines, so you might look for one of those.)
  #
! # $Id: Configure,v 2.0.1.1 90/10/08 20:54:32 paul Exp $
  #
  # Yes, you may rip this off to use in other distribution packages.
  # (Note: this Configure script was generated automatically.  Rather than
***************
*** 15,20 ****
--- 15,23 ----
  # working with this copy of Configure, you may wish to get metaconfig.)
  #
  # $Log:	Configure,v $
+ # Revision 2.0.1.1  90/10/08  20:54:32  paul
+ # patch1: Included missing text that created the Cppsym shell script.
+ # 
  # Revision 2.0  90/09/19  19:23:44  paul
  # Initial 2.0 release
  # 
***************
*** 656,662 ****
--- 659,721 ----
  EOM
  fi
  
+ : get C preprocessor symbols handy
+ echo " "
+ echo $attrlist | $tr '[ - ]' '[\012-\012]' >Cppsym.know
+ $cat <<EOSS >Cppsym
+ $startsh
+ case "\$1" in
+ -l) list=true
+     shift
+     ;;
+ esac
+ unknown=''
+ case "\$list\$#" in
+ 1|2)
+     for sym do
+ 	if $contains "^\$1$" Cppsym.true >/dev/null 2>&1; then
+ 	    exit 0
+ 	elif $contains "^\$1$" Cppsym.know >/dev/null 2>&1; then
+ 		:
+ 	else
+ 	    unknown="\$unknown \$sym"
+ 	fi
+     done
+     set X \$unknown
+     shift
+     ;;
+ esac
+ case \$# in
+ 0) exit 1;;
+ esac
+ echo \$* | $tr '[ - ]' '[\012-\012]' | $sed -e 's/\(.*\)/\\
+ #ifdef \1\\
+ exit 0; _ _ _ _\1\\	 \1\\
+ #endif\\
+ /' >/tmp/Cppsym\$\$
+ echo exit 1 >>/tmp/Cppsym\$\$
+ $cppstdin $cppminus </tmp/Cppsym\$\$ >/tmp/Cppsym2\$\$
+ case "\$list" in
+ true) awk 'NF > 5 {print substr(\$6,2,100)}' </tmp/Cppsym2\$\$ ;;
+ *)
+     sh /tmp/Cppsym2\$\$
+     status=\$?
+     ;;
+ esac
+ $rm -f /tmp/Cppsym\$\$ /tmp/Cppsym2\$\$
+ exit \$status
+ EOSS
+ chmod +x Cppsym
+ $eunicefix Cppsym
+ echo "Your C preprocessor defines the following symbols:"
+ Cppsym -l $attrlist >Cppsym.true
+ cat Cppsym.true
+ rmlist="$rmlist Cppsym Cppsym.know Cppsym.true"
+ 
  : see what memory models we can support
+ if Cppsym M_I8086 M_I186 M_I286; then
+     models='small medium large huge'
+ fi
  case "$models" in
  '')
      : We may not use Cppsym or we get a circular dependency through cc.
