\chapter{Dividing a Progam in Source Modules}

\label{sec:modules}
SWI-Prolog allows the user to split her/his program into a number of
{\em modules}%
    \footnote{The module system was inspired by the module system of
	      Quintus Prolog \cite{QUINTUS:manual}. At the end of this
	      chapter some notes on compatibility issues are given.}.
A module is an encapsulated chunk of Prolog code.  Modules can allow for
certain predicates to be called by other modules (i.e. {\em export}
them).  Modules can also {\em import} predicates from other modules.
Predicate calls from within a module by default refer to the predicates
defined in that module or imported into it.  If the predicate does not
exist in the module the {\em public} module called {\em user} is searched for
the predicate.  It is allowed to redefine system predicates inside a
module.

.S Structure of the Module System

Each module has a {\em name}.  The name space for modules is flat,
which implies each module name in a program must be unique.  Each
module contains a set of predicates.  These predicates are either
defined in the module itself, or imported from another module.
Predicates are either imported explicitely using one of the predicates
use_module/[1,2] or import/1, or implicitely from the module's {\em
default module} or from the library by the autoloader (see
section~\ref{sec:autoload}).  Initialy the system contains two
modules:

\begin{description}
    \item[system]
This module contains all system predicates.
    \item[user]
This module is the default module for all modules except the
module {\em system}.  The default module for {\em user} is {\em
system}.  Initially {\em user} is empty, but all system predicates
can be called as they are automatically imported from module {\em
system} when referenced.  The same holds for all library predicates
as they are loaded when referenced by the autoloader.  The user can
redefine system predicates by loading a new definition in module
{\em user} {\bf before} the predicate is automatically imported from
module {\em system} (e.i.\ before it is called for the first time).
\end{description}

.S Handling Meta-Predicates with Modules

The main problem with introducing modules in Prolog is handling
predicates that refer to the database or call other predicates via the
meta-call mechanism (assert/1, spy/1, call/1, etc.). For this purpose
each predicate of the program is assigned a module, called the {\em
definition module}.  The definition module of a predicate is always the
module in which the predicate was originally defined.  Each active goal
in the Prolog system has a {\em context module} assigned to it.  All
(system) predicates that need to know the module referred to will first
check whether the argument is of the form {\em $<$module$>$:$<$term$>$}.
If so {\em $<$module$>$} is taken as the module to act upon.  Otherwise
the context module associated with the goal is taken.  By default the
context module of a goal equals the definition module of the associated
predicate.  There are two exceptions to this rule:

\begin{enumerate}
    \item
If the predicate is declared as {\em transparent} (see
module_transparent/1) the context module associated with the goal is
the context module associated with the {\em parent} goal. All system
predicates that refer to the context module are transparent.%
    \footnote{Otherwise they would always refer to their definition
	      module.}
The example below is the system definition of \verb$not/1$. If it were
not defined transparent the argument would always be called in the same
module as in which \verb$not/1$ has been defined, and its definition
should be repeated over every module that wants to use it.
\begin{boxed}
\begin{code}
:- module_transparent
	(not)/1.

not(Goal) :-
	Goal, !, 
	fail.
not(_).
\end{code}
\end{boxed}
    \item
If the predicate is called using the {\em $<$module$>$:$<$goal$>$}
construct.  In this case {\em $<$goal$>$} behaves as if it is called
from within module {\em $<$module$>$}, independent from the current
context module.  This construct provides a method to override the module
protection explicitly.
\end{enumerate}

.S Creating a Source Module

Modules can be created by loading a {\em module file}.  A module file is
a file holding a module/2 directive as its first term.  The module/2
directive declares the name of the module and the predicates that can be
exported from the module (i.e. are {\em public}).  The rest of the file
is loaded into the module.  Below is an example of a module file,
defining reverse/2.

\begin{boxed}
\begin{code}
:- module(reverse, [reverse/2]).

reverse(List1, List2) :-
	rev(List1, [], List2).

rev([], List, List).
rev([Head|List1], List2, List3) :-
	rev(List1, [Head|List2], List3).
\end{code}
\end{boxed}

Modules can also be created dynamically by referring to them using one
of the module sensitive system predicates.  Modules created this way can
only export predicates using the export/1 predicate.  The predicates
defined in them can only be called by overruling the module protection
using the \verb$:/2$ operator.  The example of figure~\ref{fig:world}
below shows its use to define a multiple world database.

\begin{figure}
\begin{boxed}
\begin{code}
create_world(World) :-
	World:dynamic(sub_type/2).

assert_subtype(World, Sub, Super) :-
	World:sub_type(Sub, Super), !.
assert_subtype(World, Sub, Super) :-
	asserta(World:sub_type(Sub, Super)).

subtype(World, Sub, Super) :-
	World:sub_type(Sub, Super).
subtype(World, Sub, Super) :-
	subtype(World, Sub, Parent), 
	World:sub_type(Parent, Super).
\end{code}
\end{boxed}
    \caption{Multiple worlds using modules}
    \label{fig:world}
\end{figure}

.BD
.D module 2 +Module, +PublicList
This directive can only be used as the first term of a source file. It
declares the file to be a {\em module file}, defining {\em Module} and
exporting the predicates of {\em PublicList}. {\em PublicList} is a
list of name/arity pairs.
.C use_module 1 +File
Load the file(s) specified with {\em File} just like ensure_loaded/1.
The files should all be module files.  All exported predicates from the
loaded files are imported into the context module.  The difference
between this predicate and ensure_loaded/1 becomes apparent if the file
is already loaded into another module.  In this case ensure_loaded/1
does nothing; use_module will import all public predicates of the module
into the current context module.
.C use_module 2 +File, +ImportList
Load the file specified with {\em File} (only one file is accepted).
{\em File} should be a module file. {\em ImportList} is a list of
name/arity pairs specifying the predicates that should be imported from
the loaded module.  If a predicate is specified that is not exported from
the loaded module a warning will be printed.  The predicate will
nevertheless be imported to simplify debugging.
.P module_transparent +Name/+Arity, ...
{\em Preds} is a comma separated list of name/arity pairs (like
dynamic/1).  Each goal associated with a transparent declared predicate
will inherit the {\em context module} from its parent goal.
.C context_module 1 -Module
Unify {\em Module} with the context module of the current goal.
context_module/1 itself is transparent.
.C export 1 +Head
Add a predicate to the public list of the context module.  This implies
the predicate will be imported into another module if this module is
imported with use_module/[1,2].  Note that predicates are normally
exported using the directive module/2. export/1 is meant to handle
export from dynamically created modules.
.C import 1 +Head
Import predicate {\em Head} into the current context module. {\em Head}
should specify the source module using the {\em $<$module$>$:$<$term$>$}
construct. Note that predicates are normally imported using one of the
directives use_module/[1,2]. import/1 is meant for handling imports
into dynamically created modules.
.ED

.S Compatibility of the Module System

The principles behind the module system of SWI-Prolog differ in a
number of aspects from the Quintus Prolog module system.

\begin{itemize}
    \item
The SWI-Prolog module system allows the user to redefine system
predicates inside a module.
    \item
All predicates that are available in the {\em user} module are visible
in all other modules as well.
    \item
Quintus has the `meta_predicate/1' declaration were SWI-Prolog has the
module_transparent/1 declaration.
\end{itemize}

The meta_predicate/1 declaration causes the compiler to tag arguments
that pass module sensitive information with the module using the
\verb$:/2$ operator.  This approach has some disadvantages:

\begin{itemize}
    \item
Changing a meta_predicate declaration implies all predicates {\em
calling} the predicate need to be reloaded. This can cause serious
consistency problems.
    \item
It does not help for dynamically defined predicates calling module
sensitive predicates.
    \item
It slows down the compiler (at least in the SWI-Prolog architecture).
    \item
At least within the SWI-Prolog architecture the run-time overhead is
larger than the overhead introduced by the transparent mechanism.
\end{itemize}

Unfortunately the transparent predicate approach also has some
disadvantages. If a predicate {\em A} passes module sensitive information
to a predicate {\em B}, passing the same information to a module
sensitive system predicate both {\em A} and {\em B} should be declared
transparent. Using the Quintus approach only {\em A} needs to be
treated special (i.e. declared with meta_predicate/1)%
    \footnote{Although this would make it impossible to call {\it B}
	      directly.}.
A second problem arises if the body of a transparent predicate uses
module sensitive predicates for which it wants to refer to its own
module. Suppose we want to define findall/3 using assert/1 and
retract/1%
    \footnote{The system version uses recordz/2 and recorded/3.}.
The example in figure~\ref{fig:findall} gives the solution.

\begin{figure}
\begin{boxed}
\begin{code}
:- module(findall, [findall/3]).

:- dynamic
	solution/1.

:- module_transparent
	findall/3, 
	store/2.

findall(Var, Goal, Bag) :-
	assert(findall:solution('$mark')), 
	store(Var, Goal), 
	collect(Bag).

store(Var, Goal) :-
	Goal, 			% refers to context module of
				% caller of findall/3
	assert(findall:solution(Var)), 
	fail.
store(_, _).

collect(Bag) :-
	..., 
\end{code}
\end{boxed}
    \caption{Findall using modules}
    \label{fig:findall}
\end{figure}

The Quintus meta_predicate/1 directive can in many cases be replaced by
the transparent declaration.  Figure~\ref{fig:meta} gives a definition
of meta_predicate/1 as available from the `quintus' library package.

\begin{figure}
\begin{boxed}
\begin{code}
:- op(1150, fx, (meta_predicate)).

meta_predicate((Head, More)) :- !, 
	meta_predicate1(Head), 
	meta_predicate(More).
meta_predicate(Head) :-
	meta_predicate1(Head).

meta_predicate1(Head) :-
	Head =.. [Name|Arguments], 
	member(Arg, Arguments), 
	module_expansion_argument(Arg), !, 
	functor(Head, Name, Arity), 
	module_transparent(Name/Arity).
meta_predicate1(_).		% just a mode declaration

module_expansion_argument(:).
module_expansion_argument(N) :- integer(N).
\end{code}
\end{boxed}
    \caption{Definition of meta_predicate/1}
    \label{fig:meta}
\end{figure}

The discussion above about the problems with the transparent mechanism
show the two cases in which this simple transformation does not work.
