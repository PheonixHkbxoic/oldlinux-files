\appendix
\chapter{Hackers corner}

This appendix describes a number of predicates which enable the Prolog
user to inspect the Prolog environment and manipulate (or even redefine)
the debugger.  They can be used as entry points for experiments with
debugging tools for Prolog. The predicates described here should be
handled with some care as it is easy to corrupt the consistency of the
Prolog system by misusing them.

.S Examining the Environment Stack

.BD
.C prolog_current_frame 1 -Frame
Unify {\em Frame} with an integer providing a reference to the parent or
the current local stack frame.  A pointer to the current local frame
cannot be provided as the predicate succeeds deterministically and
therefore its frame is destroyed immediately after succeeding.
.C prolog_frame_attribute 3 +Frame, +Key, -Value
Obtain information about the local stack frame {\em Frame}.  {\em Frame}
is a frame reference as obtained through prolog_current_frame/1, 
prolog_trace_interception/3 or this predicate.  The key values are
described in table~\ref{tab:framekeys}.

\begin{table}
\begin{center}
\begin{tabular}{|l|p{3.5in}|}
\hline
\bf Key     & \bf Value \\
\hline
alternative & {\em Value} is unified with an integer reference to the
	      local stack frame in which execution is resumed if the
	      goal associated with {\em Frame} fails. Fails if the
	      frame has no alternative frame. \\
has_alternatives     & {\em Value} is unified with `1' if {\em Frame}
	      still is a candidate for backtracking. `0' otherwise. \\
goal	    & {\em Value} is unified with the goal associated with
	      {\em Frame}. If the definition module of the active
	      predicate is not {\em user} the goal is represented as
	      {\em module:goal}. Do not instantiate variables in this goal
	      unless you {\em know} what you are doing! \\
level	    & {\em Value} is unified with the recursion level of
	      {\em Frame}. The top level frame is at level `0'. \\
parent	    & {\em Value} is unified with an integer reference to the
	      parent local stack frame of {\em Frame}. Fails if {\em Frame}
	      is the top frame. \\
context_module & {\em Value} is unified with the context module of the
	      environment. \\
top	    & {\em Value} is unified with `1' if {\em Frame} is the top
	      Prolog goal from a recursive call back from the foreign
	      language. `0' otherwise. \\
\hline
\end{tabular}
\end{center}
    \caption{Key values of prolog_current_frame/1}
    \label{tab:framekeys}
\end{table}

.ED

.S Intercepting the Tracer

.BD
.C prolog_trace_interception 3 +Port, +Frame, -Action
Dynamic predicate, normally not defined. This predicate is called from
the SWI-Prolog debugger just before it would show a port. If this
predicate succeeds the debugger assumes the trace action has been taken
care of and continues execution as described by {\em Action}. Otherwise
the normal Prolog debugger actions are performed.

{\em Port} is one of \tty{call}, \tty{redo}, \tty{exit}, \tty{fail} or
\tty{unify}. {\em Frame} is an integer reference to the current local
stack frame. {\em Action} should be unified with one of the atoms
\tty{continue} (just continue execution), \tty{retry} (retry the
current goal) or \tty{fail} (force the current goal to fail). Leaving
it a variable is identical to \tty{continue}.

Together with the predicates described in section~\ref{sec:debugger} and
the other predicates of this chapter this predicate enables the Prolog
user to define a complete new debugger in Prolog.  Besides this it
enables the Prolog programmer monitor the execution of a program.  The
example shown in figure~\ref{fig:recordtrace} records all goals trapped
by the tracer in the database.  To trace the execution of `go' this way
the following query should be given:
\begin{code}
?- trace, go, notrace.
\end{code}

\begin{figure}
\begin{quote}
\begin{boxed}
\begin{code}
prolog_trace_interception(Port, Frame, continue) :-
        prolog_frame_attribute(Frame, goal, Goal), 
        prolog_frame_attribute(Frame, level, Level), 
        recordz(trace, trace(Port, Level, Goal)).
\end{code}
\end{boxed}
\end{quote}
    \caption{Record a trace in the database}
    \label{fig:recordtrace}
\end{figure}
.C prolog_skip_level 2 -Old, +New
Unify {\em Old} with the old value of `skip level' and than set this
level according to {\em New}.  New is an integer, or the special atom
\tty{very_deep} (meaning don't skip).  The `skip level' is a global
variable of the Prolog system that disables the debugger on all
recursion levels deeper than the level of the variable.  Used to
implement the trace options `skip' (sets skip level to the level of the
frame) and `up' (sets skip level to the level of the parent frame (e.g.
the level of this frame minus 1).
.ED

.S Exception Handling

A start has been made to make exception handling available to the
Prolog user. On exceptions a dynamic and multifile defined predicate
exception/3 is called. If this user defined predicate succeeds Prolog
assumes the exception has been taken care of. Otherwise the system
default exception handler is called.

.BD
.C exception 3 +Exception, +Context, -Action
Dynamic predicate, normally not defined.  Called by the Prolog system on
run-time exceptions.  Currently exception/3 is only used for trapping
undefined predicates.  Future versions might handle signal handling, 
floating exceptions and other runtime errors via this mechanism. The
values for {\em Exception} are described below.

\begin{description}
    \item[undefined_predicate]\mbox{}\\%
If {\em Exception} is \tty{undefined_predicate} {\em Context} is
instantiated to a term {\em Name}/{\em Arity}.  {\em Name} refers to the
name and {\em Arity} to the arity of the undefined predicate.  If the
definition module of the predicate is not {\em user} {\em Context} will
be of the form {\em Module:Name}/{\em Arity}.  If the predicate fails
Prolog will print the default error warning and start the tracer.  If
the predicate succeeds it should instantiate the last argument either to
the atom \tty{fail} to tell Prolog to fail the predicate or the atom
\tty{retry} to tell Prolog to retry the predicate.  This only makes
sense if the exception handler has defined the predicate.  Otherwise it
will lead to a loop.  This can be used to load library predicates when
encountered%
    \footnote{Note that find_library_predicate is not a system
	       predicate.}:

\begin{code}
exception(undefined_predicate, Name/Arity, retry) :-
        find_library_predicate(Name, Arity, Library), 
        consult(library(Library)).
\end{code}
\end{description}
.ED
