From: bet@internet.sbi.com (Bennett E. Todd)

This is some vile, yucko throwaway code. I suspect it should be
completely rewritten in perl. Then the same may well be true of most of
Unix:-).

I wrote this pair of programs, rdflops and wrflops. Each one prompts for
multiple floppies in sequence. I can back up my hard disk with something
like

        tar cvf - / | compress -v | wrflops /dev/fd0

and extract files back from the archive with

        rdflops /dev/fd0 | compress -d | tar xvf - filenames

I'm running the 0.95c+ kernel on the 0.95a rootimage, with utils out of
collections/095binar.tar.Z. I pulled all this from tsx-11. Ash as
/bin/sh was bombing off periodically, so I blew it away and stuffed
bash in there. You will probably want to change the #! line on these
scripts (especially wrflops!) to point to wherever you keep your bash.

The rdflops script seems to me to be simple, correct, and robust.

Catbytes could be more elegant, but it seems to do the job. With an
extra cat(1) squatting behind it to smooth the buffering (as I did in
wrflops), it seems to do a really clean job of driving the floppy. I
couldn't get dd(1) to do this job, since it pays attention to the
incoming blocksize. I wrote catbytes the way I did (avoiding printf and
so on) to keep the binary from bloating up too badly. Eventually I will
come to trust and appreciate shared libraries:-).

The wrflops script has some *really* fragile code in it for trying to
follow symlinks and deduce floppy sizes from major and minor device
numbers; you may well want to rip that all out.

The dirname script is probably not correct, but it seems to work well
enough for wrflops.

The reason wrflops is so careful to attempt to follow symlinks, is I use
/dev/fd0 and /dev/fd1. fd0 is a symlink to PS0 and fd1 is a symlink to
at1.

The only problem I have had, and it hasn't resulted in any loss of data,
has been the lack of EOF handling. When you run the restore, if you are
using tar(1) straight then it works perfectly. If you have a compress in
there then it works fine until you get to the end; then, instead of
everything exiting, compress proceeds to blow up. Happily, Linux seems
to be nicely robust in the face of programs trying to allocate up all of
the VM.

-Bennett (curmudgeon)
bet@sbi.com
