From:     Digestifier <Linux-Activists-Request@senator-bedfellow.mit.edu>
To:       Linux-Activists@senator-bedfellow.mit.edu
Reply-To: Linux-Activists@senator-bedfellow.mit.edu
Date:     Fri, 24 Sep 93 18:13:25 EDT
Subject:  Linux-Activists Digest #259

Linux-Activists Digest #259, Volume #6           Fri, 24 Sep 93 18:13:25 EDT

Contents:
  Re: School Science Club may distribute Linux...interested? (Roth Mark Daniel)
  More IBM PS/Valuepoints and Linux (Don Turnbull)
  Re: Non-US keyboards... and screens please too! (Risto Kankkunen)
  Re: [Help] Invalid partition table message at boot (Vaughan R. Pratt)
  Re: School Science Club may distribute Linux...interested? (rich@mulvey.com)
  Re: How does Linux compare to SUN IPC? (Chris Royle)
  Re: School Science Club may distribute Linux...interested? (11086)
  Re: School Science Club may distribute Linux...interested? (Patrick K. Ferrick)

----------------------------------------------------------------------------

From: roth@ux4.cso.uiuc.edu (Roth Mark Daniel)
Subject: Re: School Science Club may distribute Linux...interested?
Date: 24 Sep 1993 20:23:46 GMT

In article <CDvGI7.8t@acsu.buffalo.edu> ferrick@acsu.buffalo.edu (Patrick K. Ferrick) writes:
>Our high school science club may distribute Linux on floppies as a means of
>raising money for projects.  What we're thinking of is that instead of buying
>the floppies from us, people might be interested in renting the disks (in
>order to make copies of them) at a low rate.  Something like this:

Not that I'm against Science Club growth or anything (in fact, I was
the founder & president of my high school's science club), but I think
that charging money for Linux is against the GNU Public License.
While I can't tell you 100% for sure that it's against the letter of
the GPL, it's certainly against the spirit in which it was written.
Anyone who is well-versed on the GPL is welcome to correct me if I'm
wrong; this is just my $.02.

-- 
===========================================================================
 Brought to you by The Admiral,      | "Fate protects fools, small
   Renengade Time Lord masquerading  |   children, and TARDISes named
  as Commandant of Starfleet Academy |            Enterprise!"

------------------------------

From: 32HEN4B@CMUVM.CSV.CMICH.EDU (Don Turnbull)
Crossposted-To: comp.sys.ibm.pc.misc
Subject: More IBM PS/Valuepoints and Linux
Date: 23 Sep 93 18:16:02 GMT


Ok, the summary of my recent post is as follows:
1- I must boot with the current A.1 disk and use LILO to change the
   hd parameters for the session.  For my computer, the command is
   (at the Boot: prompt obtained by holding the ALT key down when
    LILO appears on the top of the screen...):

       ramdisk hd=1005,12,55 (where 1005 = #of tracks, 12= #heads, and 55= #
                                    sectors/track)

2- I must install the system and change the HD parameters in one of the
   include files, then re-compile the kernel.


Since I have the SLS utility for installing and using Linux, I have adequate
documentation on compiling the kernel.  Also, I have adeaquate documentation
on using LILO to control the boot sequence from OS/2 Boot Manager.  However,
I am still not able to mount the root /dev/hda1.  The system gets to that
point and kicks an error back.  I think the problem is that I have not porperly
defined the hard drive in the new kernel.  Can anyone tell me EXACTLY which
files have to be changed and used to compilt the kernel?  Also, what
information about my hard drive will I need?  I know the number of heads,
tracks, and sectors per track but is there more?  How do I go about finding
anything more I need out?  There is an include file (bootsect.S I think)
that gives unclear instructions as to how to define a hard drive that asks for
at least three more parameters than LILO.  One of them is wpcom.  Does that
sound at all familiar to anyone?  I will appreciate ANY help!  Thanks!.


      Don Turnbull 32HEN4B@CMUVM.CSV.CMICH.EDU
       "     "        "   @  "  .BITNET
                   14940f38@CPS201.CPS.CMICH.EDU

------------------------------

From: kankkune@klaava.Helsinki.FI (Risto Kankkunen)
Subject: Re: Non-US keyboards... and screens please too!
Date: 24 Sep 93 20:25:18 GMT

>How to get not Latin-1 characters on the screen (e.g. a with ogonek).
>Is there any package for it or I should write it? |-8=

There is currently a hard-coded translation table from Latin1 to the PC
character set in kernel/chr_drcv/console.c. To support other than Latin1
character sets you need suitable hardware, fonts (and maybe translation
tables) and some hard work. These kinds of things probably would benefit
from video device drivers which don't exist at the moment...

-- 
                                         It's that time of the year again

------------------------------

From: pratt@Sunburn.Stanford.EDU (Vaughan R. Pratt)
Subject: Re: [Help] Invalid partition table message at boot
Date: Fri, 24 Sep 1993 20:04:06 GMT

In article <27rcsj$55i@homer.cs.mcgill.ca> yveslach@binkley.cs.mcgill.ca (Yves LACHANCE) writes:
>
>   Somehow, I scrapped my partition table with Linux' fdisk. (I think)
>Details below.  (Please respond in email.)  Thank you.
>
>   I first installed Linux on my drive (that is brand new) like this:
>
>/dev/hda1       10M       Linux swap
>/dev/hda2      115M       Linux extfs   (ext2fs actually)
>
>   I successfully mkswap'ed and mke2fs'ed these two.  Then I made a new
>partition, for the remaining size of the drive:
>
>/dev/hda3      200M       Linux extfs   (ext2fs again)
>
>   I had problems mke2fs'ing it, so I went back to fdisk, deleted the
>partition.  Instead of typing "n" for a new partition, I typed "a" with
>the partition #3.  I was told that this was an empty partition.
>Eventually, I figured out that I was typing "a" (for add) instead of "n".
>I then rebooted, and it told me, before the LILO prompt:
>
>Invalid partition table
>
>   And hung up there.  I have to boot with my floppy disk.
>
>   When I couldn't make it work, I decided to re-install Linux from
>my SLS 1.03 distribution.  After going through the main system (series
>a, b & c), it told me the same message.  I tried the FIX-TABLE and the
>IGNORE-TABLE lines in /etc/lilo/config (and then lilo'e it), to no
>avail.
>
>   Both MS-DOS' and Linux' fdisks read the partition table information
>fine...  On my new configuration, I now have only two partitions, having
>merged the 115M and 200M ones.
>
>   Can anyone help?  Please reply by email.

Since as a Linux newbie I ran into this exact problem myself just
yesterday, I think it's worth posting this reply.

'a' does not denote add but active, and means toggle the bit denoting
whether the partition is *the* one to boot from (emphasis on "the").
Evidently you did this an odd number of times and left partition 3
bootable.  Since 2 was presumably also bootable, this violates one of
the preconditions of the following, which I found just now on page 543
line -9 of Michael Tischer's "PC Intern".

        "If the partition sector program [the code lying in 0x0-0x1be]
        detects that more than one partition is active or that none of
        the partitions are active, it aborts the booting process,
        displays an error message, and waits in a continuous loop.  You
        can exit this loop only by resetting."

For additional information on the PC booting process you can also
consult Amy Goebel's four articles TRYST[1-4].DOS, which I think I got
from a Simtel mirror but now can't locate so I've put my copies on
boole.stanford.edu, concatenated as /pub/tryst.dos.  (Tryst however
mentions only the case of no active partitions as problematic and so
would not have helped in this particular case.)

The location of the error message "Invalid partition table" will be
apparent when (as root) you do

        hexdump -c -n 512 /dev/hda

The partition table lives in the last 66 bytes of this, which you can
lay out more neatly using

        dd if=/dev/hda of=/tmp/mbr count=1
        hexdump -s 0x1be /tmp/mbr

(Double check the dd command before hitting return, one badly chosen
typo here can blow away your partition table and two can blow away your
whole disk!!  Unfortunately hexdump -s 0x1be /dev/hda prints nothing,
seems it can seek on files but not block devices---how come Linux has
no /dev/rhda?---whence the need for the dd.)

Each of the four 16-byte lines describes one partition:

        Status(1)  Begin(3)  Type(1) End(3) Boot-sector(4) Size(4)

(n) is bytes for this field.  Status is 0x80 if `a'ctive (= bootable),
else 0x00.  Begin and end are block addresses of the partition
endpoints in units of head(8 bits)/sector(6 bits)/cylinder(10 bits).
(What happens with disks with more than 1023 cylinders?  There are
plenty of these in SCSI-land.)  Type is what operating system the
partition contains (various flavors of DOS, XENIX, Linux, etc.) or what
function it performs (swap etc.).  Boot-sector is the absolute sector
address of the boot sector for this partition (Tischer says it is the
sector address relative to the partition, but this does not agree with
what hexdump shows).  Size is the total number of sectors in the
partition.

Following the four partition descriptors is the short 0xaa55 (don't
forget the 8086 architecture is little-endian, so this is 0x55 at
address 0x1fe followed by 0xaa at 0x1ff).  This serves as the standard
signature, in the PC world, of useful data in the vicinity.
-- 
Vaughan Pratt
(FTPables: boole.stanford.edu:/pub/ABSTRACTS.)

------------------------------

From: rich@mulvey.com
Subject: Re: School Science Club may distribute Linux...interested?
Date: Fri, 24 Sep 1993 21:18:47 GMT

Roth Mark Daniel (roth@ux4.cso.uiuc.edu) wrote:
: In article <CDvGI7.8t@acsu.buffalo.edu> ferrick@acsu.buffalo.edu (Patrick K. Ferrick) writes:
: >Our high school science club may distribute Linux on floppies as a means of
: >raising money for projects.  What we're thinking of is that instead of buying
: >the floppies from us, people might be interested in renting the disks (in
: >order to make copies of them) at a low rate.  Something like this:

: Not that I'm against Science Club growth or anything (in fact, I was
: the founder & president of my high school's science club), but I think
: that charging money for Linux is against the GNU Public License.
: While I can't tell you 100% for sure that it's against the letter of
: the GPL, it's certainly against the spirit in which it was written.
: Anyone who is well-versed on the GPL is welcome to correct me if I'm
: wrong; this is just my $.02.

   I replied directly to the poster, but I may as well reiterate here. :-)

   It is legal under the GPL to charge a "reasonable copying fee" for
GPL'd software.  That means that the club would be free to charge for
copying - once.  After the first time, they're out of luck.  As for
renting the software, that goes *completely* against the letter and
spirit of the GPL, which basically says that you can't make a profit
from it.

   I did, however, suggest selling support for Linux.  :-)

- Rich
-- 
Rich Mulvey                 Amateur Radio: N2VDS              Rochester, NY
rich@mulvey.com         "Ignorance should be painful."

------------------------------

From: c@royle.org (Chris Royle)
Subject: Re: How does Linux compare to SUN IPC?
Date: Fri, 24 Sep 1993 08:17:37 GMT

In comp.os.linux, Steve Norton (steve@interaccess.com) wrote:
:> a228dhal@cdf.toronto.edu (Dhaliwal Bikram Singh) writes:

:> >It has seemed to me that my Linux system at home (X and GCC running in
:> >a 15mb partition, on a 386-40, with room to spare) is faster than the
:> >SUN IPC workstations I use at school.  I can only offer subjective 
:> >speculation though, ie. time for a xterm to open, etc... 

:> Well, here at the office, we've had 4 machines: One 386-40, 8 MB of
:> RAM, one 486-66, 16 MB of RAM, one Sparc-10 with 64 MB of RAM and
:> one Sparc-2 with 32 MB of RAM.

:> The 386-40 ($1000) will process Usenet news about 2x faster than the
:> Sparc-10 ($20,000).  Of course, this is entirely due to the super fast
:> Linux I/O.  Processing news is all disk access, and the IDE drives blow
:> away the sun SCSI-2 drives.  Unfortunately, the Sparc-10 is faster for just
:> about everything else.

:> The 486-66 ($3000) runs 10-25% faster than the Sparc-2 ($7000) for CPU
:> intensive activities (compiling, crunching numbers, Xlife, etc.)  For I/O
:> things (xli on Xwindows) it completely blows the Sparc-2 away.

:> Now, I'm kind of biased.  I personally believe Sparcs are junk, and that
:> a 40Mhz motherboard with a 386 is just as good as a 40Mhz Sparc motherboard.

Well.... let me see if I can find some stats :

Times in seconds, description of tests to follow.
(I did have some timings for a SPARC 59MIPS, but have lost them. The DX2/50
Beat it running DOS, anyway).

        Linux     DOS     SUN     IRIS         Linux    DOS
        0.99.9    5.0     IPC     INDIGO       0.99.10  5.0
        DX2/50    DX2/50          IRIX 4.0.5F  DX2/66   DX2/66

1.      19        35      72      17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.17           15       26

2.      13        19      49      14           9        49

3.      21        27      63      25           17       22

Test 1 is 50,000,000 Floating point multiplications
Test 2 is 50,000,000 Integer multiplications
Test 3 is 50,000 array copies, each array is 1,000 characters.

We have always felt that the SUN IPC was a slow thing, and this appared to
prove it to us. The SPARC CLassic 59MIPS came in a couple of seconds slower
on each test that the DX2/50 running DOS. The programme is written in C
and compiled under Linux with gcc, DOS with Visual C++ 1.0, on the SUN with
the standard ANSI compiler and ditto on the Iris machine.

Hope that is informative to someone somewhere...

Chris.      
-- 
Chris Royle               Cheap mail & news feeds over UUCP from UKP5/mo
Managing Director         Windows / X-Windows code, 386s from UKP540
Objectronix Limited       Desktop publishing
Leeds, UK                 Tel. +44 532 661536     

------------------------------

Crossposted-To: gnu.misc.discuss
From: u1086aa@unx.ucc.okstate.edu (11086)
Subject: Re: School Science Club may distribute Linux...interested?
Date: Fri, 24 Sep 1993 21:31:02 GMT

In article <CDvGI7.8t@acsu.buffalo.edu> ferrick@acsu.buffalo.edu (Patrick K. Ferrick) writes:
>I'm posting this as a sort of a "test balloon"...!
>
>Our high school science club may distribute Linux on floppies as a means of
>raising money for projects.  What we're thinking of is that instead of buying
>the floppies from us, people might be interested in renting the disks (in
>order to make copies of them) at a low rate.  Something like this:
>
>You send them $40, and they mail you the base distribution of the most recent
>Slackware package.  You copy the disks, and mail them back in a prepaid box
>of some sort, within say two weeks, and they refund $20.  Ie. you get Linux
>for $20.  Other parts of the dist would also be made available, as might be
>other packages if the response is good.

I'm not sure this is legal under the GPL. My understanding of the GPL
(which could easily be incorrect) is that you may charge a reasonable 
media fee to distribute GPL'd software, but not charge a fee for the 
software itself.  Under your scheme, the customer does not keep the media, 
so the fee is for the software itself.

I have taken the liberty of cross-posting this to gnu.misc.discuss so
the GPL experts can have a look at this. Is this a violation of the GPL?

(I'm willing to risk shooting off my mouth about things I don't
understand fully in order to possibly help a science club avoid
accidentally violating a software license. Flames will be duly
considered.)

==========
My opinions are my own

Jim West
Associate Professor
Electrical and Computer Engineering
Oklahoma State University
jwest@jwest.ecen.okstate.edu


>
>If you'd like to get Linux cheap, and help out a relatively worthy cause,
>could you please drop me some email?  (I'm the advisor to the science club,
>in case that isn't obvious!)
>
>thanks,
>pat ferrick
>Town of Webb School
>Old Forge, NY
>
>
>
>



------------------------------

From: ferrick@acsu.buffalo.edu (Patrick K. Ferrick)
Subject: Re: School Science Club may distribute Linux...interested?
Date: Fri, 24 Sep 1993 21:36:11 GMT

I said:

>>Our high school science club may distribute Linux on floppies as a means of
>>raising money for projects.  What we're thinking of is that instead of buying
>>the floppies from us, people might be interested in renting the disks (in
>>order to make copies of them) at a low rate.  Something like this:

And I blew it big time.  Sorry.  When this idea came to me, I admit I was so
thrilled with the prospect that I completely forgot the GPL, and somehow
turned "reasonable copying fees" into "if you can get it you can rent it".
Obviously NOT the intent of the GPL, and I apologize.

We _may_ copy Linux disks for a bargain rate, and by all means let me know if 
you'd be interested in this...but we have NO plans to folow through with the
plans in my earlier post.

pat













------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.99pl9 released on April 23, 1993

End of Linux-Activists Digest
******************************
