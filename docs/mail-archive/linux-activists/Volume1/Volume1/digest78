From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Sun, 1 Mar 92 22:45:08 EST
Subject:  Linux-Activists Digest #78

Linux-Activists Digest #78, Volume #1             Sun, 1 Mar 92 22:45:08 EST

Contents:
  Various problems and some solutions (Marc CORSINI)
  GCC Errors (Troy E Bull)
  Elvis bug (was: Re: Killing init, shutdown, reaping zombies, anoying kernel messages) (Mark William Hopkins)
  Running linux in < 500kB (Mark William Hopkins)
  Re: SCSI support (Rick)
  Re: Running linux in < 500kB (S3679988)
  Re: Various problems and some solutions (Jim Stewart)
  Re: Running linux in < 500kB (Jim Stewart)
  Re: Elvis bug (was: Re: Killing init, shutdown, reaping zombies, anoying kernel messages) (Kevin Brown)
  Pcomm 1.2 ported to Linux (Ron Pool)
  SCSI drivers : revisited (Drew Eckhardt)

----------------------------------------------------------------------------

From: corsini@geocub.greco-prog.fr (Marc CORSINI)
Subject: Various problems and some solutions
Reply-To: corsini@labri.greco-prog.fr
Date: Sun, 1 Mar 1992 22:48:26 GMT



hi,
Today I've applyed different patches on the kernel and features which arise in
various problem
1) my env is:
386Sx 4Mo VC, gcc-1.4, gnuemacs, uemacs, swapon and a 2Megs swap-file
2) the patches and features I try to add
mmap, dev/kmem, Peter init-1.2

The problems: (except the classical patches applying)
a) after the mmap patches I try to run the ega it works for the strips
but hangs during the dots test
Moreover the blank feature of VC won't work anymore (funny remark is
that when working on dev/tty2 , the blank put the screen to "swap" to
dev/tty1; and when working on dev/tty1 *only* half screen blanks)
b) after dev/kmem of Diamano
gnuemacs cannot anymore save files the error message is
IO error writing <file>: bad file nr
[the only change i made was the -NR-reboot value]
c) for the Peter init-1.2, the package won't compile with the new
include (stdio.h is no longer STDC) and the link fails for stderr
to solve it I use the old include files and link with the library of
gcc-1.37 and all works as for the previous release

I think that Peter should try to adapt his package / or some kind soul (and
C guru) could make include and library more uniform (I can't do that since I
don't even know why the port of gcc-1.4 has not been made 1.37 compatible)

I will dig on the IO error in gnuemacs (which do not exist in uemacs)
BTW I don't understand why uemacs is XON/XOFF sensitive in init/login
and not otherwise. Nor gnuemacs is not XON/XOFF sensitive

Finally I've seen in a recent news someone try to mkfs a swap
partition (or have I misread). A mkswap will cure the "cannot find
swap signature"

Marc <corsini@labri.greco-prog.fr>
Any clue wellcome

------------------------------

From: bull@iastate.edu (Troy E Bull)
Subject: GCC Errors
Date: 1 Mar 92 22:38:12 GMT

I am having some troubles getting gcc installed.  What is happening is,
I get errors like

stderr : trying to print from inside text segment, symbol not defined.

I would appreciate it is anyone knows what causes this and how I can fix
it.

Thanks in advance.

-- 
Does a machine that imitates human beings perform any useful service at all?
        (We are not running short of human beings.) 
                   -Bolter on Turing about AI

------------------------------

From: markh@csd4.csd.uwm.edu (Mark William Hopkins)
Subject: Elvis bug (was: Re: Killing init, shutdown, reaping zombies, anoying kernel messages)
Date: 1 Mar 92 23:15:21 GMT

In article <1992Mar1.161407.25416@colorado.edu> drew@cs.colorado.edu (Drew Eckhardt) writes:
>Shutdown : 
>If you accidentally leave elvis running on a file, in another window,
>you end up with a permanantly busy file if you reset.  A shutdown
>command / syscall which killed everything else off would be nice.

That's an Elvis bug, not a kernel bug.  My reading of the Elvis source and
documentation is that Elvis uses only one temporary file (one temporary file
for EVERYTHING!).  You can't really even edit two files at once (say, if you
have job control), as far as I can determine.

I think the author put a recover option in the latest version of elvis.  That
can be used to bring the temporary file back into elvis.  Otherwise, you can do
what I've always done: delete the temporary.

Even the UNIX vi runs into similar problems.  On frequent occasions, due to the
limited number of possible names for temporary files, there will be a name clash
and vi won't start up.  This is about a 1% frequency on this machine.

Why I don't like elvis: the screen-handling is abominable, and the temporary
file-handling thrashes and sometime even crashes the machine (on a DOS).
Usually, I just stick with a version of vi that memory-maps the buffer.  More
generally, the editor really has no business messing with temporaries: that's
the OS's job.  Let the editor do everything in memory only, and let the OS deal
with the swapping.

But the source is nice to look at (for educational purposes)!

------------------------------

From: markh@csd4.csd.uwm.edu (Mark William Hopkins)
Subject: Running linux in < 500kB
Date: 1 Mar 92 23:27:12 GMT


   If someone's got the time and inclination, please modify the kernel so that
it can run in < 500kB RAM.   No UNIX has any business using more than that.
Maybe better algorithms (that's what Coherent prides itself on, justifiably)
or something need to be used.  If I have to go out and buy memory extensions,
then I might as well just save the trip and spend money on a Coherent or the
like.
   The idea of free public domain software is to get something that can run on
most machines without having to spend any money.  Far too many machines are
being excluded by the 2MB limitation.

------------------------------

From: pclink@cheops.qld.tne.oz.au (Rick)
Subject: Re: SCSI support
Date: 2 Mar 92 00:47:20 GMT

Anybody working on support for Future Domain SCSI controllers?

Rick.

------------------------------

From: S3679988@deimos.ucc.umass.edu (S3679988)
Subject: Re: Running linux in < 500kB
Date: 2 Mar 92 01:27:44 GMT

In <1992Mar1.232712.18444@uwm.edu> markh@csd4.csd.uwm.edu writes:

>    If someone's got the time and inclination, please modify the kernel so that
> it can run in < 500kB RAM.   No UNIX has any business using more than that.
> Maybe better algorithms (that's what Coherent prides itself on, justifiably)
> or something need to be used.  If I have to go out and buy memory extensions,
> then I might as well just save the trip and spend money on a Coherent or the
> like.

This would be nice, but, IMHO, the amount of time spend using virtual memory
would be almost absurd, its bad enough in 2MB.


>    The idea of free public domain software is to get something that can run on
> most machines without having to spend any money.  Far too many machines are
> being excluded by the 2MB limitation.

Please don't take this as a flame, i don't intend on it being that.
I feel that if we restrain the operating system form being able to take
advantage of some of the newer technologies that have come about over
the last few years (of note, the i386, and cheaper RAM). 

I personally like hearing that the 8088, and 286 are finally being 
acknowledged as being 'obsolete' -- IBM and Microsoft are making
their own operating systems, NT, and OS/2 -- which i am *sure* 
will require more than 512K. 

I feel that the time that would be spend hacking linux down to being
able to run in 512K would be better spend making it run X11, 
distributed processing, or maybe do something we all haven't though
of. If we make it run in 512K, why not make it run on an 8088?
After all, countless amounts of those have been sold. Even if the kernel
were to run in 512K, what would you be able to use it for? emacs
loves memory, and gcc chews it like popcorn. In fact, windows doesn't 
like 512K all that much. In then end, you would probably end up
upgrading your RAM (if not your cpu, also).

I agree with your point about using more efficient algorithms, but,
Linux is currenlt 0.12, and _anything_ at 0.12 that works is pretty
impressive (give yourself a pat, linus!). I would hope that by 1.0,
things start to settle down, and people start debating about which
algorithm should be used, as opposed to "$@#$ !!  we need ??'s to
run X-cows".


Craig Hagan

------------------------------

From: stewart@wimsey.bc.ca (Jim Stewart)
Subject: Re: Various problems and some solutions
Date: Mon, 02 Mar 1992 01:48:57 GMT

The libc.a for gcc-1.40 contains broken versions of vsprintf, vfprintf
and vprintf.  These functions must be fixed before you rebuild
Libcurses.  

The problem is that all three are declared to take, and use
a *varargs* style parameter list.  This is just not the case.  Each 
takes a fixed number of paramaters, the last of which is a va_list pointer.

Here is a context diff for vsprintf.c -- the other v*printf.c files can be fixed
in the same way. 

NOTE: you will  have to fix the prototype declarations in stdio.h as well

js

*** /usr/src/lib/stdio/vsprintf.c       Sun Feb  2 23:02:20 1992
--- vsprintf.c  Sun Mar  1 01:58:27 1992
***************
*** 31,48 ****
  #include <stdarg.h>
  
  int
! vsprintf(char *str, const char *fmt, ...)
  {
-       va_list ap;
        FILE f;
        int len;
  
-       va_start (ap, fmt);
        f._flag = _IOWRT+_IOSTRG;
        f._ptr = str;
        f._cnt = 32767;
        len = _doprnt(fmt, ap, &f);
        *f._ptr = 0;
-       va_end (ap);
        return (len);
  }
--- 31,45 ----
  #include <stdarg.h>
  
  int
! vsprintf(char *str, const char *fmt, void * ap)
  {
        FILE f;
        int len;
  
        f._flag = _IOWRT+_IOSTRG;
        f._ptr = str;
        f._cnt = 32767;
        len = _doprnt(fmt, ap, &f);
        *f._ptr = 0;
        return (len);
  }


------------------------------

From: stewart@wimsey.bc.ca (Jim Stewart)
Subject: Re: Running linux in < 500kB
Date: 2 Mar 92 01:43:03 GMT

In article <1992Mar1.232712.18444@uwm.edu> markh@csd4.csd.uwm.edu (Mark William Hopkins) writes:
>   If someone's got the time and inclination, please modify the kernel so that
>it can run in < 500kB RAM.  No UNIX has any business using more than that.

...SCO, Ultrix, BSD ...? 

>Maybe better algorithms (that's what Coherent prides itself on, justifiably)
>or something need to be used.  If I have to go out and buy memory extensions,
>then I might as well just save the trip and spend money on a Coherent or the
>like.

By all means, Coherent is an interesting product...

>   The idea of free public domain software is to get something that can run on
>most machines without having to spend any money.  Far too many machines are
>being excluded by the 2MB limitation.

The idea of *free* *public domain* software is to provide solutions to
common problems in the computing community.  The size of the machine reflects
the size of the problem.  X11 is essentially cost free,  but it needs a lot
of resources.  KCL and AKCL are cost free, and won't run in less than 4 Meg.

Be careful of the term *public domain* ... Linux is not in the *public domain*,
it is owned by Linus, who has been kind enough to let the rest of us use it.

ps.  If you are asking other people to spend time and inclination on a
     problem, a slightly less strident tone might be called for.

js 

------------------------------

From: kevin@taronga.taronga.com (Kevin Brown)
Subject: Re: Elvis bug (was: Re: Killing init, shutdown, reaping zombies, anoying kernel messages)
Date: 2 Mar 92 01:44:39 GMT
Reply-To: kevin@taronga.taronga.com (Kevin Brown)

In article <1992Mar1.231521.17239@uwm.edu> markh@csd4.csd.uwm.edu (Mark William Hopkins) writes:
>In article <1992Mar1.161407.25416@colorado.edu> drew@cs.colorado.edu (Drew Eckhardt) writes:
>>Shutdown : 
>>If you accidentally leave elvis running on a file, in another window,
>>you end up with a permanantly busy file if you reset.  A shutdown
>>command / syscall which killed everything else off would be nice.
>
>That's an Elvis bug, not a kernel bug.  My reading of the Elvis source and
>documentation is that Elvis uses only one temporary file (one temporary file
>for EVERYTHING!).  You can't really even edit two files at once (say, if you
>have job control), as far as I can determine.

It has to do with the naming convention elvis uses for the temp file, more
than anything else.  If I recall correctly, it uses the inode number of the
file being edited as part of the temp file name.  You can't edit a given
file more than once at a time because the temp file will already exist on
the second try.

When the system crashes, the temp file is not removed (unless you clean up
/usr/tmp upon startup).  When you go to edit the file, elvis complains that
the file is busy (because it sees the temp file).

This is on a file by file basis, however.  You can edit multiple files with
elvis (just as you can with vi), both with one session and with multiple
sessions (for example, it's possible to shell out of elvis, then edit
another file with it).  The *only* limitation that I've seen is that you
can't have multiple elvis sessions going at the same time on the same
file.

>I think the author put a recover option in the latest version of elvis.  That
>can be used to bring the temporary file back into elvis.  Otherwise, you can do
>what I've always done: delete the temporary.

I don't know about the latest version.  In version 1.4 and earlier, there
existed a separate program that would recover your file from the temporary
for you.  It was called "virec" or "virecover".

>Even the UNIX vi runs into similar problems.  On frequent occasions, due to the
>limited number of possible names for temporary files, there will be a name clash
>and vi won't start up.  This is about a 1% frequency on this machine.

Fascinating.  I've never seen this happen, but I don't doubt it.

>Why I don't like elvis: the screen-handling is abominable, and the temporary
>file-handling thrashes and sometime even crashes the machine (on a DOS).

Why would anyone even think of using DOS?  ;-)

>Usually, I just stick with a version of vi that memory-maps the buffer.  More
>generally, the editor really has no business messing with temporaries: that's
>the OS's job.  Let the editor do everything in memory only, and let the OS deal
>with the swapping.

I don't know what the original justification for the temp file in vi was.
I suspect it was originally there to overcome the 64k data space limitations
inherent under BSD 2.1 (or something like that) on the PDP-11.

However, one of the goodies you get with a temp file is the ability to
recover your editing session if it dies for some reason (e.g., the system
goes down, or your session gets disconnected).  So it's not *all* bad...



                Kevin Brown (kevin@taronga.taronga.com)

------------------------------

From: ron_p@aruba.nysaes.cornell.edu (Ron Pool)
Subject: Pcomm 1.2 ported to Linux
Date: 1 Mar 92 19:37:37 GMT

I've ported Pcomm 1.2 to Linux 0.12.  I've placed two compressed tar archives
on tsx-11.mit.edu.  I don't know if or when the archives will be moved into
a place on tsx-11 you can download them from.  Appended below is a copy of
the file Readme.linux, which can be found in both of the tar archives I've
uploaded.  I can also pack up my port of rzsz if there is interest.

-- Ron Pool, ron_p@empire.cce.cornell.edu

======== Readme.linux ========

Pcomm 1.2 for Linux
Ported to Linux 0.12 by Ron Pool, ron_p@empire.cce.cornell.edu

[for Linux 0.12; compiled with newgcc (gcc 1.40); linked with a customized
libcurses (printw.c fixed to use vsprintf) and newlibc (newlibc with vsprintf
fixed to use va_list ap as last argument instead of ... varargs style last
argument)]

The binaries, documentation, and config files for this package are in
pcomm12b.tar.Z.  Full source, documentation, and config files are in
pcomm12s.tar.Z.

General notes:

Screen display is occasionaly incorrect;  I think this is due to an incorrect
termcap file in the Linux 0.12 distribution.  If anyone knows what's wrong
with the termcap file, let me know.  I've been ignoring the minor display
problems as I usually know what should be on the screen when they occur.

I thought I was just porting Pcomm to Linux for my own use, so I didn't keep
track of the changes I made.  The other thing I didn't do was make note of
where I got Pcomm from; Pcomm sources can be found using archie.  The only
reason you'll need to get the original Pcomm source is to compare this source
with the original to see how I mangled it.

I'm rarely using Pcomm on my Linux system now; the latest ka9q is fast
enough for my uses.  I'm fortunate to have control of a terminal server
capable of running compressed SLIP.  I find it nice to be able to start
ftp'ing a directory of files to my home Linux machine and then read
Usenet news in another ka9q session.

Installing:

The precompiled version of Pcomm 1.2 expects that the binaries for Pcomm
will go in /usr/local/bin.  It also expects that some configuration files
will go in /usr/local/lib/pcomm.  You can change the Makefile to install
the binaries somewhere else if you want.  You cannot move the configuration
files elsewhere, unless you change the definition of DEFAULT_DIR in the
Makefile and rebuild all binaries first.

1. Type
       make install
   to install the binaries in /usr/local/bin (or wherever you've specified
   in the Makefile).

2. Type
       make install_config
   to install the Pcomm configuration files and a sample script in
   /usr/local/lib/pcomm (or wherever you've specified in the Makefile).

3. Customize the configuration files by running pcomm and using the
   setup screen.  Details can be found in documents in the Doc subdirectory
   of the Pcomm distribution

------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: SCSI drivers : revisited
Date: 2 Mar 92 03:03:50 GMT

When compiling the SCSI drivers, I got them working, copied files to and from
my SCSI partition, did binary and text diffs that worked fine - with 
information out of buffer cache and really coming off of disk.

Not long after, I noticed that I could binary diff things fine, but that 
a more didn't work, and later I discovered tail would EINVAL.  Off of disk
or buffer cache.

Turns out
I had overlooked a single macro (IS_SEEKABLE()) in fs.h.  The net result was
my SCSI disk was being treated as a sequential device.  I went back, fixed that,
bumped the SD major number up to eight to make way for unnamed pipes, 
ST number up to 9, and all works perfectly (on my system - one other user
gets the INQUIRY command through safely and then crashes on a 
READ CAPACITY with extended sense of ILLEGAL REQUEST) -  


The new binary has been uploaded to nic.funet.fi and tsx-11.mit.edu,
under bootimage.seagate.tar.1.Z, source scsi.shar.1.Z and docs user.docs.1.Z .

Note that this still tries to mount root of of /dev/hd1 - you'll want to
change that and avoid the fatal kernel panic if you are a SCSI-only 
system.

Like I said, it works on my system perfectly, and I need other seagate 
ST0x SCSI owners to try it out, try and crash it, and get it working 
on everyone's systems. 

Also, I need signatures for BIOS revision != 
2.00 - ie the first ASCII string that shows up in the ROM, and the offset
from the begining of the ROM, so the whole thing can be 100% self configuring, 
letting us send out a single distribution kernel for everyone, adaptec,
dtc, seagate SCSI, normal IDE or MFM.

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
