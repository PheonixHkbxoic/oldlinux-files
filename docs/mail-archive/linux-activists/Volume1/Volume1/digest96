From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Wed, 11 Mar 92 06:15:08 EST
Subject:  Linux-Activists Digest #96

Linux-Activists Digest #96, Volume #1            Wed, 11 Mar 92 06:15:08 EST

Contents:
  Re: Linux File System Document Revision 1.0 (Theodore Ts'o)
  New gcc 2.0 (Hongjiu Lu -- Graduate Student)
  Re: Why is RS232 comm. so slow ? (Mattis Andersson)
  Linux 0.95 woes (Ray Cole)
  libg.a (Philip Copeland)
  Re: Rebooting - an observation (Drew Eckhardt)
  Re: Installable filesystems in linux (Drew Eckhardt)
  0.95 - some questions (Andreas Priebe)
  BSD 386 "press release" (Drew Eckhardt)
  0.95 Floppy driver hangs machine (Jon Tombs)
  pseudo directories (Lawrence C. Foard)
  SCSI drivers (Drew Eckhardt)

----------------------------------------------------------------------------

From: tytso@ATHENA.MIT.EDU (Theodore Ts'o)
Subject: Re: Linux File System Document Revision 1.0
Reply-To: tytso@athena.mit.edu
Date: Wed, 11 Mar 1992 06:28:53 GMT

   From: hpa@casbah.acns.nwu.edu (H. Peter Anvin N9ITP)
   Date: Wed, 11 Mar 1992 00:26:38 GMT

   On another question: what is the rationale behind /usr/tmp anyway?  If
   /tmp is allowed to be an installable system anyway, why not make /tmp 
   link to /usr/tmp if it is desirable to keep it on /usr?

   Am I missing something?

Yes.  The difference is that /tmp is cleared upon reboot (in /etc/rc),
while /usr/tmp usually is not.  Therefore, cryptographic materials used
by Kerberos and SPX would be put in /tmp, while editor preserve files
would be placed in /usr/tmp.  

Most temporary files should go in /tmp, since they generally aren't
useful after the system reboots.  There are some exceptions, though....

                                                - Ted

------------------------------

From: hlu@yoda.eecs.wsu.edu (Hongjiu Lu -- Graduate Student)
Subject: New gcc 2.0
Reply-To: hlu@yoda.eecs.wsu.edu (Hongjiu Lu -- Graduate Student)
Date: Wed, 11 Mar 1992 07:03:33 GMT

Hi,

I just put a new copy of gcc 2.0 on dec1. It should work with 0.95. To
use with 0.12, you have to remove the patches applied for previous gcc
2.0 and you have to define LINUX_0_12.

H.J.
-- 
School of EECS                          Internet: hlu@eecs.wsu.edu
Washington State University             BITNET:   60935893@WSUVM1.BITNET
Pullman, WA 99164                       Phone:    (509) 335-6470 (O)
USA                                               (509) 334-6315 (H)

------------------------------

From: mattis@elixir.lne.kth.se (Mattis Andersson)
Subject: Re: Why is RS232 comm. so slow ?
Date: 10 Mar 92 20:41:00 GMT

The problem is solved.. I found that an internal modem caused the probelms.

One should probably check the hardware more carefully the next time...

Everything seems to work fine, except for uemacs which sometimes missplaces 
charcters on the screen 

Mattis Andersson

mattis@elixir.lne.kth.se

------------------------------

From: raycole@matt.ksu.ksu.edu (Ray Cole)
Subject: Linux 0.95 woes
Date: 11 Mar 92 07:46:07 GMT

Here's yet another user having problems getting linux 0.95 up and running. I
am experiencing the same problems with it giving the floppy reset when I insert
the boot disk, but it does continue after saying this about 15 times.  The real
problem is when I go to try to mount the harddisk.  It will let me make the file
system, but when I type mount /dev/hda2 /mnt the drive runs for a bit, then 
comes back and says mount: error 2.  This happens no matter what partition I 
try to mount, and no matter what size of partition (not that this should really
make a difference anyway).  Can anyone help me?  I'm running this on an Everex
486/25 with a 211 Meg IDE hard drive and a vga screen.  Any and all help would 
be appreciated.  Thanx in advance


-- 
Ray Cole                    |    raycole@matt.ksu.ksu.edu
Computer Consultant         |   This space for rent or hire 
Manhattan KS  USA           |         Make an offer

------------------------------

From: p_copela@csd.brispoly.ac.uk (Philip Copeland)
Subject: libg.a
Date: 9 Mar 92 17:05:56 GMT
Reply-To: p_copela@csd.bristol-poly.ac.uk

Just copied gdb4.4 off tsx-11, is there a corrisponding libg.a for the debugging?

if not, where do i start?

Phil
=--=

PS linux 0.95 is cool!

------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: Re: Rebooting - an observation
Date: Wed, 11 Mar 1992 08:12:25 GMT

>
>What about EPROM?  I haven't been able to prove it yet, but another fellow
>and I bought laptops in a group purchase and are running Linux on ours.  Of
>the group, we are the only ones (that we know of) with corrupted EPROM
>setups.  Linux is highly suspected here.  It has removed the capability of
>turning on some power-save features (they don't appear in the setup menus
>any more).
>
>-Bob
>
>------

Your power supply must sure be hot - many EPROMs are spec'd to write 
at 25 volts.... five times over a normal Vcc of 5 volts =8^)

You do mean corrupted CMOS setups, don't you ?

I know in some instances, the reboot code in .12 garbled things up - 
but entering CMOS setup, or discharging CMOS and starting from 
scratch will let you set things back to normal.  Check your 
docs, and make sure you don't forget your disk types, etc.  Some 
systems may require a setup program on floppy.

I posted some reboot code which kicks back to real mode, and 
then jumps to 0xffff:0, which appears to rectify the problem
(for me and a few others) - however a few people said it didn't 
work in their machines with BIOS shadowing on, and for some 
people it may have just not worked.
 
As far as corrupting this by "scanning" memory, etc : 
CMOS is not mapped into the memory address space, it exists on the 
IO bus.  



------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: Re: Installable filesystems in linux
Date: 11 Mar 92 08:37:06 GMT

In article <1992Mar11.023659.11075@casbah.acns.nwu.edu> hpa@nwu.edu (Peter Anvin) writes:
>
>Excuse me for asking this question before RTFM... I don't yet have a
>machine that I can run linux (or LINUX?) on for another month or so, but
>does linux support installable filesystems, or is the Minix file system
>hardcoded in?  If so, is anyone working on an DOS filesystems driver? I

This is changing.  VFS is isolating the file-system specific code.

>know the DOS filesystem sucks majorly and I am not intending to use it for
>anything serious, but I can see it being quite useful to allow shuttling
>data between DOS and linux.  I presume most linuxers also are running DOS


Mtools will directlly read and write DOS floppies and disk partitions 
fine.  Also, you can tar directly to raw floppy with the GNUISH tar, 
or from another Unix machine (I tar from RS6000's)

------------------------------

From: apr%dec001.ziap.wtza-berlin.de@noc.belwue.de (Andreas Priebe)
Subject: 0.95 - some questions
Reply-To: apr%dec001.ziap.wtza-berlin.de@noc.belwue.de (Andreas Priebe)
Date: Wed, 11 Mar 1992 09:15:52 GMT

Hi Linuxers,

just got 0.95 and played around with the floopy version.
I had an unused HD partition and made succesfully a new
FS. That's all nice, BUT:

I cannot mount my old Linux 0.12 HD partitions. Is this due
to changes in the FS structure or should it work ???
(How do I get then my old files over??? Acting as disk jockey
with a lot of floppies???)

Another thing: fdisk tells me about all my partitons on my 
two disks (I mknod hdb3 .. hdb8, as they were not on the
rootimage). Each disk has 4 partitions. Comparing to what
NORTON DISk EDITOR under DOS ( :-( ) tells me I can see:
  1. Extended DOS partitons are recognized, as well as the
     drives defined within them (e.g. partition hda3, drive hda5),
     both <32MB and > 32MB types.
  2. A 386ix partition (which I use for LInux) is recognized with
     right size, but as hda8 ! Linus claimed (in the RELNOTES),
     that numbers 5 and higher are in extended DOS partitions -
     So it should be hda4 (as I can see from the ordering in DISK EDITOR)!

Can anybody tell me, how to configure mtools, to work with disk drives
in extended DOS partitions?

Please any comments/flames/advices/... to my mail address given below.

Thanks

Andreas

**************************************************************
* Andreas Priebe                   * Phone: +37 33 762 320   *
* Astrophysical Institute Potsdam  * Fax  : +37 33 762 309   *
* Germany                          * Telex: 361231 adwrzb d  *
**************************************************************
* EMAIL:    apr%dec001.ziap.wtza-berlin.de@noc.belwue.de     *
**************************************************************

------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: BSD 386 "press release"
Date: 11 Mar 92 08:54:38 GMT


Ok, alt.os.linux isn't necessarily the place - but I did 
get an overwhelming response to my post.  I hope too many 
people don't jump ship  because of this.

1.  Linux is easier to hack.
        As a college student, I have access to the full BSD source,
        toxic and non-toxic parts.  From what I took the time to look at,
        it was fairly cluttered.  BSD has gotten quite kludged up. Be warned.
        Supposedly, they will fix this in 4.4... but that's another story.

2.  Linux is easier on resources.  The kernel itself is smaller,
        the shared libraries (They did make .95?  There were 
        stubs and pieces back in .12) will keep things even
        smaller after things have been recompiled, 
        etc.  

3.  Right now, Linux works.  For most people.  
 
I can't really say much else.. but this is the anouncement 
several friends sent me, one with the comment we may be able 
to borrow code for Linux.

               ANNOUNCING PUBLIC RELEASE of 386BSD, 
              (the FREE 386 Berkeley UNIX work-alike)!

    (Notes from various sources, edited by David Harris, 3-7-92)

   William F. Jolitz, the author of the 386 port of BSD UNIX (now free of 
AT&T code) has begun releasing "386BSD" to the public.  This is the result of
the work described in the DR. DOBB'S JOURNAL series on 386 BSD.

   This version of 386 BSD is release 0.0, and is recommended for
skilled experimenters only.  You want "kernel experience" for your
resume?  This is your chance.  While the source and binaries are 
copyrighted by Bill Jolitz, he authorizes redistribution without required 
charge (donations needed, but voluntary) for this and future releases.  

   This version is said to run on 386/486 SX/DX ISA (AT bus), with
traditional hard and floppy controller (IDE, ESDI, MFM types), and common
displays (MDA/CGA/VGA/Hercules).  Ethernet controllers supported include
Western Digital 8003EB, 8003EBT, 8003S, WD8003SBT, 8013EBT and Novell
NE2000.  Clones also appear to work quite well.  Tape drive support is
available for QIC-02 controllers as well, allowing use of 3M cartridges of
QIC-60 through QIC-150 format.  

   As configured on the binary distribution, the system REQUIRES a floating 
point coprocessor (387 or compatible), 2 MB of memory (will run on 1 MB
using paging).   4 MB of memory and a 200 MB hard disk is comfortable.

   This early version is not reliable, and has trouble booting on some
systems.  In testing the software on various 386 machines, John Sokol 
found "about a 40% compatibility rate".   There are known serious bugs,
and missing utilities.  But this is the Berkeley UNIX that vast numbers of
students learned and used --- now available FREE.  One would expect this
software to be widely used for education and as an introduction to UNIX. 

   Copies of the software are available from John Sokol at 415-364-8387 
or  e-mail to John at sokol@reyes.stanford.edu   .  

 *********************************************************************** 
 * BUT for convenience John made this DISTRIBUTION PLAN:
 * 
 *    At the SVNet meeting of March 11, 7:30 at the Apple Auditorium at 10500
 * Mariani (corner of De Anza), Cupertino, a few copies of 386BSD will be 
 * distributed.  If you want to be SURE to get a copy, bring a machine capable 
 * of doing a DOS copy to your high density  disks.  If needed, we will 
 * organize "trees" of people to copy for each other, if people can't make 
 * copies at the meeting due to limited time and few machines.
 *  
 * People who want a copy of the 386BSD system should bring either:
 *    (A) for 3-1/4 1.44 Meg disks bring
 *        Source = 8 Disks
 *        Binaries = 6 Disks + 1 Boot disk = 7 Disks total
 *          For everything = 7 + 8 =   15 Disks Total !!!!
 * or (B) for 5-1/2 1.2 Meg disks bring
 *        Sources = 10 Disks
 *        Binaries = 8 Disks + 1 Boot Disk = 9 Disks Total
 *          For Everything = 10 + 9 = 19 Disks Total !!!!!
 * 
 * NOTE:  The disks must be error free DOS formatted ahead of time!  We 
 * don't want to wait while a computer formats floppies at the meeting.
 *********************************************************************** 

 There's about 23 Meg worth of stuff on all those floppys and there are
 2 Sets of files, one for each medium.
 
 The total release on tape was 44.7 Megs and Includes are just the Differences 
 from the Networking 2 release on the BSD386 Unix on the archive servers as 
 well as both sets of disk images....

 If you want a copy via Internet contact John via e-mail at 
     sokol@reyes.stanford.edu 

------------------------------

From: jon@robots.ox.ac.uk (Jon Tombs)
Subject: 0.95 Floppy driver hangs machine
Date: 10 Mar 92 14:42:21 GMT

Before I try and find why, can anyone else confirm or deny that the following
hangs a machines filesystem.

enter
$ mdir a:

when there is no floppy in a: on my machine all commands (including sync :-( )
hang until a floppy is inserted. 
Any ideas?

---Jon.
            <jon@uk.ac.oxford.robots>
Space to    <...!mcsun!ukc!robots.oxford.ac.uk!jon>
rent.       <jon%robots.oxford.ac.uk@nsfnet-relay.ac.uk>

------------------------------

From: entropy@ee.WPI.EDU (Lawrence C. Foard)
Subject: pseudo directories
Reply-To: entropy@ee.WPI.EDU (Lawrence C. Foard)
Date: Wed, 11 Mar 1992 09:36:57 GMT


I just started looking at the new VFS stuff and it still seems
to be missing a few things needed for pseudo devices (which I need
for IPC and TCP/IP). It looks like its fairly simple to add these
(some changes to mount and umount), the file functions are also
missing a few things (ioctl and select helper functions). 
Once this is added you can mount the pseudo device like a block device
and all access to those directories will be redirected to it:
mount /dev/tcp /inet
If any one else is interested in using these patchs tell me what
features you need so I can add them while I'm at it.

------------------------------

From: drew@quandry.cs.colorado.edu (Drew Eckhardt)
Subject: SCSI drivers
Date: Wed, 11 Mar 1992 10:32:10 GMT

Right now, they work for most people with Seagate ST01/02's, and 
most harddisks.  Most notably, some 296N Seagate drives have a 
brain damaged firmware which does not support READ CAPACITY.
If you have problems with this, you're not alone, and it's being
fixed.

The current revision of the sd driver expects a modern disk
which conforms to this piece of the spec (Technically READ CAPACTIY is optional,
but should be implemented "So that self configuring software can be used").  
Newer versions of the 296N work fine.  However, the disk size isn't really 
needed, as we have partition sizes to deal with for block checking on 
any partition (but not the raw device), and can interepret illegal
requests not caused by 10 byte read / writes as "read past end of disk"
if we are reading the raw device.

The next "official" release of the driver package is being patched 
to deal with this sort of dain bramage - so only 6 byte read / writes, 
INQUIRY, and REQUEST SENSE, must be implemented - so those unfortunate
souls with barely standard Seagate disks can be happy too.

I will also put in support for 1024 % scsi_blocksize = 0, 
scsi_blocksize <= 1024 bytes, and multiple LUN support should find
its way in there (currently, only LUN 0 is being looked at).

Autodetection code : thanks to many people's responses, .3 correctly
autodetects seagate host adapters at any address. 

Debugging : I think I may have finally reached a healthy medium
between "Debug verbose mode", and normal - now, extended sense
codes are returned in addition to status, message, host, and midlevel
status bytes from any non-recoverable error, so it is of 
-REAL- debugging help, without being overly intrusive.
  
Lowlevel support : 
        The Seagate support works, and as of the last revision,
        no bugs have been traced to the lowlevel driver.  I am going to
        have a talk with seagate Tech. about getting interrupts enabled
        on the card to improve things (no other tasks are scheduled
        until Linux returns from the device driver strategy routine) 
        and if arbitration can be made to work so I can use multiple
        outstanding commands on this card..... 

        Right now, johnsonm is working on a DTC driver as 
        time permits, tthorn has done something towards an 
        adaptech driver and has raised some valid points 
        about performance that are being addressed.

        Other users have expressed some interest in both Ultrastore 
        and Future Domain controllers - I haven't heard anything
        that sounded definative from the Ultrastore people, 
        and the Future Domain person will be working off of 
        floppy -

        If anybody else has anything.... or SCSI tapes to 
        play with...

Extracts from linux-activists interchange with tthorn regarding performance :

Mostly, this goes back a ways, to when tthorn told me about
how the adaptech supported multiple outstanding commands.   His opinion
was that the generic drivers should exploit this, in order to 
take full advantage of the adaptech (and other intelligent host's 
potential.   At the time, I didn't have anything working, and wanted 
something simple to play with.  Well, now its later, and time to deal with 
all the neat little things SCSI can do....

       However, my current project, SCSI drivers, is basically done, 

    Hmm, not from my point of view. If I adapted my driver to your "high-
    level" stuff, performens would degrade even further. There are several
    implicit assumptions about the lower level, which doesn't apply
    for the adaptech, and possible other intelligent SCSI adapters.

What's posted basically lags one generation behind what's on my system.

As far as performance, the biggest hit we take is from furthur up the line,
where the linux code only reads / writes a single block at a time.  The 
ll_blkrw.c (the name is scrabmled) routines read / write directly into the 
buffercach buffers.  Buffers buffer a single block, or 1K at a time.  So,
we're told to read / write only one block at a time.  This means we have
the overhead of setting up for every single block read - which will 
ionvolve that of our code (trivial) plus the overhead of arbitration, 
and additional command / information tranfer phases (not trivial). 

Also, a new request will not be made to the device driver until the 
current request is finished. The two ways around this are patching 
the code to make multiple requests if the driver supports it,
or using multiple major numbers for one driver.

The former is the prefered method.

As far as multiple outstanding commands : this will improve performance in
arbitrated, multi-disk systems.  You can start another command on a different
device when one disk is seeking, etc.  Generally, a good thing.  This 
can be supported on all arbitrated scsi busses (not just inteligent
controllers like the adaptec, although that does make life simpler for 
the programmer).  Basically, someone (either you or the host adapter)
says "Yes, I support messages other than command complete", and 
handle disconnect, reconnect, save / restore pointers , as well as 
reselection phase correctly. Having an adaptec or other controller 
that does all these things for you is indeed handy.

Anyways, you'll notice that the Scsi_Cmnd structure looks suspiciously
like a doubly linked list node. So it can be added to a queue of commands
awaiting execution. Current pointer and length fields are being added,
but basically the Scsi_Cmnd is what will become the parameter to 
queuecommand.  Each hostadapter will have a head to its list of outstanding
commands, probably in its Scsi_Host structure.  done() will take 
a pointer to the request for which it is being called, 
and many of the midlevel routines will change to accomodate this.

- In a "normal" system you're looking at 7 SCSI devices, 
        probably with 1 LUN per device.  A linear search 
        is not going to be expensive during a save or restore
        pointers operation, and where the host is doing it for 
        you (ie adaptech) , that becomes a non-issue.  

- The "working draft" of the next release is one DLL per host adapter of these 
        structures per host, plus a free list.

The SCSI standard supports  execution of one command per LUN at a time - 
irregardless of how these outstanding commands are being dealt with, when
you get to the raw devices. A busy flag per LUN will be used, 
and the maning of host_busy[] will be different to accomodate this,
allowing scsi_do_cmd() to have one command out per LUN.  

Even if the host adapter will allow for queueing of multiple commands
per LUN, on the BUS and the raw devices, the limit is one per lun when
you get down to it.  Unless you have evidence that the adaptech or 
other hosts will inteligently combine commands, or have some other 
valid reason against the one command per LUN limit, this is how 
it will be.

    Also, all those busy loops to implement semaphores, isn't there a
    better way?

Unfortunately, no.  We're dealing with interrupt driven routines, 
flags being volatile, and much of the scsi.c code rentrant and 
non-atomic.  The semaphores and that whole mess are coded the way they 
are so we don't accidentally renter anything that is non rentrant,
and to prevent race conditions.  I could just say, "Hey, it's busy.
try back later" in scsi_do_cmd(), but then something furthur down 
the line would be doing the loop, but with additional overhead 
imposed by the function call.

---
Any comments, anyone?   Is there a nice, clean way to buffer multiple block
chunks and pass these to the device drivers?  Any suggestions on how 
the device drivers should have multiple "current" requests for a given
major number?  



------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
