From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Fri, 20 Mar 92 02:45:11 EST
Subject:  Linux-Activists Digest #129

Linux-Activists Digest #129, Volume #1           Fri, 20 Mar 92 02:45:11 EST

Contents:
  'combeg.dos' Draft 3 ((DOS) Beginner's Guide (update) (Chuck Boyer)
  Linux 0.95a HD Problem, ksh, cpio. (Erich Strasburger, Niag.U.)
  2nd hard drive with 0.95a (Richard Maine)

----------------------------------------------------------------------------

From: boyer@sumax.seattleu.edu (Chuck Boyer)
Subject: 'combeg.dos' Draft 3 ((DOS) Beginner's Guide (update)
Date: 20 Mar 92 05:47:08 GMT

In this guide I will be giving descriptions of the files that
are executables for the most part. There are many files here,
perhaps over 30 listed here, and you can download more, 
perhaps over 110. Many of these executable files are for
intermediate or advanced usage, many are for particular
situations only. I will only be showing definitions of how
to use the few necessary files that you will need to do the
basic tasks in Linux/unix, ie; moving a file, deleting a file
or directory, listing a file's contents to screen, making
a file or directory.... etc. These definitions, examples of
usage will allow you to move around, do things. If you read
the newsgroup, and other newsgroups, you will see many 
examples of how to use the other utilities that you have 
access to in Linux. 
 
These are executables, called 'binaries' in the unix environment.
(In DOS they are files with the filename extensions of '.exe, or
'.com', or '.bat'. Dos only 'runs' these files with these 
extensions. In Linux/unix there does not need to be an extension
to the 'filename' of an executable file, just that in running the
file by calling its name in a 'command line' the shell will either
'run' it if it finds in the header of the file executable 
instructions, or it 'won't' run it if it does not find them. Also,
as you will learn in reading about 'chmod' commands, even if it is 
an executable type of file, it 'can't' run if the mode of the file 
attribute is set to non-execute... say 'read' or 'write' only, but 
not set to 'execute' permission 'on.' This is only 'theory' if you
are 'Root' ((system administrator, which you are in booting up 
Linux)), because 'root' has permission to everything. It only 
applies if you are logged on as a 'second' user other than root.)
 
(Filenames with a * are in /bin directory on the 0.95a rootimage,
with a ** are in /usr/bin directory on the 0.95a rootimage. So,
these are immediately executable from the initial booting from the
rootimage and bootimage files at bootup. The rest of these binary/
executable files are available by downloading the '        '
file.)
 
  basename
        strips path off of filename
  bigram
  bison
        part of GNU
        parser generator (yacc replacement). A 'beginner' user 
        won't usually have dealings with this.
 
* cat
        two definitions/uses; 1) lists files to screen that already
        exist, and 2) creates a file. In our examples we will use
        the example of 'text.doc' to designate our filename, when 
        talking about what to do with a command line instruction. 
        In the case of 'cat', for the 1st usage example, as a way
        of writing a text file's contents to screen ('stdout' is
        the proper name of 'writing to screen', by the way) then
        we would type; 
                cat text.doc(ENTER)
        
        and we would get a displaying of the contents of 'text.doc'
        to the screen (stdout). If it is a short text file, say,
        shorter than 25 lines of text, then it just gets written
        to the screen and you are returned to your prompt. But if
        the text file is larger than 25 lines then it will just
        continue on scrolling on the screen until it gets to the
        end of the document, then return you to your prompt. The
        way to scroll it to the screen and stop it it to use the
        key sequence; 'ctrl-s' (hold down the 'ctrl' key and tap
        the 's' key. This stops it. 'ctrl-q' begins the text
        scrolling again. Do this over and over again until it 
        reaches the end. This method is okay, but someone wrote
        a utility for automatically stopping the screen text
        scrolling one page full at a time, and this executable
        program file is named 'more.' 'more' is included in the
        Linux distribution. So, use 'more text.doc' as a better
        method of reading a file. (Someone came up with another
        text browser program called 'less' and this works fine
        also.)
 
        The other usage of 'cat' is as a quick text file editor,
        creator.
 
                'cat > text.doc'
 
        would put you at the first blank line of the file you
        were about to create called 'text.doc'. Anything you
        typed after that would become the text of 'text.doc' 
        file. Use 'ctrl-d' to return to your prompt, and you
        have created a documentation file of text called
        'text.doc'.
 
        Actually, a third usage of the file 'cat' utility would
        be to 'concatenate' (this is where 'cat' comes from)
        two (or more) files together. 'Concatenate' means to
        attach two things to each other. It's kind of like hooking
        up a train car up to another one, both cars become the
        train.
 
                'cat text1.doc text2.doc > text3.doc'
 
        would copy the contents of 'text1.doc' followed by
        the contents of 'text2.doc' into a new file called
        'text3.doc'.
 
        You must actually play around with these examples, 
        typing in your own example text, to really learn
        how to use these utilities. Otherwise it's just
        theory.
 
  chgrp
        change group file read/write ownership flags
**chmod 
        change file/directory read/write/execute flags
**chown
        CHange OWNer
  cmp
        compare two files
  code
  comm
        compare two sorted files line-by-line
* compress 
        reduce the actual size of a file.
        
        'compress text.doc'
 
        Try this, create a 'text.doc', and then compress it.
        If the file was small in the first place it probably
        will be larger after compress. I think that the compress
        program places a translation table in the file first,
        so that adds bytes to the file. If you used this example
        on a larger file, you would see the compress utility
        would actually produce a smaller file. This is what
        people use to reduce the size of a file before they
        send it through mail or news out to the alt.os.linux
        newsgroup, so that it doesn't take up so much space
        and time transfering it. Then when someone gets the
        file they must uncompress it to be able to use it.
 
        When you type;
        'compress text.doc'
 
        compress adds a '.Z' title to it. This designates it
        as a compressed file. So, in our example you would
        end up with;
        'text.doc.Z'
 
        you would then uncompress it;
 
        'uncompress text.doc.Z'
 
        and it would strip off the '.Z' filename designator and
        you would have 'text.doc' again.
 
 
* cp
        copy a file to; (user defined/supplied new filename,
        directory)
 
        'cp text.doc text1.doc'
 
        would duplicate the file 'text.doc' into a new file
        'text1.doc'. It can copy a file in the current directory
         to another directory as a different name;
 
        'cp text.doc /usr/docs/text.doc'
        -or-
        'cp text.doc /usr/docs'
 
 
csplit
        split a file into sections determined by context lines
 
  cut
        cut a large file up into smaller pieces
  date
        give the system date
  dd
        useful for copying portions of files / raw devices
 
  dhrystone
        benchmarking software
 
  dir
        same as 'ls' command, give listing of files,
        only available on 0.11/0.12 Linux as they are
        alias'es set up in 'bash' shell initialization file.
 
  doshell
 
  du
        Disk Usage 
 
  egrep
        print lines matching a regular expression (extended grep)
 
  em 
        GNU micro-emacs type of editor
        (this isn't GNU.  Just MicroEMACS.)
 
  expand
        expand tabs to spaces 
* fdisk
        in Linux, report hard drive disk partition sizes, in DOS
        and Unix and Minix; and change the partition size, type.
 
        Using fdisk alone;
 
        fdisk(ENTER)
 
        Reports the available hard drive partitons and sizes.
        You would use this information it reports to mount
        that partition to a directory-mounting-point.
 
  file
        report what kind of file it is; executable, binary,
        text...etc.
  fiz
        fix zoo archives
  flex
        GNU lex, lexical anylyzer
fold
        wrap each input line to fit in a specified width
        wrap long lines
* fsck
        file system check, check the partition status
  getty
 
  grep
        search through a file for a specified pattern
 
        'grep word text.doc'
 
        Would search for the word 'word' in the document
        'text.doc'. If it finds it, it will print the line
        that the searched for word (word) onto the screen
        (stdout).
 
  group
        group membership, etc
 
  head
        list the top 5 or 10 lines of a file.
 
        'head text.doc'
 
  join
        join lines of two files on a common field
 
  less
        list contents of text file to screen (backward/forward
        scroll).
 
  lesskey
 
* ln
        link a file in one directory to be in the current
        directory, without actually having to copy it, or link to 
        another name (i.e. compress -> uncompress)
 
        'ln /usr/bin/compress uncompress'
 
        Would create in the current directory that you issued
        this command from a file named 'uncompress' which is
        actually just a file pointer to the file 'compress'
        which is in the /usr/bin directory. If you run the
        compiler to compile a program source file for example
        and in its' instructions it looks for 'cc' file and
        you have 'gcc' then you would just 'ln /usr/bin/gcc cc'
        and the file 'cc' would be created, but actually it's
        just 'gcc' with a new name.
 
* login
 
* ls
        list contents of current directory, or any specified
        directory.
 
        ls(ENTER)
 
        Gives you a directory listing which is vertical with
        tabs between filenames.
 
        'ls -l' gives a horizontal listing.
        
        'ls -lFR' gives a horizontal listing, recursive (which
                means it continues listing down from the
                directory that you are presently in).
 
        'ls > text.doc' 
 
        Would give a listing of the filenames in the current
        directory, but you wouldn't see it on the screen. What
        it does is put the results of this command into a
        file 'text.doc'. Then you could read the 'text.doc'
        with 'cat text.doc', or 'more text.doc' and you'd see
        the contents of the file 'text.doc'. This is useful
        for being at the 'root' (beginning) directory and
        doing;
 
        'ls -lFR > text.doc'
 
        and you would have screens full of a listing in text
        form of all of the directories and files in your system.
 
  make
        compile a source file system specified within the
        Makefile of the source.
  man
        list the contents of found/specified manual pages on
        specified subject.
 
  mattrib
 
  mcd
        mtools, from Linux you can change directory in a DOS 
        directory.
 
        These utilities (mcd, mcopy, mread, etc.) are in the
        'mtools' file for your downloading. They are to
        be uncompressed in a directory which will have room
        for all of them to be held in their uncompress form.
        So, if you are going to set aside a hard disk space
        for Linux you would get and use these tools to
        read a file that is in your DOS partition while you
        are in Linux. (read a file, write a file from DOS
        to Linux, from Linux to DOS, list a directories
        contents, etc.)
 
                
  mcopy
        mtools, from Linux copy a DOS file to Linux
        directory/file.
  mdel
        mtools, from Linux delete a file in a DOS filesystem.
 
 
  mdir
        mtools, from Linux list the contents of a DOS
        filesystem.
 
        'mdir c:'
 
        would list to the screen all of the files in the directory
        c: in the DOS system on drive c: of the hard drive while
        you are in Linux, issuing this command from Linux.
 
  mformat
        mtools, from Linux format a disk for DOS.
* mkdir
        make a directory
 
        'mkdir one'
 
        Would create a fresh, blank directory named 'one'.
 
  mkfifo
 
* mkfs
        make a file system. Format a partition or disk for
        Linux. (This doesn't really format a partition, it 
        just prepares it for use by Linux.)
 
* mknod
        make node, make a special file (e.g. hard drive
        partition, printer port, etc.)
 
* mkswap
        make a swap space on a partition on the hard drive.
 
  mlabel
 
  mmd
 
** more
        list the contents of a text file to screen.
 
        'more text.doc'
 
        Would list the contents of the file 'text.doc' to
        the screen. (listing to screen in Linux/unix
        terminology is referred to as 'listing to stdout').
        (standard output is screen).
 
  mrd
        mtools, from Linux remove a DOS directory.
  mread
        mtools, from Linux read a DOS file to screen.
  mren
        mtools, from Linux rename a DOS filesystem directory.
  mtab
        moutned file system
 
  mtype
        mtools, from Linux write to screen a DOS file.
* mount
 
 
* mv
        move a file from where it is to another location/name.
 
        'mv text.doc text1.doc'
 
        Would move the filename 'text.doc' file to a new name
        'text1.doc'.
 
  mwrite
        mtools, from Linux write a file to DOS.
  od
        Octal Dump - can also do hex, character of files
        (Dump a file to stdout in octal form.)
 
  passwd
        password file
 
  paste
 
  patch
        apply source code text file changes/updates to existing
        file.
 
* pfdisk
 
  pr
        print file to printer.
 
  printenv
        from within BASH command shell, print the
        automatically searched directories, prompt style, aliases, etc.
* rm
        remove a file.
 
        'rm text.doc'
 
        Would erase the file 'text.doc'.
 
* rmdir
        remove a directory.
 
        'rmdir one'
 
        Would remove the directory 'one' if it is empty of all
        files, the shell will complain with an error message
        if the directory is not empty, in which case you would
        have to move into the directory ('cd one') and erase
        all files 'rm *' ('*' is a wildcard meaning 'everything')
        and then backup one directory node, 'cd ..', and then
        remove the now empty directory; 'rmdir one'.
 
* rootdev
 
  sed
        stream editor
 
**setterm
 
* sh
        'ash' (renamed to sh) shell (command interpreter) in Linux 
        0.95/0.95a,
        'bash' (renamed to sh) in Linux 0.10/0.11/0.12
 
  ship
 
  sort
        sort
 
  split
        splits a file into pieces
 
  stty
        change and print terminal line settings
        checksums a file
 
* swapon
 
* sync
 
  tac
        cat spelled backwards.  Concatenate files in reverse.
  tail
        write to screen the last 5 or 10 lines of a text file.
 
* tar.Z 
        compress/shrink a file/directories (in compressed form,
        you must use 'uncompress tar.Z' to unshrink it so
        that it can be executable.
 
* umount
 
* uncompress
        expand a shrunken file to its original size.
 
  unexpand
        change spaces to tabs
 
  uniq
        UNIQue lines in a file
 
  unzip
        expand a shrunken file to its original size (using
        zip/unzip).
 
updatedb
        update the locate database
 
  wc
        word count in a text file.
  zip
        compress/shrink a file.
 
  zipnote
 
  zipsplit
 
  zoo
        compress/shrink a file.
 
 
==================
3/19/92 boyer@sumax.seattleu.edu
 
2nd draft of 'combeg.dos' (commands, beginners, DOS).
(DOS) Beginner's Guide to Linux.

------------------------------

From: visnucc@ubvmsd.cc.buffalo.edu (Erich Strasburger, Niag.U.)
Subject: Linux 0.95a HD Problem, ksh, cpio.
Date: 20 Mar 92 06:48:00 GMT


Greetings,

 I've been using Linux since v0.11 on a 386sx with a 40 meg. IDE drive
partitioned for DR DOS, Coherent, and Linux.  I've since killed the Coherent
partition in favor of Linux, and have a root and /usr filesystem each approx.
20 meg.  I upgraded to version 0.95a last night, and am having no problems...
except when the system first boots.  After the prompt for screen size 
I am confronted with the following messages:

Unexpected HD interrupt
HD-Controller reset failed: 00
Unexpected HD interrupt
Bad Partition table on dev 0340
Partition Tables ok.

This is the first time I have had problems with error messages upon
booting.  These messages appear *very* quickly, and the system boots like
normal, but it is still disturbing to see something like this.  Previously
0.95 worked without a hitch.  The weekend before I had recompiled the
kernel with GCC 2.0 using the patch for the ps command, and had no
problems at all.  Anything significant change with the hard disk code
since 0.95?  I'm using the *good* boot image from tsx-11, and have not
tryed to recompile my own yet.  Any ideas would be appreciated.

Also on a totally different topic.  I noticed in a previous posting that
someone had ported the Plan 9 'rc' shell to Linux.  This is great!  I
don't care much for ash, but then again it is a good basic shell.  What
I was wondering was if anyone has looked into porting the PD ksh?  I've
looked through the source before (tryed to build on a Sys. V r3 machine),
and it does mention about compiling with POSIX systems.  If the PD ksh
can be ported it might make a nice shell for the distribution disk.

I haven't noticed anyone mention anything about 'cpio', but I've got this
working on my system (GNU cpio v1.15) if anyone is interested.  I've used
it the backup the kernel source directory to floppy, and copy back down
as needed.  It seems to work flawlessly with the options I use.  The only
thing that it doesn't seem to do is multple disks, it asks for the next
volume when the first is full, but then dies when you hit enter after 
giving it the next volume.  Oh, well.  Back to 'tar' for *full* backups.

-Rich

==========================================================================
Richard P. Kernin                  Internet: visnucc@ubvmsc.cc.buffalo.edu
Niagara University                   BITNET: visnucc@ubvmsc.BITNET
==========================================================================

------------------------------

From: maine@altair.dfrf.nasa.gov (Richard Maine)
Subject: 2nd hard drive with 0.95a
Date: 20 Mar 92 07:06:33 GMT


Has anybody else tested linux 0.95a with 2 hard drives.  I've got
2 ESDI drives, the first with all my DOS stuff and the second
for linux.  Version 0.12 worked without a hitch.  I never got around
to trying 0.95, but I just got 0.95a (the "good" copy) and it can't
read my second drive, which unfortunately is the one I use for it.

It complains during boot from floppy that it can't read the partition
table for device 0340.  (It right after says that the partition tables
are ok; I guess it was happy to be able to read the one from the first
drive).  fdisk shows the 2 partitions (/dev/hda3 and /dev/hda4) on the
first drive, followed by entries for /dev/hda5 /dev/hda6 /dev/hda9
and /dev/hda10, which I don't understand; the later 2 devices don't even
exist in /dev.  It then complains about not being able to read /dev/hda10.

By the way, I also notice that the minor device numbers for the 2nd hd
in the FAQ differ by 1 from the numbers in the nodes in /dev.  The
FAQ says that minor number 65 is the whole second disk, whereas I see
that /dev/hdb on the root disk has number 64, which makes more sense.
I assume the FAQ is wrong.  Could somebody perhaps have made a simillar
off-by-one error in the code?  Is there something else that has changed
to make 2nd hard drives not work?  Or is it just my system?  This did
all work fine under 0.12 (and I checked to make sure this excercise
hadn't messed up my disk; I can still boot 0.12 and use the 2nd hard
drive with no problem).

--
--
Richard Maine
maine@altair.dfrf.nasa.gov

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
