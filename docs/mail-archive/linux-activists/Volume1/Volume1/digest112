From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Mon, 16 Mar 92 07:30:09 EST
Subject:  Linux-Activists Digest #112

Linux-Activists Digest #112, Volume #1           Mon, 16 Mar 92 07:30:09 EST

Contents:
  Re: 'pklite' for Linux. (Hongjiu Lu -- Graduate Student)
  More root floppy stuff.  (init/getty/login, and ash) (Jim Winstead Jr.)
  SCSI drivers for .95 available, configuration (Drew Eckhardt)
  BUG : execing of #! executables (Drew Eckhardt)
  Re: 'pklite' for Linux. (Paul H. Rubin)
  new ka9q on tsx-11 (Charles Hedrick)
  Problems with 0.95, swapping, newgcc (Andreas Priebe)
  Re: dvips (for TeX) (Michael Hermann)
  Re: Linux 0.95 (A. V. Le Blanc)
  Re: Keyboard.S compilation death--help! (A. V. Le Blanc)
  VT??? in 0.95 (I Reid)

----------------------------------------------------------------------------

From: hlu@decserv1.eecs.wsu.edu (Hongjiu Lu -- Graduate Student)
Subject: Re: 'pklite' for Linux.
Date: 16 Mar 92 01:09:13 GMT

In article <1992Mar16.003027.2064@athena.mit.edu>, jyelon@cs.uiuc.edu (Josh Yelon) writes:
|> I considering writing binary file compressor for Linux, much like
|> pklite for msdos. The salient characteristic will be that you
|> can compress a program, and you won't have to decompress it
|> in order to run it. (It would decompress itself automatically
|> into RAM). I need ideas.
|> 
|> First of all, how do I pull it off?
|> 
|> Here is plan 1:
|> 
|>     1. start the to-be-compressed executable using ptrace.
|>     2. read out all of its memory into a file.
|>     3. compress the file.
|>     4. prepend a tiny in-memory decompression routine to the file,
|>     5. prepend the proper headers for an executable program, and presto!
|> 
|> The disadvantages:
|> 
|>     1. I like shared pages. However, a text segment that gets
|>        decompressed at runtime isn't 'read-only', so that does
|>        it in for shared pages.
|> 
|>     2. Shared libraries would probably get linked in as soon as
|>        ptrace ran the thing, so the libraries would become a part
|>        of the compressed file. Yuck!
|> 
|>     3. Thousands of copies of this decompression routine, one in
|>        every executable, like a virus. Gross. Plus, the kernel
|>        is constantly loading the same decompression routine from
|>        disk. Wasteful.
|> 
|> The advantages:
|> 
|>     1. It's pretty easy, considering that I already have the
|>        code for dumping a running process into an executable file.
|>     2. Nobody has to be aware of it. A compressed program would
|>        run just like any other.
|> 
|> Here's another plan:
|> 
|>     1. Edit the kernel code for exec, to look for a new 'compressed
|>        executable' magic number.
|>     2. Have it then decompress/load the file into ram, and
|>     3. Have it then proceed as if it had just loaded a non-demand-paged
|>        executable.
|> 
|> The advantages.
|> 
|>     1. Its very clean.
|>     2. The decompression routine is in the kernel, so it only
|>        needs to be loaded once.
|>     3. It sounds more reliable than the above approach.
|> 
|> The disadvantages.
|> 
|>     1. The kernel is getting bigger (although not much,
|>        assuming that the decompression routine is small).
|>     2. You have to have the decompressing-kernel to run
|>        compressed programs.
|>     3. Again, compressed files are not demand-paged. (I, personally,
|>        could care less - I tend to think that demand-paging slows
|>        things down as much as it speeds things up).
|> 
|> Whaddaya think?
|> 
|> Also, about compression algorithms:
|> 
|> I have considered using 16-bit Huffman codes, but I'm only getting
|> a 70% compression ratio. Lempel-Ziv is okay (that's what compress
|> uses), but it takes gobs of ram to use it. Besides, I prefer a
|> static scheme- one where the decompression tables are fixed. (after
|> all, everything being compressed will be stylized gnu C 386 code...
|> why use an adaptive algorithm when there is nothing to adapt to?)
|> On that note, I was also considering inventing a specialized
|> algorithm for compressing 386 opcodes (it would still produce correct
|> output on other stuff, it just wouldn't be able to compress much).
|> Anybody know anything concrete about the feasibility of this?
|> 
|> PS: In order to do this I would need sample data - namely, assembly
|> listings containing BOTH opcodes and mnemonics, so I can pore them
|> over and see what kinds of regular patterns the gnu C compiler
|> typically produces. I cannot obtain this, since I do not have
|> access to a 386 right now. Would anybody be able to mail me a 100K
|> listing from the assembler?
|> y
|> Thanks in advance 4 ideas!
|>                                                     - Josh
|> 
|> PS: this might help alleviate some of the root-disk woes!


No. I don't like the idea. Without demand-paging, Linux will be just like
another DOS. I don't want to see any DOS-like program in Linux.


H.J.

------------------------------

From: jwinstea@jarthur.claremont.edu (Jim Winstead Jr.)
Subject: More root floppy stuff.  (init/getty/login, and ash)
Date: 16 Mar 92 02:53:33 GMT

In article <1992Mar16.021652.11051@colorado.edu> drew@cs.colorado.edu (Drew Eckhardt) writes:
>In article <1992Mar16.003027.2064@athena.mit.edu> jyelon@cs.uiuc.edu writes:
>
>>Also, about compression algorithms:
>>
>
>Kludge alert : 
>Why not, atleast for prototyping purposes, do a 
>pipe(2), fork(2), and exec  /<standard location>/uncomrpess? 
>The code isn't in the kernel.

For reference, the standard location (at least on the root floppy) for
compress is /bin.  This could arguably also be /usr/bin, but if you
follow the train of thought that tools necessary to the restoration of
a lost partition should be in /bin (since /usr is frequently a mounted
partition), compress should be in /bin, since backups will most likely
be compressed.

>>PS: this might help alleviate some of the root-disk woes!
>
>PPS : root disk woes : 
>
>1.  Put a scaled down shell on.

That was how I got into this mess.  :)  0.95a will feature ash as it's
main shell.  It's still got a few small problems (sometimes backspace
doesn't work, because something isn't being initialized properly, and
job control is still absent 'cause I haven't had time to try and sort
it out), but it is more than adequate for bare-bones use.

>2.  Loose init, etc.  I'd much rather have compress, tar on my root floppy
>       than init, login, getty, and their ilk. 

Tar, compress, init, login and getty are all on the root floppy.  I
may look at eliminating init/login/getty, but that may not prove
necessary.  There are some advantages to having init/login/getty
around.

I'll try and post a directory/file tree of the root floppy for
everyone's perusal and comments tomorrow.  It does not look like
mtools will make it in time for 0.95a, but I may end up doing another
root floppy release before the next kernel release.  (I don't really
want to do this, but....)
-- 
Jim Winstead Jr. (CSci '95)    | "Catch a fish!"
Harvey Mudd College            |  -Geddy Lee,
jwinstea@jarthur.Claremont.EDU |   San Diego Sports Arena
Disclaimer: Mine, not theirs!  |   January 20, 1992

------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: SCSI drivers for .95 available, configuration
Date: Mon, 16 Mar 1992 02:51:39 GMT

This weekend, I sat down and patched the SCSI drivers into .95.  
They pretty much drop right in - trivial changes are made to 
ll_rw_blk.c (3 lines), fs.h (1 macro + a few comments), 
a line in main.c, and copy the SCSI files in.

There are a few larger changes made - namely to config.h, keyboard.S,
main.c, and kernel/blk_drv/Makefile.  I decided that the current configuration
scheme (Well, lack of real configuration, and #defining KBD whatever
in keyboard.S, which really should be done in config.h) needed changing 
in a drastic sort of way.  

config.h changed - so that there are a number of CONFIG options supported.

KEYBOARD - set this equal to KBD_US, KBD_FINNISH, whatever,

CONFIG_BLK_DEV_xxx

where xxx is a device name

This "enables" the choosen block device, so that it is compiled into
the kernel code.

CONFIG_CHR_DEV_xxx

Enables the character device xxx

Etc.  There is also a CONFIG_DISTRIBUTION option, which 
basically enables all devices, US keyboard, and whatever will be
the "most common" settings.

The SCSI devices are setup to  respect this configuration information - 
so when SCSI makes the distribution kernel, non-SCSI people can
simply leave CONFIG_BLK_DEV_SD and CONFIG_BLK_DEV_ST undefined.
None of the SCSI code will be compiled, or linked into the kernel.

Compiled or linked : You heard it.  I've come up with some heinous 
looking Makefile entries involving cpp, sed,  etc, and have set it 
up so the Makefiles share the same configuration file as 
the C and assembly source.  

Take a look at the source if you're interested,
it's all in  scsi-.95.tar.Z.

------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: BUG : execing of #! executables
Date: 16 Mar 92 03:26:30 GMT

White space following the shell name results in a cannot exec
binary file error.

Also, I haven't yet checked in linux-0.95, but in 0.12 and bellow,
symlinks were not followed in #! executables.

------------------------------

From: phr@soda.berkeley.edu (Paul H. Rubin)
Subject: Re: 'pklite' for Linux.
Date: 16 Mar 92 02:28:50 GMT

In article <1992Mar16.021652.11051@colorado.edu> drew@cs.colorado.edu (Drew Eckhardt) writes:

   Disk is cheap, memory is expensive.  If you can't share pages,
   you're going to loose memory, and start swapping to disk much
   sooner.  I sometimes look at the memory allocation, and see 100+
   shared pages when I'm heavily loaded - that's 400K.

Actually, this is a faulty analysis.  Disk is cheaper than ram, but
the program takes up memory only when it is running; it takes up disk
space whether it is running or not.  If your system spends much of its
time thrashing, you don't have enough ram and you should get some
more.  If you're not thrashing, why worry about a few unshared pages?

For me, a strong motivation for exec file compression is to be able
to put a Linux setup/demo system onto a single floppy.  A smaller
shell would help, too, as people have been discussing.

   >    3. Thousands of copies of this decompression routine, one in
   >       every executable, like a virus. Gross. Plus, the kernel
   >       is constantly loading the same decompression routine from
   >       disk. Wasteful.

   If its in the kernel, there aren't "thousands of copies of this routine"

I agree that it should be in the kernel, but another alternative
is for it to be in a shared library.  Then it is out of the kernel
but there aren't thousands of copies around.

   >    1. Edit the kernel code for exec, to look for a new 'compressed
   >       executable' magic number.
   >    2. Have it then decompress/load the file into ram, and
   >    3. Have it then proceed as if it had just loaded a non-demand-paged
   >       executable.

   Much better.  You still have shared pages, etc.  The only real problem
   you still have is not being able to page from the file, and text gets
   swapped like data.

This doesn't seem bad to me at all, and I see no way around it.
Currently exec won't allow this, but I think there will eventually a
way to run executables like this.  For one thing, I'd like to be able
to mount ms-dog filesystems through VFS, and those are hard to seek
around in, making paging directly from the file difficult.

   >The disadvantages.
   >
   >    1. The kernel is getting bigger (although not much,
   >       assuming that the decompression routine is small).
   >    2. You have to have the decompressing-kernel to run
   >       compressed programs.

The "uncompress" part of the Unix 'compress' utility is VERY small--
maybe 1k of code.  See the famous "shark" archiver for a super-compact,
unreadable implementation.

Actually there IS another alternative, which is perhaps not in the
spirit of Un*x but may be practical: put the decompression code in the
FILE SYSTEM (through vfs).  Then we could add additional decompression
algorithms, etc., by adding vfs drivers.  The FS would recognize
files with a "compressed" bit set; these files would be read-only
and sequential-access-only.

------------------------------

From: hedrick@dartagnan.rutgers.edu (Charles Hedrick)
Subject: new ka9q on tsx-11
Date: 16 Mar 92 05:00:45 GMT

I've uploaded a new copy of ka9q to tsx-11 in /incoming.  I trust the
staff there will put it in the right place.  (If it gets lost, you can
ftp it from athos.rutgers.edu, /pub/linux, ka9qbin.tar.Z and
ka9qsrc.tar.Z) The main changes are:

  - a new configuration command "wait", to allow you to adjust the
        wait time in the main select.  "wait 100" gives 100 millisec,
        and is the default.  "wait 0" disables the select, causing
        the program to continuously check for input, using nonblocking
        reads.  In theory wait 100 should work fine, and cause ka9q
        not to interfere with other things going on, but if you're
        trying to do TCP transfers while other things are going on,
        you may get better results from wait 0.  This is because of
        bugs in select.  0.95a fixes some of the bugs, but I don't
        yet know whether it's going to be a complete fix or not.

  - "ip stat" now shows statistics of various sorts for SLIP,
        including the number of compressed and uncompressed packets
        if you're using compressed SLIP.

I've built ka9q successfully with gcc 2.0, but this version was done
with 1.40.  If you want to compile with 2.0, you'll have to define
_NFILE in daemon.c (presumably as 20), and remove the toupper and
tolower definitions in sys5unix.c, since they conflict with the
builtin ones.

------------------------------

From: apr%dec001.ziap.wtza-berlin.de@noc.belwue.de (Andreas Priebe)
Subject: Problems with 0.95, swapping, newgcc
Reply-To: apr%dec001.ziap.wtza-berlin.de@noc.belwue.de (Andreas Priebe)
Date: Mon, 16 Mar 1992 08:35:27 GMT

Hi everybody!

I have installed 0.95 and have a few major/minor questions:

1.  I made the following:

              diff strings.h string.h | less

(the gnu diff which I used with 0.12 already) and I gave him a lot
of <SPACE> to skip fast over the file. After some skipping forward
thats what I got:

general protection: 0014"di");"c" (0xffffffff), "0" (cs),"g" (ct)
EIP:     0008:0000C1FA
EFLAGS:  00010006
fs: 0010
base: 20170000, limit: 00000018
Pid: 394, process nr: 8
8e e0 ff 05 b0 71 02 00 b0 20
Kernel panic: free_page_tables called with wrong alignment

(hope no misprints - I took it by hand off the screen :-) )

Can anybody explain me what this means?
FYI:
I use 0.95 from the original boot/root-disks on a 386sx with 2MB
(I thought I had 8MB swap, but see question 2!)

2. when using the newgcc (1.40) as in newgcc.tar.Z of tsx-11 I get
a lot of Out of swap memory/ Out of memory. When I turned
swapping to fs on:
    swapon /dev/hdb2
things went better. But I had patched the bootfloppy so I thought
it would recognize swap partition automatically (As it was in 0.12).
Don't asked: I patched the relevant bytes, hope 66 03 is ok. for /dev/hdb2
as swap?!? Anyway the next two bytes (for root partition)
are recognized at bootup!

3. When rebuilding the kernel I get errors mainly at big modules
(sched.c) which usually start with a couple of
   Unexpected HD interupt/HD timeout
the mixed up with a lot parse errors. Maybe this is connected with
question 2. ???

4. At first I could not compile mtools, then I turned swapping explicitly
on (see above). Then it went out very interesting:
I could compile mtools only after several retries - just repating (!!!)
the make. So errors aren't reproducible.


Any suggestions?

Sorry, but 0.12 seemed to be a lot more stable.

Andreas
**************************************************************
* Andreas Priebe                   * Phone: +37 33 762 320   *
* Astrophysical Institute Potsdam  * Fax  : +37 33 762 309   *
* Germany                          * Telex: 361231 adwrzb d  *
**************************************************************
* EMAIL:    apr%dec001.ziap.wtza-berlin.de@noc.belwue.de     *
**************************************************************

------------------------------

From: mch@reseq.regent.e-technik.tu-muenchen.de (Michael Hermann)
Subject: Re: dvips (for TeX)
Date: 16 Mar 92 08:45:43 GMT

GSTD@VTVM2.CC.VT.EDU (t dunbar) writes:

>in trying to compile dvips for linux, i'm stymied by the lack of libm.a
>What should i do?
>  output from gcc follows (hopefully not too mangled by the IBM system
>i'm on)

>gcc version 1.40
> cpp -v -DTPIC -DFONTLIB -DTFMPATH="/usr/lib/tex/fonts/tfm" -DPKPATH="/usr/lib/t
>GNU CPP version 1.40
> cc1 /tmp/cc000086.cpp -quiet -dumpbase repack.c -O -Wall -version -o /tmp/cc000
>GNU C version 1.40 (80386, BSD syntax) compiled by GNU C version 1.40.
>default target switches:
> as -o repack.o /tmp/cc000086.s
>gcc version 1.40
> ld -o dvips -s /usr/lib/crt0.o dospecial.o dviinput.o fontdef.o loadfont.o dvip
>dospecial.o: Undefined symbol ___mulsf3 referenced from text segment
>dospecial.o: Undefined symbol ___divsf3 referenced from text segment
.....

I have had the same problem when compiling dvijep & dvijet (for hp-laserjet).
My gcc-doc does not mention it, but there exists a machine-dependent option
-m80387 which enables/forces gcc to produce FPU-instructions. If you don't have
an '387 (I don't have one myself) this will still work as the kernel takes care
of the resuling exceptions and emulates the basic operations. Slow but working.

Best regards,

Michael Hermann



------------------------------

From: zlsiial@uts.mcc.ac.uk (A. V. Le Blanc)
Subject: Re: Linux 0.95
Date: 15 Mar 92 15:27:40 GMT


In article <LONGSHOT.92Mar12214011@att2.mankato.msus.edu> longshot@att2.mankato.msus.edu (Erik Green) writes:
>
>Also, a Linux fdisk is badly needed
>on the same disk, since lots O' people are having problems with the
>collection of other programs that are currently being used to do the 
>partitioning.

I have been working on a Linux fdisk.  At the moment there are
two real problems: (1) it ought to be able to get the number of
sectors, heads, and cylinders from the kernel, but this requires
a kernel patch; and (2) it ought to be able to set up Linux extended
partitions, but I haven't done anything about this yet.

I'd be glad of anyone suggesting (or supplying) a good kernel
interface, for example an ioctl.  The tool should be available
in a couple of days, perhaps in time for 0.95a?

     -- Owen
     LeBlanc@mcc.ac.uk

------------------------------

From: zlsiial@uts.mcc.ac.uk (A. V. Le Blanc)
Subject: Re: Keyboard.S compilation death--help!
Date: 15 Mar 92 16:47:43 GMT


In article <1992Mar15.024651.15711@rice.edu> adam@owlnet.rice.edu (Adam Justin Thornton) writes:
>I'm trying to recompile my kernel, using gcc2.0 for the c compiler and the
>as, as86, et al. on tsx-11 for the rest.
>
>In make, I get
>
>(cd kernel/chr_drv; make)
>as86 -o keyboard.o keyboard.S
(errors deleted)

as86 should not work on keyboard.S.  Instead you must use gcc -E
(to get keyboard.s) and then as (or gas); as86 should be used only
on the sources in linux/boot.

I presume that as86 will eventually disappear when (g)as+(g)ld can
create an absolute boot sector.

     -- Owen
     LeBlanc@mcc.ac.uk

------------------------------

From: eonu24@castle.ed.ac.uk (I Reid)
Subject: VT??? in 0.95
Date: 16 Mar 92 00:19:31 GMT

Microemacs and function keys were happy together in 0.12 but not in 0.95. What
emulation is Linux running? The release notes say vt200 ish, the source varies
between vt100 and vt102 and the escape sequences \E[[A --> \E[[E or whatever
don't seem to be mappable in microemacs. Any solutions out there 'cos I've
kinda got used to my setup (I've had it for 2 years or so) and would like
normality back.

Iain

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
