From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Thu, 23 Jan 92 19:00:22 EST
Subject:  Linux-Activists Digest #10

Linux-Activists Digest #10, Volume #1            Thu, 23 Jan 92 19:00:22 EST

Contents:
  Re: df and root fs (Robert Duncan)
  SCSI driver source code (Brian E. Gallew)
  Re: linux-dos-linux file access (Humberto Ortiz-Zuazaga)
  V86, echo, *P=NULL etc updates (Linus Benedict Torvalds)
  using Linux and DOS (Jim Beers)
  Re: How to boot a PC from drive B: (Ken Glover)
  Re: No VI, sorry ... (Bill Huttig)
  Re: compiling minix commands source on linux (CJ Watts)
  Re: compiling minix commands source on linux (Lars P. Fischer)
  Some Questions ... (Tim Martin; FSO; Soil Sciences)
  Re: How to boot a PC from drive B: (Humberto Ortiz-Zuazaga)
  Re: V86, echo, *P=NULL etc updates (Lars P. Fischer)
  Re: How to boot a PC from drive B: (Plug)
  patches for sys_rename (Linus Benedict Torvalds)

----------------------------------------------------------------------------

From: duncan@ssdd475a.erim.org (Robert Duncan)
Subject: Re: df and root fs
Date: 22 Jan 92 20:38:11 GMT

In article <1992Jan21.214856.21734@nntp.hut.fi> r36110m@kaira.hut.fi (Mika Matti Jalava) writes:

   It's nice to have the df by P. MacDonald, but it would be even nicer
   if it would give the statistics of the root file system, too. Would it
   be difficult to do?

   As it is now, it gives "super block unreadable" if I try to df the
   root fs. Or is the problem only due to some problem in my own system? 

           Mika

In /etc/rc you probably have a line like:
> /etc/mtab

Change it to:
echo "/dev/hdX (root)" > /etc/mtab
where /dev/hdX is the name of your root partition.  Sync, reboot and df
should then show all mounted partitions including the root.

 
--
p-----------------------------------------------------------------------------q
| Robert H. Duncan                             |                              |
| Environmental Research Institute of Michigan |                              |
| PO Box 134001                                |                              |
| Ann Arbor, MI 48113-4001                     |                              |
| (313)994-1200 ext.2880                       |                              |
| Internet: duncan@erim.org                    |                              |
b-----------------------------------------------------------------------------d

------------------------------

From: bg11+@andrew.cmu.edu (Brian E. Gallew)
Subject: SCSI driver source code
Date: 23 Jan 92 16:32:55 GMT

The SCSI drivers for Mach386 are available by anonymous ftp from
cs.cmu.edu (you will have to look for the directory).  alternatively, I
can mail a lharced version to anyone who wants them in an effort to make
SCSI available to linux.  BTW, the Mach386 drivers allow both disks and
tape drives.


                                  -Brian

You drop the bomb -more-
It goes off... -more-
=========================================================================
|  Have your mail Daemon message my mail Daemon and we'll do lunch!     |
=========================================================================
|  DEC measures their benchmarks with a calendar!!                      |
=========================================================================

------------------------------

Subject: Re: linux-dos-linux file access
From: zuazaga@ucunix.san.uc.edu (Humberto Ortiz-Zuazaga)
Date: Thu, 23 Jan 92 16:21:23 GMT

In article <1992Jan22.135130.26695@athena.mit.edu> mont@netcom.netcom.com (Mont Pierce) writes:
>I've tried compiling mtools, but it wants a device[s] to be defined in
>devices.c.  Can anyone send me a sample of drives defined in this module?
>

I grabbed a copy of Mtools patchlevel 5 off of comp.sources.xxx
recently, and the only change I had to make was to define the
appropriate devices for Linux.  Note that the patches I found on tsx-11
were not quite correct, the B: drive didn't work. The devices I'm using
now are:

#ifdef __linux__
struct device devices[] = {
        {'A', "/dev/dosA"               , 0L, 12, 0, (int (*) ()) 0, 80, 2,  9},
        {'A', "/dev/at0"                , 0L, 12, 0, (int (*) ()) 0, 80, 2, 15},
        {'B', "/dev/dosB"               , 0L, 12, 0, (int (*) ()) 0, 80, 2,  9},
        {'B', "/dev/PS1"                , 0L, 12, 0, (int (*) ()) 0, 80, 2, 18},
        {'C', "/dev/dosC"               , 0L, 16, 0, (int (*) ()) 0,  0, 0,  0},
        {'\0', (char *) NULL, 0L, 0, 0, (int (*) ()) 0, 0, 0, 0}
};
#endif /* __LINUX__ */

But for this to work, the named devices have to be already made in /dev.
Example, in my case /dev/dosA is a low density drive, (9 sectors, 80
tracks), so it must be made with the appropriate major and minor device
numbers for a low density drive.  The devices Linux comes with are
probably not the same you have, so double check them. (Linux has a 1.44
in A:, a 1.2 in B:, and C is the 6th HD partition.)

Good luck!
-- 
Humberto Ortiz-Zuazaga                  INTERNET: zuazaga@ucunix.san.uc.edu
Dept. of Physiology & Biophysics          BITNET:              picone@ucbeh
University of Cincinnati                     CIS:                72301,2303

------------------------------

From: torvalds@klaava.Helsinki.FI (Linus Benedict Torvalds)
Subject: V86, echo, *P=NULL etc updates
Date: 23 Jan 92 11:25:40 GMT

Replying to questions (mostly from the mailing-list - I'm trying to move
over to alt.os.linux):

> V86-mode and DOS sessions under Linux?

Right. Seems everybody wants these, but the problem is that Linux wasn't
designed with V86-mode in mind, and the memory management makes some
assumptions that are simply incompatible with V86 tasks. The problem is
that a V86-task /has to/ be at virtual address 0-1M, and doesn't care
about the current linux protections scheme that uses segments. All right
so far: but the current kernel also lives in that space. Ooops.

This means that either (1) the mm has to be totally rewritten, (2) we
resort to ugly tricks with changing IDT's and page tables by hand, or
(3) I come up with something clever.

(1) has several problems: the current mm may not be a work of art, but
it /does/ have the good point of working, and it's extremely simple.
Changing the mm to something more like "real" unices would complicate
things. I don't feel this is a good option.

(2) The "ugly" tricks needed are so ugly I'm probably going to have
nightmares just because I thought about them. Trust me: you don't want
DOS compatability that bad.

(3) is of course optimal: the problem is that the I want:
 - the first 16 megabytes to be "identity mapped" to the physical
   memory. This is one of the reasons the mm is so simple (and there is
   no need to translate DMA addresses etc)
 - the first megabyte (+64kB) would have to be paged memory for the V86
   mode (with all the current frills: demand loading, VM etc).
And these two things don't mix very well. So I thought V86 would have to
wait.

Things aren't really that bad: I brainstormed a little, and I think I've
got the problem solved by using segments and paging at the same time to
make the first 16M /look/ identity mapped, although they aren't. It's
not even going to be very ugly: just a few hacks, that could be said to
be "interesting". I'm not promising anything, though.

> [ echo command ]

No, there is no echo for linux. Not that big a problem: use

#! /bin/sh
echo $*

or port (or write) something in C if you wish. Using a shell-script
isn't that bad: it probably doesn't use much memory, as most of the
pages get to be shared.

> I get "*P=NULL" printed on the console.

Right.  This is a debugging message: the sleep-function changed
behaviour in 0.12, and I added a few sanity checks.  This message just
means that something is sleeping/waking up without using the proper
routines: I don't know where this happens, but at least it's harmless. 
If you know something that consistently brings up this message, I can
probably track it down.  I have seen it once, and didn't notice what
caused it.

> mvdir/rename system call

As already mentioned, it doesn't exist.  Yet.  I'm coding it right now,
and it will work today on my machine (I think), and by the weekend, I
should be able to send out (minor) kernel patches to get it working for
those that want it.  I hope.

> Shared libs

Seem to work.  The kernel features are there already (even in the
released 0.12), and pmacdona an I have made some simple scripts/programs
to create shared libraries from the current unshared ones.  Small
utility programs usually shrink to half their size, but my guess is that
debugging programs using shared libs will be impossible even when we do
get a debugger.  I think the 0.13 root-image will contain the first
"real" use of shared libraries.

> Linux-0.13

I still don't know when this will be out: it depends on several things. 
Don't try to get TCP/IP, sockets and X all working in time for it - I
think it's going to be released February (mumble mumble 20?)th, and I'm
totally satisfied if it just adds the higher-level routines for VFS and
minor fixes (faster floppy, rename, one totally unnecessary panic-call
etc) and a init/login (I'll use the simple version available already if
the "real" version doesn't get implemented). 

Mail me about anything bigger you have already started on: we'll try to
work something out.

                Linus

PS. I still try to reply to all personal mail the same day I get it, but
I know I've missed some (not many though).  My mail-box grows by about
30-70 messages per day, so I definitely don't have time to go back and
check them out. Re-mail any questions/suggestions if you don't hear from
me.

------------------------------

From: beers@theory.TC.Cornell.EDU (Jim Beers)
Subject: using Linux and DOS
Date: 23 Jan 92 17:11:27 GMT

I am currently using Dos on my 40 Meg drive on my 386sx.  

Now I have use Unix much more the dos, and only got it for a cheap system
at home, and to play games on.

I would like to try Linux and would be willing to buy a second drive, 80
Meg IDE drive, and use it as my second drive and dedicate it to linux.

BUT, I would like to keep the original PC working as is.

Is this possible?  Can I start up with DOS and then switch over to linux?
is 80 Meg enough to do Linux stuff?

Have others done something like this?  

thanks for any help and discussion.

Jim

------------------------------

From: glover@skorpio.Usask.CA (Ken Glover)
Subject: Re: How to boot a PC from drive B:
Date: 23 Jan 92 17:18:39 GMT
Reply-To: glover@skorpio.Usask.CA (Ken Glover)

In article <zhao.696157440@chilko.ucs.ubc.ca>, zhao@unixg.ubc.ca (Jiansheng Zhao) writes:
|> A linux related question: PC is booted from drive A:. can it be done
|> from drive B:, 1.44 MB, which will give me more space on system disk
|> to play with.
|> 
|> zhao@unixg.ubc.ca
|>  
|> PS Thanks to those who sent me advice, I now have vi (elvis) installed
|> on root drive and works well.

The BIOS in the PC will only boot from drive A.  The quickest (only?) way to boot from the other drive is to swap your drives so the 1.44 is drive A instead.

Ken Glover
University of Saskatchewan, Saskatoon Saskatchewan, Canada

------------------------------

From: wah@zeno.fit.edu (Bill Huttig)
Subject: Re: No VI, sorry ...
Date: 23 Jan 92 01:54:13 GMT


 There is a Public domain version (I think) of vi called elvis that
comes with coherent.. Source is avaiable at piggy.ucsd.edu (I think
thats the complete ftp site name).

Bill

(I would run LINUX if I had a 386 system).

------------------------------

From: cj_watts@csd.brispoly.ac.uk (CJ Watts)
Subject: Re: compiling minix commands source on linux
Date: 23 Jan 92 17:49:48 GMT

In article <1992Jan23.000829.14793@nntp.hut.fi> r36110m@kaira.hut.fi (Mika Matti Jalava) writes:
>In article <15302@awdprime.UUCP> rjohnbob@there.austin.ibm.com (John Harvey) writes:
>
>>Commands like tty.c and date.c seem to compile ok.  But is it a no-no to
>>copy the source to a linux archive because it came on the minix diskettes?

Thats what I thought but after A short time you soon find out that the 
commands in minix dont work on linux.  This is not a fault of linux but
minix because I think the minix sources is not totally posix or ansi
compatable.

The example of this is sort which when complied works on the command line
but then fails when files are piped through.

Ps. Does any body now of the source of a GNU od PD sort.

Chris Watts

------------------------------

From: fischer@iesd.auc.dk (Lars P. Fischer)
Subject: Re: compiling minix commands source on linux
Date: 23 Jan 92 19:07:28 GMT

>>>>> "Conway" == Conway Yee (yee@mipgsun.mipg.upenn.edu)

Conway> Which brings to mind a question.  Exactly what parts of the MINIX
Conway> distribution is copyright Prentice Hall and which parts are freely
Conway> redistributable?

You'll have to check the individual files for that. The MINIX
distribution from Prentice Hall is a collection of things that AST
wrote, copyrighted things AST borrowed, and lots of freely distributed
stuff, mostly picked up (by AST) from the net.

The original copyright notices are (hopefully) still in the files.
Look through the files/programs one-by-one. An remember, some of the
stuff that was nifty when it was contributed to MINIX has since been
done better by the FSF.

/Lars
--
Lars Fischer, fischer@iesd.auc.dk | It takes an uncommon mind to think of
CS Dept., Aalborg Univ., DENMARK. | these things.  -- Calvin

------------------------------

From: martin@cs.UAlberta.CA (Tim Martin; FSO; Soil Sciences)
Subject: Some Questions ...
Date: 23 Jan 92 17:59:41 GMT

I got LINUX installed, and I got shoelace working, and I have a swap
partition.  GCC works, kermit works, uemacs works.  Great Stuff!
But now I have lots of "beginner" questions.

Question #1:  What I would like now is to install
init/getty/login (or whatever) to have real logins.  What is the state
of these developments? Is qpl-init.tar.Z the way to go, or does someone 
have a more complete implementation?  And can someone give me some fairly
careful guidance on the installation: I'm a UNIX novice, I'm afraid.

Question #2:  I get the man.tar.Z, and installed it.  But when it runs,
it wants nroff (or one of the ?roffs anyway).  Is nroff available, or
should I edit the man.c file so it just uses "less" without pre-formatting
the man pages?

Question #3:  Patching is a new art, to me.  If I do the fd patch and the lp
patch and the login patch, can I be fairly confident the subsequent patches
will work, and that the resultant binary will actually work?  I guess this
is a general Patch question: is patch fussy about the initial state of 
the code it is patching?

Tim.

 -------------------------------------------------------------
  Tim Martin                 *
  Soil Science               *     These opinions are my own:
  University of Alberta      *        My employer has none!
  martin@cs.ualberta.ca      *
 -------------------------------------------------------------

------------------------------

Subject: Re: How to boot a PC from drive B:
From: zuazaga@ucunix.san.uc.edu (Humberto Ortiz-Zuazaga)
Date: Thu, 23 Jan 92 19:05:45 GMT

In article <1992Jan23.171839.21368@access.usask.ca> glover@skorpio.Usask.CA (Ken Glover) writes:
>In article <zhao.696157440@chilko.ucs.ubc.ca>, zhao@unixg.ubc.ca (Jiansheng Zhao) writes:
>|> A linux related question: PC is booted from drive A:. can it be done
>|> from drive B:, 1.44 MB, which will give me more space on system disk
>|> to play with.
>
>The BIOS in the PC will only boot from drive A.  The quickest (only?)
>way to boot from the other drive is to swap your drives so the 1.44 is
>drive A instead.

Alternatively, boot from a: then mount a separate b: floppy into it's
own directory. This way you can have several b: floppies with their own
sets of programs.
-- 
Humberto Ortiz-Zuazaga                  INTERNET: zuazaga@ucunix.san.uc.edu
Dept. of Physiology & Biophysics          BITNET:              picone@ucbeh
University of Cincinnati                     CIS:                72301,2303

------------------------------

From: fischer@iesd.auc.dk (Lars P. Fischer)
Subject: Re: V86, echo, *P=NULL etc updates
Date: 23 Jan 92 19:18:36 GMT


This is amazing. I am, for the first time ever, considering bying a
PC (yeah, right), just to run/hack Linux. Good work!

>>>>> "Linus" == Linus Benedict Torvalds (torvalds@klaava.Helsinki.FI)

> Shared libs

Linus> Seem to work.  The kernel features are there already (even in the
Linus> released 0.12), and pmacdona an I have made some simple scripts/programs
Linus> to create shared libraries from the current unshared ones.  Small
Linus> utility programs usually shrink to half their size,

Shared libs are a real advantage, and one you start having things like
X11 with HUGE libraries, shared libraries is a must. A set of 25
statically linked X11 utilities can eat your disk faster than you'd
ever imagine....

Linus>  but my guess is that debugging programs using shared libs will
Linus> be impossible even when we do get a debugger.

Yeah, debugging with shared libs can be a pain. I believe it's
important to have the option of doing a static link, just as you can
compile without optimization if need be. This would probably mean that
you need to copies of every lib - a dynamic and a static - but that's
not too bad. If works like that under SunOS (oops, Solaris-1), and
it's mostly pretty nice. The SunOS system of having shared libs with
version numbers is also a good idea -- makes it possible to update a
library withput messing up programs using the old version.


Keep up the good work!

/Lars
--
Lars Fischer, fischer@iesd.auc.dk | It takes an uncommon mind to think of
CS Dept., Aalborg Univ., DENMARK. | these things.  -- Calvin

------------------------------

From: csh065@cch.coventry.ac.uk (Plug)
Subject: Re: How to boot a PC from drive B:
Date: 23 Jan 92 18:40:11 GMT

In article <zhao.696157440@chilko.ucs.ubc.ca> zhao@unixg.ubc.ca (Jiansheng Zhao) writes:
>A linux related question: PC is booted from drive A:. can it be done
>from drive B:, 1.44 MB, which will give me more space on system disk
>to play with.

 The only way I've found to boot a PC from the B: drive is to muck about with
the cables and such actually inside the machine, disconnecting both drives,
and then reconnecting the other way round.  Of course, if the lead between 
I/O controller and Drive bays does not have both types of connector for each
of the 2 drives (I.E. 2 possible connectors for A: and 2 for B:) then you are
scuppered.  Some BIOSes also allow this feature, but none of the standard
AMI, PHOENIX etc.  Of course, protect the inside of your PC from static 
discharges, etc. And protect yourself from electric shocks.

-- 
===============================================================================
Plug - csh065@uk.ac.cov.cch                  Telephone (voice only) 0203 683487
===============================================================================

------------------------------

From: torvalds@klaava.Helsinki.FI (Linus Benedict Torvalds)
Subject: patches for sys_rename
Date: 23 Jan 92 19:43:34 GMT

Ok, here's the sys_rename patch to "linux/kernel/namei.c".  Additionally
you need to remove the sys_rename stub function (just returns -ENOSYS)
from "linux/kerne|/sys.c". This is not heavily tested: I wrote it today,
but it seems to work.

Patch the file, remove the stub and recompile linux: voila, you have a
rename system call that actually works. It's not in the library, so
you'll have to explicitly call it by using __asm__'s. A simple
/usr/bin/mvdir command is here:

#define __LIBRARY__
#include <unistd.h>
#include <stdio.h>

int main(int argc, char ** argv)
{
        int i;

        if (argc != 3)
                return -1;
        __asm__("int $0x80":"=a" (i):"0" (__NR_rename),
                "b" ((long) argv[1]),
                "c" ((long) argv[2]));
        return i;
}

and with this in place mv seems to be able to move directories without
problems. (You can also use mvdir to move non-directories, but who
cares). And, yes, I'm interested in bug-reports if it doesn't work.

                Linus

---- snip snip -----------------------------------------
*** linux/fs/namei.c    Sun Jan 12 06:09:58 1992
--- namei.c     Thu Jan 23 23:05:53 1992
***************
*** 892,894 ****
--- 892,1051 ----
        iput(oldinode);
        return 0;
  }
+ 
+ static int subdir(struct m_inode * new, struct m_inode * old)
+ {
+       unsigned short fs;
+       int ino;
+       int result;
+ 
+       __asm__("mov %%fs,%0":"=r" (fs));
+       __asm__("mov %0,%%fs"::"r" ((unsigned short) 0x10));
+       new->i_count++;
+       result = 0;
+       for (;;) {
+               if (new == old) {
+                       result = 1;
+                       break;
+               }
+               if (new->i_dev != old->i_dev)
+                       break;
+               ino = new->i_num;
+               new = _namei("..",new,0);
+               if (new->i_num == ino)
+                       break;
+       }
+       iput(new);
+       __asm__("mov %0,%%fs"::"r" (fs));
+       return result;
+ }
+ 
+ #define PARENT_INO(buffer) \
+ (((struct dir_entry *) (buffer))[1].inode)
+ 
+ #define PARENT_NAME(buffer) \
+ (((struct dir_entry *) (buffer))[1].name)
+ 
+ /*
+  * rename uses the -ERESTARTNOINTR error return to avoid race conditions:
+  * it tries to allocate all the blocks, then sanity-checks, and if the sanity-
+  * checks fail, it tries to restart itself again. Very practical - no changes
+  * are done until we know everything works ok.. and then all the changes can be
+  * done in one fell swoop when we have claimed all the buffers needed.
+  *
+  * Anybody can rename anything that they have access to (and write access to the
+  * parents) - except the '.' and '..' directories.
+  */
+ static int do_rename(const char * oldname, const char * newname)
+ {
+       struct m_inode * inode;
+       struct m_inode * old_dir, * new_dir;
+       struct buffer_head * old_bh, * new_bh, * dir_bh;
+       struct dir_entry * old_de, * new_de;
+       const char * old_base, * new_base;
+       int old_len, new_len;
+       int retval;
+ 
+       inode = old_dir = new_dir = NULL;
+       old_bh = new_bh = dir_bh = NULL;
+       old_dir = dir_namei(oldname,&old_len,&old_base, NULL);
+       retval = -ENOENT;
+       if (!old_dir)
+               goto end_rename;
+       retval = -EPERM;
+       if (!old_len || get_fs_byte(old_base) == '.' &&
+           (old_len == 1 || get_fs_byte(old_base+1) == '.' &&
+            old_len == 2))
+               goto end_rename;
+       retval = -EACCES;
+       if (!permission(old_dir,MAY_WRITE))
+               goto end_rename;
+       old_bh = find_entry(&old_dir,old_base,old_len,&old_de);
+       retval = -ENOENT;
+       if (!old_bh)
+               goto end_rename;
+       inode = iget(old_dir->i_dev, old_de->inode);
+       if (!inode)
+               goto end_rename;
+       new_dir = dir_namei(newname,&new_len,&new_base, NULL);
+       if (!new_dir)
+               goto end_rename;
+       retval = -EPERM;
+       if (!new_len || get_fs_byte(new_base) == '.' &&
+           (new_len == 1 || get_fs_byte(new_base+1) == '.' &&
+            new_len == 2))
+               goto end_rename;
+       retval = -EACCES;
+       if (!permission(new_dir, MAY_WRITE))
+               goto end_rename;
+       if (new_dir->i_dev != old_dir->i_dev)
+               goto end_rename;
+       new_bh = find_entry(&new_dir,new_base,new_len,&new_de);
+       retval = -EEXIST;
+       if (new_bh)
+               goto end_rename;
+       retval = -EPERM;
+       if (S_ISDIR(inode->i_mode)) {
+               if (!permission(inode, MAY_WRITE))
+                       goto end_rename;
+               if (subdir(new_dir, inode))
+                       goto end_rename;
+               retval = -EIO;
+               if (!inode->i_zone[0])
+                       goto end_rename;
+               if (!(dir_bh = bread(inode->i_dev, inode->i_zone[0])))
+                       goto end_rename;
+               if (PARENT_INO(dir_bh->b_data) != old_dir->i_num)
+                       goto end_rename;
+       }
+       new_bh = add_entry(new_dir,new_base,new_len,&new_de);
+       retval = -ENOSPC;
+       if (!new_bh)
+               goto end_rename;
+ /* sanity checking before doing the rename - avoid races */
+       retval = -ERESTARTNOINTR;
+       if (new_de->inode || (old_de->inode != inode->i_num))
+               goto end_rename;
+ /* ok, that's it */
+       old_de->inode = 0;
+       new_de->inode = inode->i_num;
+       old_bh->b_dirt = 1;
+       new_bh->b_dirt = 1;
+       if (dir_bh) {
+               PARENT_INO(dir_bh->b_data) = new_dir->i_num;
+               dir_bh->b_dirt = 1;
+               old_dir->i_nlinks--;
+               new_dir->i_nlinks++;
+               old_dir->i_dirt = 1;
+               new_dir->i_dirt = 1;
+       }
+       retval = 0;
+ end_rename:
+       brelse(dir_bh);
+       brelse(old_bh);
+       brelse(new_bh);
+       iput(inode);
+       iput(old_dir);
+       iput(new_dir);
+       return retval;
+ }
+ 
+ /*
+  * Ok, rename also locks out other renames, as they can change the parent of
+  * a directory, and we don't want any races. Other races are checked for by
+  * "do_rename()", which restarts if there are inconsistencies.
+  */
+ int sys_rename(const char * oldname, const char * newname)
+ {
+       static struct task_struct * wait = NULL;
+       static int lock = 0;
+       int result;
+ 
+       while (lock)
+               sleep_on(&wait);
+       lock = 1;
+       result = do_rename(oldname, newname);
+       lock = 0;
+       wake_up(&wait);
+       return result;
+ }

------------------------------


** FOR YOUR REFERENCE **

The service addresse, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activsts@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activsts Digest
******************************
