From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Thu, 19 Mar 92 03:15:08 EST
Subject:  Linux-Activists Digest #124

Linux-Activists Digest #124, Volume #1           Thu, 19 Mar 92 03:15:08 EST

Contents:
  'combeg.dos3' Beginners.... 'commands' usage explanations. (Chuck Boyer)
  Free BSD release: future of Minix/Linux? (David Megginson)
  Re: Free BSD release: future of Minix/Linux? (Jim Nelson)
  Re: Free BSD release: future of Minix/Linux? (Charles M. Hamilton)
  Re: Question re libg (Derek Lieber)

----------------------------------------------------------------------------

From: boyer@sumax.seattleu.edu (Chuck Boyer)
Subject: 'combeg.dos3' Beginners.... 'commands' usage explanations.
Date: 19 Mar 92 05:37:38 GMT

cat combeg.dos
These are executables, called 'binaries' in the unix environment
which
are kept in the directory '/usr/bin' in Linux;
 
 
basename
beav <--- an editor for text/binary files.
bigram
bison <--- part of GNU
cat   <--- two definitions/uses; lists files to screen that already
exist,
            and creates a file if used 'cat > filename'
chgrp <--- change group file read/write ownership flags
chmod <--- change file/directory read/write/execute flags
chown
cmp   <--- compare two files
code
comm
cp    <--- copy a file to; (user defined/supplied new filename,
directory)
csplit
cut   <--- cut a large file up into smaller pieces
date  <--- give the system date
dd
dhrystone
dir   <--- same as 'ls' command, give listing of files,
sub-directories in
            the present directory location.
doshell
du
egrep
em    <--- GNU micro-emacs, editor
expand
fdisk <--- in Linux, report hard drive disk partition sizes, in DOS
and
            Unix and Minix; and change the partition size, type.
file  <--- report what kind of file it is; executable, binary,
text...etc.
fiz
flex
fold
fsck  <--- file system check, check the partition status
grep  <--- search through a file for a specified pattern
head  <--- list the top 5 or 10 lines of a file.
join
less  <--- list contents of text file to screen (backward/forward
scroll).
lesskey
ln    <--- link a file in one directory to be in the current
directory,
             without actually having to copy it.
ls    <--- list contents of current directory, or any specified
directory.
make  <--- compile a source file system specified within the
Makefile of
            the source.
man   <--- list the contents of found/specified manual pages on
specified
            subject.
mattrib
mcd   <--- mtools, from Linux change directory in a DOS directory
structure.
mcopy <--- mtools, from Linux copy a DOS file to Linux
directory/file.
mdel  <--- mtools, from Linux delete a file in a DOS filesystem.
mdir  <--- mtools, from Linux list the contents of a DOS
filesystem.
mformat <- mtools, from Linux format a disk for DOS.
mkdir  <--- make a directory
mkfifo
mkfs  <--- make a file system. Format a partition or disk for
Linux.
mknod <--- make node, make a special file (e.g. hard drive
partition,
            printer port, etc.)
mkswap <--- make a swap space on a partition on the hard drive.
mlabel
mmd
more  <--- list the contents of a text file to screen.
mrd  <--- mtools, from Linux remove a DOS directory.
mread <-- mtools, from Linux read a DOS file to screen.
mren  <-- mtools, from Linux rename a DOS filesystem directory.
mtype <-- mtools, from Linux write to screen a DOS file.
mv  <---- move a file from where it is to another location/name.
mwrite <-- mtools, from Linux write a file to DOS.
od
paste
patch <--- apply source code text file changes/updates to existing
file.
pr    <--- print file to printer.
printenv <--- from within BASH command shell, print the
automatically
               searched directories, prompt style, aliases, etc.
rm   <--- remove a file.
rmdir <-- remove a directory.
sed
ship
sort
split
stty
sum
tac
tail <--- write to screen the last 5 or 10 lines of a text file.
tar  <--- compress/shrink a file/directorys
uncompress <--- expand a shrunken file to its original size.
unexpand
uniq
unzip <--- expand a shrunken file to its original size (using
zip/unzip).
updatedb
wc  <--- word count in a text file.
zip  <--- compress/shrink a file.
zipnote
zipsplit
zoo <--- compress/shrink a file.
 
 
located in /bin;
 
 
df <--- report the disk usage, used/left-free.
mount <--- mount a Linux file system onto a partition.
umount <--- unmount a Linux file system from a partition, freeing
it up.
sync <--- dump contents of memory buffers.
 
 
located in /etc;
 
 
group
mtab
passwd
rc (is the initialization file first read when the system boots
up).
termcap <--- is the key translation code to the Linux Operating
System
              of your keyboard.
 
 
located in /dev;
PS0 is the device of floppy drive a:, 1.2M in PS/2 systems
PS1 is the device name of floppy drive b:, 1.4M in PS/2 systems.
at0 is the device name of floppy drive a:, 1.2 in at clones.
hd0 is device name of 'all' of 1st hard drive.
hd1 is device name of first partition of 1st hard drive.
hd2 is device name of second partition of 1st hard drive.
hd3 is device name of third partition of 1st hard drive.
hd4 is device name of fourth partition of 1st hard drive.
 
 
hd5 is device name of 'all' of 2nd hard drive.
hd6 is device name of 1st partition of 2nd hard drive.
hd7 is device name of 2nd partition of 2nd hard drive.
hd8 is device name of 3rd partition of 2nd hard drive.
hd9 is device name of 4th partition of 2nd hard drive.
 
 
this is the usual Unix, Minix, Linux 0.12 operating systems.
Linux 0.95 has differend names;
 
 
hda is device name of 'all' of 1st hard drive.
hda1 is device name of 1st partition of 1st hard drive.
hda2
hda3
hda4... etc.
 
 
hdb is device name of 'all' of 2nd hard drive.
hdb1 is device name of 1st partition of 2nd hard drive. and etc....
 
 
chuck
(boyer@sumax.seattleu.edu)
(these are the 1st draft of these instructions, there will
definately be more continuity and further instructions by the
second draft, about 2 weeks from today, eg.; 4/8/92).
===========================
For now, let's just take the basic 'usage of Linux' files. These files
are found in the directories; /bin and /usr/bin. /bin files are the
files that are 'vital to the restoration of the Operating System
in the event of a failure....', /usr/bin files are usually all
user files, files available to everyone. Linux can be set up on
one machine with many other machines connected to it. In this case
the System Administrator/Operator would be in charge of setting up
and maintaining everything. For our examples we will assume the
basic 'one-user' system. So, you are the System Administrator.
So, when we say 'files available for users' it would assume more
than one user. Most tinkers of Linux will not have any other users,
just themselves.
 
(I, 'boyer@sumax.seattleu.edu', am also just a 'beginner', so I don't
know yet the usage of all of the available utilities/files myself!!
So, I will begin just explaining the usage of the ones that 'I' do
know for now. Hopefully, some kind soul will update me on the usage
of the ones that I don't know, so that we can give these instructions
a more complete feeling.)
 
 
basename
bigram
bison <--- part of GNU
cat   <--- two definitions/uses; lists files to screen that already
           exist, and creates a file if used 'cat > filename'
 
examples: (we will use 'filename' in the command line usage instructions
to indicate a wildcard statement that the user (you) should supply in
this place the name of an acaual file that you wish to use).
 
cat filename(ENTER)
  would list the contents of named file to screen, continuously scrolling
  the data (in the case of a large file) across the screen. You can stop
  the scrolling with holding down the Control key (ctrl) and pressing
  the 's' alpha key. (notated as 'ctrl-s') and starting up the scrolling
  again with 'ctrl-q'.
 
cat > filename
 
  would be using 'cat' to edit a new file named 'filename' (whatever
  you choose to name it. After typing 'cat foo' (we will use 'foo'
  as our example of 'filename') you would be put on the next line of
  the screen and the machine would now be holding, waiting for you
  to type input. Type a few words, and hit 'ctrl-d' and you are exited
  out of 'cat' and put back at your prompt. The file 'foo' is now 
  created with the words that you typed;
  example;
 
  cat > foo
   This is foo.
  ctrl-d
 
  cat foo
   This is foo.
 :
The first line 'cat > foo' issues the command to begin a new file named
'foo' and 'This is foo.' is the line you type in on the next blank line.
'ctrl-d' is the command keystrokes you issue to end this cat'ing command.
And you have created a file named 'foo' which contains the text line;
'This is foo.'
It is strongly suggested that you will understand these instructions
instantly (or better at least) if you try out the examples instead of
just reading them.
 
A third example of using the cat command would be to append an existing
file to an already existing file;
 
cat filename1 >> filename2
 
This command usage of 'cat' would add the contents of 'filename1' to
the already existing 'filename2'.
So if you had 'readme.txt' text file and wanted to add it to the end of
'readme2.txt' you would type; 'cat readme.txt >> readme2.txt'.
Then use 'cat readme2.txt' to check and see if this indeed did happen.
(Watch out, if you don't add the second greater-than bracket symbol (>>)
then, in fact you will overwrite 'readme2.txt file with 'readme.txt'
file and you would no longer have what was in 'readme2.txt' file but
just two copies of 'readme.txt' file.
Try out your own one or two line examples of these commands before
trying them out on real files that are important to you. Also, a good
practice at first in starting out using these unix commands is to first
make a copy of your file. The command to copy a file is;
 
cp readme.txt readmetxt.bak
 
Use 'cat readmetxt.bak' to get a quick readout of the file to ensure that
you have successfully copied the file. Using 'cat' to read a file is
also an overlap usage of another file which is available to you for 
reading files which is called 'more.' You will read about 'more' later.
=============
 
chgrp <--- change group file read/write ownership flags
chmod <--- change file/directory read/write/execute flags
 
   Usage:
           chmod u+rwx readme.txt
 
will render the file 'readme.txt' (r)eadable, (w)riteable, and
e(x)ecutable to (u)ser. What this means is that when you first create
a file, usually let's assume that it has no 'access' permissions. That
means that you can do nothing with it at all, you can't read the file,
you can't write to the file (add or remove from it), or execute it
(if it is an executable file). So, you have to change the mode of the
file, therefore you have the utility 'chmod' which changes the mode
of files. This allows for different settings for different access
permissions, security, etc. The possibilities are (u)ser (that's you),
(g)roup, in a larger system that's the group that has been designated
as having permissions to the same files, and (a)ll, for 'all' users.
 
 
chown
cmp   <--- compare two files
code
comm
cp    <--- copy a file to; (user defined/supplied new filename,
                            directory)
 
cp is the command for copying a file from one filename or directory
location to another filename or directory location. (you can also
use the 'mv' command, to be discussed later). Ther is the 'copy'
command in DOS, this is somewhat the same command. You will find
that in the unix world (Linux is a Unix operating system) that some
of the same commands exist, but they are called by shorter names.
Therefore 'copy' in DOS is 'cp' in Linux/Unix world. Unix uses the
basic philosophy that 'smaller is better.' This is the logic behind
calling the copy command 'cp' in Unix.
 
usage: 
      cp readme.txt read.text
 
would create a duplicate of 'readme.txt' named 'read.text'. You can
copy a file in the current directory that you are in to another 
directory;
 
cp readme.txt /usr/docs/read.text
 
would copy the readme.txt in the current directory to the sub-directory
docs which is a sub directory under /usr directory and rename it
'read.text'.
 
csplit
cut   <--- cut a large file up into smaller pieces
date  <--- give the system date
dd
dhrystone
dir   <--- same as 'ls' command, give listing of files,
 
dir is here for DOS users I guess, as in most unix systems this file
is named 'ls' instead. (Perhaps 'ls' stands for 'list structure'?).
 
usage:
 
dir -l          gives a listing printed lengthwise up and down the
                screen, scrolling on if more than one page/screen worth
                of files are there to be listed.
 
dir -la         the 'a' option gives 'hidden' files listed.
 
dir -lFR        gives a listing of all directories and files that are
                existing beneath/below the current directory that you
                presently are in.
                I use this command with the output piped to a file
                in the root directory to give a listing in a file that
                I can then read (with 'cat' or 'more') which give me
                a listing of all files that exist in my system.
                ex:  'dir -lFR > files'
 
          gives me a listing of my entire files on my system in a text
          file names 'files' which I then read with 'more files'.
 
 
 
doshell
du
egrep
em    <--- GNU micro-emacs, editor
expand
fdisk <--- in Linux, report hard drive disk partition sizes, in DOS
and
            Unix and Minix; and change the partition size, type.
file  <--- report what kind of file it is; executable, binary,
text...etc.
fiz
flex
fold
fsck  <--- file system check, check the partition status
grep  <--- search through a file for a specified pattern
head  <--- list the top 5 or 10 lines of a file.
join
less  <--- list contents of text file to screen (backward/forward
scroll).
lesskey
ln    <--- link a file in one directory to be in the current
directory,
             without actually having to copy it.
ls    <--- list contents of current directory, or any specified
directory.
make  <--- compile a source file system specified within the
Makefile of
            the source.
man   <--- list the contents of found/specified manual pages on
specified
            subject.
mattrib
mcd   <--- mtools, from Linux change directory in a DOS directory
structure.
mcopy <--- mtools, from Linux copy a DOS file to Linux
directory/file.
mdel  <--- mtools, from Linux delete a file in a DOS filesystem.
mdir  <--- mtools, from Linux list the contents of a DOS
filesystem.
mformat <- mtools, from Linux format a disk for DOS.
mkdir  <--- make a directory
mkfifo
mkfs  <--- make a file system. Format a partition or disk for
Linux.
mknod <--- make node, make a special file (e.g. hard drive
partition,
            printer port, etc.)
mkswap <--- make a swap space on a partition on the hard drive.
mlabel
mmd
more  <--- list the contents of a text file to screen.
mrd  <--- mtools, from Linux remove a DOS directory.
mread <-- mtools, from Linux read a DOS file to screen.
mren  <-- mtools, from Linux rename a DOS filesystem directory.
mtype <-- mtools, from Linux write to screen a DOS file.
mv  <---- move a file from where it is to another location/name.
mwrite <-- mtools, from Linux write a file to DOS.
od
paste
patch <--- apply source code text file changes/updates to existing
file.
pr    <--- print file to printer.
printenv <--- from within BASH command shell, print the
automatically
               searched directories, prompt style, aliases, etc.
rm   <--- remove a file.
rmdir <-- remove a directory.
sed
ship
sort
split
stty
sum
tac
tail <--- write to screen the last 5 or 10 lines of a text file.
tar  <--- compress/shrink a file/directorys
uncompress <--- expand a shrunken file to its original size.
unexpand
uniq
unzip <--- expand a shrunken file to its original size (using
zip/unzip).
updatedb
wc  <--- word count in a text file.
zip  <--- compress/shrink a file.
zipnote
zipsplit
zoo <--- compress/shrink a file.
 
 
located in /bin;
 
 
df <--- report the disk usage, used/left-free.
mount <--- mount a Linux file system onto a partition.
umount <--- unmount a Linux file system from a partition, freeing
it up.
sync <--- dump contents of memory buffers.
 
 
located in /etc;
 
 
group
mtab
passwd
rc (is the initialization file first read when the system boots
up).
termcap <--- is the key translation code to the Linux Operating
System
              of your keyboard.
 
(incomplete, more to come as of 4/6/92).
boyer@sumax.seattleu.edu

------------------------------

Crossposted-To: comp.os.minix
From: meggin@epas.utoronto.ca (David Megginson)
Subject: Free BSD release: future of Minix/Linux?
Date: Wed, 18 Mar 1992 03:01:52 GMT


Now that a fully bootable, free BSD Unix for '386 and '486 boxes is
available from agate.berkeley.edu (pub/386BSD), how will Minix and
Linux fare? I am stuck with Minix, because I use a 68000-based
machine, but I wonder whether many Intel users will stay with Minix or
Linux?


David


------------------------------

From: jnelson@plains.NoDak.edu (Jim Nelson)
Crossposted-To: comp.os.minix
Subject: Re: Free BSD release: future of Minix/Linux?
Date: 19 Mar 92 07:15:18 GMT

In article <1992Mar18.030152.14554@epas.toronto.edu> meggin@epas.utoronto.ca (David Megginson) writes:
>
>machine, but I wonder whether many Intel users will stay with Minix or
>Linux?

I'll probaly stay with Linux since it doesn't need a coprocessor like 386BSD
does.   Now I just have  to get Linux  to sit nicely on my harddisk.  

-- 
Jim, in the Land of the Lost.            |Disclaimer:  These are probably 
ObQuote: Do Not Meddle in the Affairs of |   opinions.  I'm probably not
          Wizards, For You are Crunchy,  |   supposed to have any.
          and Good with Ketchup.         |
   

------------------------------

From: chamil@mcs213i.cs.umr.edu (Charles M. Hamilton)
Crossposted-To: comp.os.minix
Subject: Re: Free BSD release: future of Minix/Linux?
Date: 19 Mar 92 07:36:11 GMT

In article <1992Mar18.030152.14554@epas.toronto.edu> meggin@epas.utoronto.ca (David Megginson) writes:
>
>Now that a fully bootable, free BSD Unix for '386 and '486 boxes is
>available from agate.berkeley.edu (pub/386BSD), how will Minix and
>Linux fare? I am stuck with Minix, because I use a 68000-based
>machine, but I wonder whether many Intel users will stay with Minix or
>Linux?
>
>
>David

I personally plan on sticking with linux and NOT going to the
free release of 386BSD.  Why?  Well, my machine now only
has 4 megs of RAM, which seems to be fine for linux, but I
suspect would crowd BSD.  I also currently only have 80 megs
of disk space, 40 of which I devote to linux and 40 to DOS.
(I would throw DOS out completely, but I have too much invested
in software for it to disregard it completely).  40 megs
should be sufficient, approaching comfortable, for linux.
If you tell 386BSD unix you only have 40 megs available for
it, it will just laugh at you.  Also, DOS and 386BSD cannot
co-exist on the same machine (yet).
Just wanted to get my $0.02 worth in.  Keep up the good work
Linus, I'll stay with you!

-- Charles M. Hamilton
-- University of Missouri - Rolla
-- Computer Science
-- chamil@cs.umr.edu
-- (lifesucks@umr.everyday)

------------------------------

From: derek@watson.ibm.com (Derek Lieber)
Subject: Re: Question re libg
Date: Thu, 19 Mar 1992 00:25:16 GMT
Reply-To: derek@watson.ibm.com (Derek Lieber)

In article <6225@shodha.enet.dec.com> tucker@yuppie.enet.dec.com writes:
>I have various unresolved refs and so on but at one point I get the
>complaint that it can't find libg.a.

Try compiling without "-g".
-- 
Derek Lieber
derek@watson.ibm.com

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
