This is Info file linux-faq.info, produced by Makeinfo-1.55 from the
input file faq.texi.

   Answers to Frequently asked questions about Linux (v1.19) Last
Modified 93/06/11 v1.19


File: linux-faq.info,  Node: III-10,  Next: III-11,  Prev: III-09,  Up: IIIC-00

(III.10)  How do I make partitions and/or filesystems for Linux?
================================================================

   ANSWER: For most Linux installations (such as SLS) you'll need at
least two partitions: one for swap space (used as virtual memory) and
another for your "root filesystem" (that is, the actual Linux software
itself). You can also make separate partitions for your /usr
filesystem...  if you have UNIX experience, you'll be able to figure
out how to divide software between multiple partitions.

   For most installations simply having one root filesystem and one
swap partition is the best way to go.

   The first thing you need to do is resize the existing partitions on
your drive (if any) to make space for Linux; for example, if you have a
DOS partition taking up all of your drive, you need to use FDISK under
MS-DOS to delete it and recreate it with a smaller size. Of course, in
so doing you'll lose everything on that DOS partition- just back it up
first and reinstall after you've recreated and reformatted the
partition.  That's life! :)

   Now you can boot up Linux (say, from SLS, or from the boot/root
disks).  >From there you use the command 'fdisk' to create partitions
for Linux:

             fdisk <drive>

where <drive> is the name of the drive which you're installing Linux on.

   Valid drive names are:

             /dev/hda: first IDE drive
             /dev/hdb: second IDE drive
             /dev/sda: first SCSI drive
             /dev/sdb: second SCSI drive

   For example, to run fdisk on the first SCSI drive in your system, use
the command

             fdisk /dev/sda

   If you don't specify a drive name for fdisk, it will assume /dev/hda.

   The fdisk command "m" prints a menu. The "n" command is used to
create a new partition. "w" writes the partition table and exits fdisk;
"q" quits without saving changes. The "p" command displays the current
partition table.

   When creating partitions with fdisk, you may get an error message to
the effect of "Warning: Linux cannot currently use xxxxx blocks of this
partition." This simply means that the Minix filesystem type (which is
the default) is limited to filesystems which are 64 megs in size. You
can ignore this warning, because when creating your filesystems, you
can use one of the other filesystem types (ext, ext2, or xia) which
have a size limit of 4 terabytes.

   Just keep in mind that if you create a partition larger than 64
megabytes then you cannot use the Minix filesystem type ('mkfs') when
creating the filesystem (see below). You must use the ext, ext2, or xia
filesystem type instead.

   NOTE: An "extended partition" DOES NOT equal "extended filesystem".
An "extended partition" acts as a container for logical partitions. This
allows you to have more than 4 partitions on a hard drive. Extended
partitions cannot hold data on their own. You must create logical
partitions on the extended partition to hold data.

   On the other hand, an "extended filesystem" is a Linux filesystem
which uses the "extended filesystem type" (as opposed to the Xia
filesystem, the Minix filesystem, and so on). Extended partitions and
extended filesystems have nothing to do with each other.

   The TYPE of the partition (in the rightmost field when you use the
fdisk "p" command) does not matter to Linux. However, it does matter to
other systems such as OS/2. Just make sure that your Linux partitions
have a type such as "Linux/MINIX" to distinguish it from other systems.
(i.e. It doesn't matter if you set the type of the swap partition to
"Linux swap". All of your Linux partitions can use the default type
"Linux/MINIX" which is fine).

   WARNING: DO NOT use Linux fdisk to manipulate partitions for
operating systems other than Linux. This means don't use Linux fdisk to
delete or create MS-DOS partitions, for example. Use MS-DOS fdisk for
this instead. Linux fdisk doesn't properly know how to create
partitions for MS-DOS and other operating systems.

   When creating partitions, write down the names and sizes of the
partitions you create. You need this information later on. Use the
fdisk "p" command to display this information.

   Once you have your partitions created, reboot the system (with the
SLS disk, reboot with the a1 disk again). You can now create filesystems
on those partitions (which is similar to "formatting" a partition under
MS-DOS). For the swap partition, use the command

             mkswap <partition> <size>

then

             swapon <partition>

   For example, for a swap partition on /dev/hda2, with a size of 8208
blocks, you'd use the commands

             mkswap /dev/hda2 8208
             swapon /dev/hda2

   This will make the swap space and enable it. Swap space is used as
virtual memory... if you have 4 megs of RAM in your machine, and a 16
meg swap partition, you have a total of 4 + 16 = 20 megs of RAM
available for Linux.

   To make your filesystems, use the correct version of the 'mkfs'
program, depending on the type of filesystem you wish to use:

             Filesystem type     Command to create filesystem
             ---------------     ----------------------------
             Minix               mkfs -c <partition> <size>
             Extended (old)      mkefs -c <partition> <size>
             Second Extended     mke2fs -c <partition> <size>
             Xia filesystem      mkxfs -c <partition> <size>

   The Minix and Extended filesystem types are older, and while more
robust, are slower and may eventually be phased out. The most popular
filesystem type used right now is the Second Extended fs type
('mke2fs'). The Minix filesystem type is limited to 64 megs (and
14-character-long filenames). It's suggested that you use either mke2fs
or mkxfs.

   For example, to create a 61000-block Second Extended filesystem on
/dev/hda3, use the command

             mke2fs -c /dev/hda3 61000

   The "-c" option checks for bad blocks on the filesystem. Apparently
mkfs and mkefs do not actually use the bad block information correctly
(see Q/A below).

   Now you're ready to install the software. For SLS this means just
using the 'doinstall' command (see section III.B above). For other
installations you may need to 'mount' the filesystems first. Just see
the relevant READMEs for information.


File: linux-faq.info,  Node: III-11,  Next: III-12,  Prev: III-10,  Up: IIIC-00

(III.11)  Why does fdisk say "Linux cannot currently use XXXX sectors of this partition"?
=========================================================================================

   ANSWER: See the previous Q/A. Fdisk is an older program which
expected all filesystems to be Minix fs, which limited filesystems to
64 megs. You can ignore this warning because the extfs, xiafs, and
ext2fs don't have this limit.


File: linux-faq.info,  Node: III-12,  Next: III-13,  Prev: III-11,  Up: IIIC-00

(III.12)  What does the message "MINIX-fs: Magic match failed" on bootup mean?
==============================================================================

   ANSWER: Basically, this means that you're trying to mount a non-Minix
filesystem as a Minix filesystem, and mount is croaking on it because
the type is wrong. If you use a filesystem type other than Minix fs
(i.e.  if you use the extfs, ext2fs, or xiafs) you'll probably see this
message: the kernel tries to mount root as Minix, then extfs, then
ext2fs, and so on...  every time it fails for one type it tries the
next type.

   In most situations, this can be ignored, if the kernel is able to
mount your root partition as any one of its known types. However, if
you have recompiled the kernel yourself and set the root device to the
wrong partition, then the kernel should hang at this point and you'll
have to use "rdev" to set it correctly.


File: linux-faq.info,  Node: III-13,  Next: III-14,  Prev: III-12,  Up: IIIC-00

(III.13)  Linux mkfs doesn't accept the size I give the device, although I double-checked with fdisk, and it's correct.
=======================================================================================================================

   ANSWER: Be sure you give the size in Linux BLOCKS (1024 bytes), not
sectors. Also make sure that you have the right partition: partitions
are numbered "/dev/hda1", "/dev/hda2", and so on (and "/dev/hdb1",
"/dev/hdb2" for the second hard drive)... DON'T use "/dev/hda" or
"/dev/hdb" as they correspond to the entire disk, not just single
partitions.

   Also remember that SCSI drives use /dev/sda1, /dev/sda2... and
/dev/sdb1, /dev/sdb2, and so on for their partitions.


File: linux-faq.info,  Node: III-14,  Next: III-15,  Prev: III-13,  Up: IIIC-00

(III.14)   How can I get mkfs/mkefs to check for bad blocks?
============================================================

   ANSWER: Unfortunately the -c option on mk(e)fs does not work; it
cannot detect bad blocks on the drive, and thus if you create a
filesystem over a part of your hard drive with bad blocks, things will
eventually go wrong. So you need to generate a bad block list (in a
file) and use the -l option on mk(e)fs so it will flag those blocks
when making a filesystem.

   mke2fs and mkxfs correctly flag bad blocks, so this only applies to
mkfs and mkefs. This is also only needed for older RLL and MFM drives.
SCSI and IDE drives have bad block logic on-board.

   How to generate a bad block list? Since this is only needed for older
drives and older filesystem types (i.e. Minix and extfs), just mail
mdw@tc.cornell.edu or kircher@neuro.tuwien.ac.at if you need
instructions on this procedure. Your best bet is to use mke2fs or mkxfs
anyway.


File: linux-faq.info,  Node: III-15,  Next: III-16,  Prev: III-14,  Up: IIIC-00

(III.15)  How can I boot Linux off of my hard drive?
====================================================

   ANSWER: You need to install the "LILO" program which changes the boot
sector of your hard drive to allow you to choose between a DOS or a
Linux partition to boot from. These programs are provided with most
major releases, or you can get them seperately from one of the FTP
sites.

   As of LILO version 8 there is a "quick install" script available
which should make LILO installation quick and easy. See Section VII for
LILO information. You can also see the "LILO QUICKSTART GUIDE" by Matt
Welsh which should be available on sunsite.unc.edu:/pub/Linux/docs.


File: linux-faq.info,  Node: III-16,  Next: III-17,  Prev: III-15,  Up: IIIC-00

(III.16)  I tried to install LILO, but screwed up somehow, and now can't boot anything from the hard drive. How can I fix this?
===============================================================================================================================

   ANSWER: Simple. First you need an MS-DOS 5.0 (or OS/2) bootable
floppy with FDISK.EXE on it. Boot it and run the command

             FDISK /MBR

which will (hopefully) restore your hard drive's master boot record to
a standard MS-DOS (resp. OS/2) boot record. Now you can go back and
reinstall LILO. :)


File: linux-faq.info,  Node: III-17,  Next: III-18,  Prev: III-16,  Up: IIIC-00

(III.17)  When installing SLS, I get the error "You may have inserted the wrong disk" when putting in the next disk in a series. What's going on?
=================================================================================================================================================

   ANSWER: Each disk has a small file on it which contains the name of
the disk. For example, the SLS a3 disk has a file on it called
"diska3". If it doesn't exist, or is named something else (like
"diska3.z"), then just create it/rename it. If you copied the files to
the SLS floppies using "copy *.* ..." then you probably missed the
"diska3" file because it doesn't have an extension in the filename!

   Also, the last disk in a series (i.e. the a4 disk, b5 disk, etc.) has
a file on it called "install.end". You need this file as well. These
files are used by the SLS doinstall program to keep track of where it
is.


File: linux-faq.info,  Node: III-18,  Next: III-19,  Prev: III-17,  Up: IIIC-00

(III.18)   When installing SLS, the installation script creates a "boot floppy" for me to boot Linux with. How can I make these myself (or fix problems with them?)
===================================================================================================================================================================

   ANSWER: The SLS install scripts just copy the kernel image to a blank
floppy for you to boot Linux with. When SLS is installed, a copy of the
kernel is stored in the file /Image on your hard drive: since you use
the kernel on your boot floppy to boot, this file isn't used during the
bootup process (unless you install LILO).

   To make a boot floppy yourself, you must do two things:
       1) Run 'rdev' (a.k.a. 'rootdev') on the kernel in the file /Image to set
          the root partition it uses. For example, if your root partition is
          /dev/hda3, run the command
     
                rdev /Image /dev/hda3
     
       2) Copy the kernel to a new floppy. You may need to DOS format the
          floppy first(*). Then run the command
     
               cp /Image /dev/fd0
     
          if the floppy is in /dev/fd0 (the first floppy drive). You can use a
          command like
     
               dd if=/Image of=/dev/fd0 bs=16k
     
          as well; they should accomplish the same thing.

   (*) (From: "Michael L. Kaufman" kaufman@delta.eecs.nwu.edu)
Formating the floppy lays down the track/sector information. If you
have a completely unformated floppy, dd can fail in interesting ways.

   Many folks have problems with their SLS boot disks made in this
manner because they forgot to run 'rdev' on the kernel image before
copying it to the floppy.


File: linux-faq.info,  Node: III-19,  Next: III-20,  Prev: III-18,  Up: IIIC-00

(III.19)  How can I set the default video mode used by Linux? Do I have to recompile the kernel to do this?
===========================================================================================================

   ANSWER: No, you don't have to recompile the kernel. Just use "rdev"
with the "-v" switch to set the video mode in the kernel (either on your
hard drive (if booting from LILO) or on your boot floppy). For example,
to change the kernel in /Image to prompt for the videomode on bootup, do

             rdev -v /Image -3

   to change the kernel on your boot floppy do,

             rdev -v /dev/fd0 {video-mode}


File: linux-faq.info,  Node: III-20,  Next: III-21,  Prev: III-19,  Up: IIIC-00

(III.20)   How else can I use rdev?
===================================

   ANSWER: rdev is very handy and also is used to set the root and swap
partitions, ramdisk size, and more, in a compiled kernel. It means you
don't have to recompile the kernel to make these changes. Use "rdev -?"
for a list of options.


File: linux-faq.info,  Node: III-21,  Next: III-22,  Prev: III-20,  Up: IIIC-00

(III.21)   When I login as non-root, I get tons of errors about "shell-init: permission denied". Also, some things work as root but not as a normal user. What's the deal?
==========================================================================================================================================================================

   ANSWER: This is a really common problem which comes from not having
permissions set right and a misunderstanding of some UNIX terms. Some
installations won' t have the file permissions set correctly on the
various directories that normal users (i.e. non-root) will use. For
example, if your user directories are in /home, then /home must be of
mode rwxr-xr-x, or 'chmod 755 /home'.  Also, a home directory must be
owned by the user who it belongs to (i.e.  /home/mdw must be owned by
'mdw'...  just 'chown mdw /home/mdw', for example).  Also, the
permissions must be set correctly for / (the root directory). Here's a
list of permissions that should work (although you can use other
permissions, these are just suggestions that shouldn't cause trouble):


 permissions (chmod)   owner   file
 ----------- -------   -----   ---------------------------------------------
 rwxr-xr-x   (755)     root    /
 rwxr-xr-x   (755)     root    /home
 rwxr-xr-x   (755)     mdw     /home/mdw
 rwxr--r--   (744)     mdw     /home/mdw/.profile (or other startup files)
 rwxr--r--   (744)     mdw     /home/mdw/foo (normal files)

   In most cases the group of the file doesn't matter, but in general
most files are set to group 'root' (except for binaries which are group
bin, and so on) and user files are set to group 'user' (or whatever
group users are in).

   In general you want directories that everyone can access to be
rwxr-xr-x (chmod 755). Files that everyone can read are rwxr-r- (chmod
744), and programs that everyone can run are rwxr-xr-x (chmod 755).

   Thus /bin, /usr, /usr/bin, /etc, and so on, should all be rwxr-xr-x.
All binaries should be rwxr-xr-x (unless, of course, they're setuid
programs).  For UNIX newbies, setuid programs run under the user id of
the owner, thus programs owned by root which have a permission of
rwsr-xr-x (note the 's') run as root, with root's priveleges. So before
changing permissions on a program check to see if it's setuid first. To
make a program setuid prepend a '4' to the permissions you give to
chmod, i.e. rwsr-xr-x is 'chmod 4755'.

   Here's a list of common uses for permissions:


permission    effect on files           effect on directories
----------    -----------------------   ---------------------------------
read          lets you look             lets you see what's in the director
              at a file, lets you       with ls
              run a shell script

write         lets you edit a file or   lets you create or delete a file from
              copy over it              the directory (*)

execute       lets you run a binary or  lets you cd into the directory
              shell script

   (*) Note that you can delete a file from a directory even if you
DON'T have write access to the file itself! Write access to the
DIRECTORY that the file is in will let you delete any file in that
directory.  The permissions of the file itself have nothing to do with
being able to delete a file.  This is standard across all UNIX systems,
nothing new with Linux.

   If any of this is confusing, please go buy a good book on using UNIX
and read it. All of the above is standard UNIX fare. It's included here
because many Linux newcomers don't take the time to learn UNIX before
they dive in. :)


File: linux-faq.info,  Node: III-22,  Next: III-23,  Prev: III-21,  Up: IIIC-00

(III.22)  I have the previous version of the Linux kernel, how can I upgrade it?
================================================================================

   ANSWER: If you've never done this before, get the kernel sources from
your nearest FTP site (in a file named something like linux-*.tar.z)
and unpack them into /usr/src/linux. As of Linux-0.99 there is a script
to autoconfigure your kernel, and you need at least GCC version 2.3.3.
You unpack these sources in /usr/src/linux. Make sure you have the
logical links for /usr/include/linux and /usr/include/asm as described
below.

   First run 'make config' and answer the various questions. Then edit
/usr/src/linux/Makefile to set the root partition, keyboard, etc.
Finally, do a 'make dep' (to set dependencies: VERY important!) and
finally 'make'.  Assuming you have GCC installed correctly, the kernel
should compile and you'll be left with a new "Image" which is your new
kernel: if you boot from harddrive, copy the Image to wherever you told
LILO to look for it, or if you boot from floppy dd the Image to a new
floppy. Make sure that you run "rdev" on the Image to make it look for
the correct partition for your root filesystem (if you specified this
correctly in the Makefile you don't need to do this).

     ** Make sure you read /usr/src/linux/README, which explains in
     detail what to do when recompiling the kernel. **

   If you HAVE done this before, you can just apply the source patches
to your old sources and then recompile (i.e. you don't have to get the
entire kernel sources all over again). Use the "patch" program to do
this.  Before you recompile the kernel do a 'make dep' to set
dependencies and a 'make clean'.


File: linux-faq.info,  Node: III-23,  Next: III-24,  Prev: III-22,  Up: IIIC-00

(III.23)  Where is /usr/include/linux and /usr/include/asm, or, Why won't the kernel compile correctly?
=======================================================================================================

   ANSWER: The files /usr/include/linux and /usr/include/asm are
symbolic links to /usr/src/linux/include/linux and
/usr/src/linux/include/asm, respectively. In other words, all of the
Linux include files are actually under /usr/src/linux/include, but to
access them you need two symbolic links in /usr/include:

             /usr/include/linux -> /usr/src/linux/include/linux
             /usr/include/asm -> /usr/src/linux/include/asm

   To make these, run the commands

             ln -sf /usr/src/linux/include/linux /usr/include/linux
             ln -sf /usr/src/linux/include/asm /usr/include/asm

NOT the other way around. :) If you dont have these links then many
compilations will surely fail.


File: linux-faq.info,  Node: III-24,  Next: III-25,  Prev: III-23,  Up: IIIC-00

(III.24)   How can I upgrade to the newest version of GCC and/or libraries?
===========================================================================

   ANSWER: See section IX on GCC for more information, but essentially
all you need to do is FTP to sunsite.unc.edu (or one of the other Linux
FTP sites) and look in /pub/Linux/GCC. You'll see a number of .tar.z
files there (often abbreviated .tpz). The names change from time to
time: you need to get the compiler (often in a file such as
'gcc233.tpz'), header files, and library files. At this point, the
compiler lives in /usr/bin, the compiler's setup files are under
/usr/lib/gcc-lib/i386-linux, and the libraries (shared, jump table, and
static) are all in /usr/lib. It's all very straightforward once you
actually unpack the tar files and everything falls into place.


File: linux-faq.info,  Node: III-25,  Next: III-26,  Prev: III-24,  Up: IIIC-00

(III.25)  What's the deal with these things called "jump tables"?
=================================================================

   ANSWER: There's more information in section X and VII, but to be
brief: There are two kinds of libraries for Linux. As of gcc v2.3.3
they all live in /usr/lib. The files are...

             /usr/lib/*.a   static (non-shared) libraries  (use gcc -static ...)
             /usr/lib/*.sa jump table shared lib stubs (use gcc -jump ...)

   There is an older form of the shared libraries which is no longer
widely used.  Nonetheless, you may run across it from time to time.

             /usr/lib/*.ca  classic shared lib stubs

   When you compile a program, depending on the options you give gcc
(-jump is the default) it will link it against one set of these
libraries. The static libs contain all of the code and thus make your
executable very big; no shared code is used. The classic shared libs
were actually 'stubs' which reference the shared code in
/lib/libc.so.VERSION (where VERSION is a number like '4.2').
/lib/libc.so.VERSION is a file which contains the actual code of the
library, which is accessed at runtime by your executable. The
jump-table library stubs are also shared libs, but they are built in
such a way that you can upgrade the /lib/libc.so.VERSION file without
having to recompile the programs that use it.

   So when we say "uses Jump Tables version 4.2" we mean it uses the
actual library itself, /lib/libc.so.4.2. To compile programs that use
jump tables version 4.2 you need the right version of /usr/lib/*.sa
installed, but you don't need them to RUN programs that use jump tables.

   However programs that are compiled to use, for example, jump table
version 4.2 (in the file /lib/libc.so.4.2) won't work if you only have
libc.so.4.1 installed. They're only backwards-compatible. If you get
errors about 'can't find /lib/libc.so.4.1' then the executable you're
using is looking at runtime for a jump table version that you don't
have. Basically you're safe if you have the most recent version of the
/lib/libc.so.VERSION file installed (which is found on
sunsite.unc.edu:/pub/Linux/GCC and comes with the GCC stuff).

   You should always have a symbolic link with the major version number
of the library in /lib, because that's what's actually read. For
instance, if you have /lib/libc.so.4.2 installed, then you need the
symbolic link

             /lib/libc.so.4 -> /lib/libc.so.4.2

   Make this with the command

             ln -s /lib/libc.so.4.2 /lib/libc.so.4


File: linux-faq.info,  Node: III-26,  Next: III-27,  Prev: III-25,  Up: IIIC-00

(III.26)  How to upgrade jump tables? (Without hanging my system)
=================================================================

   ANSWER: Be careful! If you upgrade your /lib/libc.so.VERSION file and
either remove the symlink or delete the old libc.so.VERSION file before
the new one is in place (and the link points to it), then more than
likely all of your binaries like "cp", "mv", "ls" and "ln" use the
library, so they'll all stop working once you kill the link or the
library file. So to upgrade the file, copy the new version to /lib and
switch the link in one step with a command such as

             ln -sf /lib/libc.so.NEW_VERSION /lib/libc.so.4

where NEW_VERSION is the new version of the library you're installing.
This will switch the link in one step and everything should work. You
just can't copy over the old file because the old version is in use by
'cp', 'mv', and so on.

   BTW you get new versions of GCC, jump tables, libraries, include
files, etc.  from tsx-11.mit.edu:/pub/linux/GCC.


File: linux-faq.info,  Node: III-27,  Next: III-28,  Prev: III-26,  Up: IIIC-00

(III.27)  How can I be sure I won't be writing over anything important when installing Linux?  I have to use DOS on my machine, and I don't want to lose any files.
===================================================================================================================================================================

   ANSWER: Back up everything. Just in case. As long as your DOS and
Linux partitions don't overlap you should be okay.


File: linux-faq.info,  Node: III-28,  Next: III-29,  Prev: III-27,  Up: IIIC-00

(III.28)  I just rebooted my machine, and now Linux dies with a "panic: trying to free unused inode". What's going on?
======================================================================================================================

   ANSWER: You probably forgot to "sync" before rebooting, which stores
on the disk physically the contents of the kernel buffers. You can
either run "fsck" on the partition to TRY to correct the problem (it
might fail), or re-mkfs and re-install the software on that partition.
For the extended filesystem use "efsck" instead.

   The best way to shutdown your system is the "shutdown" command. To
shutdown and reboot the system, use

             shutdown -r now

or substitute a number of minutes in place of "now". Leave off the "-r"
switch if you just want to shutdown and not reboot.


File: linux-faq.info,  Node: III-29,  Next: III-30,  Prev: III-28,  Up: IIIC-00

(III.29)  Can I use both OS/2 and Linux on my machine??
=======================================================

   ANSWER: Yes! See the following two Q/A's about getting your OS/2 Boot
Manager to work. But, be warned: IF YOU USE OS/2, DO NOT USE LINUX's
FDISK TO CREATE LINUX PARTITIONS!! The problem is with a bug/feature in
OS/2's fdisk that tries to correct 'errors' in partitions that it
doesn't like... Linux partitions included. The solution: make your
Linux partitions with OS/2's fdisk, then use Linux's fdisk to change
the partition ID's to the right values (this is self-explanatory with
Linux's fdisk).

   If you made your Linux partitions with Linux's fdisk, and OS/2 sees
them, it will think they have errors and end up trashing them.


File: linux-faq.info,  Node: III-30,  Next: III-31,  Prev: III-29,  Up: IIIC-00

(III.30)   I use OS/2's Boot Manager on my hard drive. How can I get it to recognize Linux?
===========================================================================================

   ANSWER: To do this, install LILO on your Linux root partition, NOT on
your hard drive's master boot record. The lilo command for this would
be (if /dev/hda3 is your Linux root partition, and your Linux kernel is
in /Image):

             /etc/lilo/lilo -c -b /dev/hda3 -v -s /Image

   Then use OS/2's fdisk to add it to the Boot Manager.

   Thanks to Thomas Brodt <brodtts@minnie.informatik.uni-stuttgart.de>.


File: linux-faq.info,  Node: III-31,  Next: IV-00,  Prev: III-30,  Up: IIIC-00

(III.31)   When I run Linux's fdisk it says "OPUS" for OS/2's Boot Manager partition. Is this right? What's OPUS?
=================================================================================================================

   ANSWER: It's correct. OPUS is BBS software that used partition type
0x0A long before OS/2.


File: linux-faq.info,  Node: IV-00,  Next: IV-01,  Prev: III-31,  Up: Top

(IV.) SOME CLASSICAL PROBLEMS
*****************************

* Menu:

* IV-01::  While running du I get "Kernel panic: free_inode: bit
     already cleared".  Also, du produces a ENOENT error for all the files
     in certain of my directories.  What's going on?
* IV-02::  How can I partition my hard-drive to use Linux?
* IV-03::  I heard something about repartition a hard disk without
     deleting everything on it, any clue?
* IV-04::  What must I do to mkfs a floppy?
* IV-05::  I have some trouble with tar/untar; any clue ?
* IV-06::  I can do this as root but not as non-root, is it a bug?
* IV-07::  "du" reports twice the size showed with "ls -l", is it a bug?
* IV-08::  Sometimes, I get "mount can't open lock file"; what does this
     means?
* IV-09::  When I try "mount /dev/hd?? /user", I get error 2.
* IV-10::  Since I have upgrade my Linux kernel, ps won't work anymore, why?
* IV-11::  Since Linux 0.96b I have a lot of core file all over
     my disk. How can I sweep them away ?
* IV-12::  I can only log-in as "root", is it normal ?
* IV-13::  Sometimes my Linux virtual console get messed up when I cat
     a binary file. The characters shown are above ascii 127, any clue ?


File: linux-faq.info,  Node: IV-01,  Next: IV-02,  Prev: IV-00,  Up: IV-00

(IV.01)  While running du I get "Kernel panic: free_inode: bit already cleared".  Also, du produces a ENOENT error for all the files in certain of my directories.  What's going on?
====================================================================================================================================================================================

   ANSWER: These are both consistent with a bad file-system.  That's
relatively easy to produce by not syncing before rebooting, as linux
usually has 1.5MB of buffer space held in memory (unless you have <=4M
RAM, in which case the buffers are only about 0.5MB). Also linux
doesn't do anything special about the bit-map blocks, and as they are
used often, those are the thing most likely to be in memory. If you
reboot, and they haven't been written to disk ...

   Just do an fsck on the device, the -a flag might repair it otherwise,
the only thing to do is to reinstall the filesystem from the Images.

   A sync is done only every 30 seconds normally (standard unix
practice), so do one by hand (some people think you should do 3 syncs
after each other, but that's superstition, you just have to give time
to the first sync to finish), or by logging out from the startup-shell,
which automatically syncs the system. Unmounting a filesystem also
syncs it (but of course you can never unmount root).

   Another (sad) possibility is that you have bad blocks on your disk.
Not very probable, as they would have to be in the inode-tables, just a
couple of blocks in size. Again there aren't programs available to read
a disk for bad sectors and put them in some kind of "bad-sector-file".
On IDE drives this is no problem (bad sectors are automatically mapped
away).


File: linux-faq.info,  Node: IV-02,  Next: IV-03,  Prev: IV-01,  Up: IV-00

(IV.02)  How can I partition my hard-drive to use Linux?
========================================================

   ANSWER: See section III of the FAQ on installation.


File: linux-faq.info,  Node: IV-03,  Next: IV-04,  Prev: IV-02,  Up: IV-00

(IV.03)  I heard something about repartition a hard disk without deleting everything on it, any clue?
=====================================================================================================

   ANSWER: It's not a program but a partition procedure which requires
     a) a partitionning program
     b) a sector editor
   The procedure itself can be found (at least) in digest#132 Vol2.


File: linux-faq.info,  Node: IV-04,  Next: IV-05,  Prev: IV-03,  Up: IV-00

(IV.04)  What must I do to mkfs a floppy?
=========================================

   ANSWER: blocks are of size 1K so 1.44 floppy is 1440 blocks. The
floppy has to be formatted before this will work (e.g., fdformat can do
this from within Linux).


File: linux-faq.info,  Node: IV-05,  Next: IV-06,  Prev: IV-04,  Up: IV-00

(IV.05)  I have some trouble with tar/untar; any clue ?
=======================================================

   ANSWER: The tar provided on .96 and later is Pax (don't know for
version 0.99) which does not accept the z flag.  You can download the
GNU tar at tsx-11 in /pub/linux/binaries/usr.bin


File: linux-faq.info,  Node: IV-06,  Next: IV-07,  Prev: IV-05,  Up: IV-00

(IV.06)  I can do this as root but not as non-root, is it a bug?
================================================================

   ANSWER: Except for an early make utility, the problem is caused by an
incorrect permission flag. The most common problems are about /tmp
which should be 1777 and /dev/ttys? which might be 766. So as root do

             chmod 1777 /tmp ; chmod 766 /dev/ttys?


File: linux-faq.info,  Node: IV-07,  Next: IV-08,  Prev: IV-06,  Up: IV-00

(IV.07)  "du" reports twice the size showed with "ls -l", is it a bug?
======================================================================

   ANSWER: No it is not, the report is 512 bytes multiple (due to POSIX
requirement), for KB you just add the -k flag. You can add a du
function in your .profile which does this automatically, something like
du(){ /usr/bin/du -k $* }


File: linux-faq.info,  Node: IV-08,  Next: IV-09,  Prev: IV-07,  Up: IV-00

(IV.08)  Sometimes, I get "mount can't open lock file"; what does this means?
=============================================================================

   ANSWER: This can happened for two reasons:

   A) You try to mount something as non-root. In that case you can
either retry as root, or set the setuid bit to mount as follows:
     - be sure that mount belongs to root, if not do 'chown root /bin/mount'
     - set the setuid bit with 'chmod u+s /bin/mount'
    BTW you have to do the same with umount (in order to be able to
unmount) Remark that it is NOT safe to allow anyone to perform
mount/umount.

B) You are root. mount wants to open /etc/mtab and /etc/mtab~ - the
first one for reading, the second as lock file. If there is already a
mtab~ remove it. This can happen if you used once gnuemacs on mtab.

   To forbid that case, just add the following entry in your /etc/rc
file: rm -f /etc/mtab~


File: linux-faq.info,  Node: IV-09,  Next: IV-10,  Prev: IV-08,  Up: IV-00

(IV.09)  When I try "mount /dev/hd?? /user", I get error 2.
===========================================================

   ANSWER: Be sure, that your mount point /user does exist; if not
perform a "mkdir /user".  BTW the error numbering is explained in
/usr/include/errno.h


File: linux-faq.info,  Node: IV-10,  Next: IV-11,  Prev: IV-09,  Up: IV-00

(IV.10)  Since I have upgrade my Linux kernel, ps won't work anymore, why?
==========================================================================

   ANSWER: Each time you upgrade (or re-compile the kernel), you should
perform a 'ps -U' (-U is for update the /etc/psdatabase).

   Every time you boot a new kernel you have to do a 'ps -U' to update
the psdatabase, after doing this you can remove the system file or even
have to patch the ps-suite.

   BTW: sometimes a patch makes recompiling ps necessary. Sometimes you
do a make clean.

   NOTE: As of 0.99 there is now a ps package which uses the "/proc
filesystem".  This is a meta-filesystem which has an entry for each
process that's running... create the directory /proc and do a 'mount -t
proc /proc /proc' to see it, or else add the following entry in your
/etc/fstab:

             none    /proc   proc

   You can get the "procps" package from tsx-11.mit.edu in
/pub/linux/BETA/procps. The nice thing about this is: you don't have to
upgrade it for every kernel version (and thus ps -U is meaningless if
you use procps).

   MKJ wrote in c.o.l.a:

   tsx-11.mit.edu:/pub/linux/BETA/procps/procps.tar.Z is the latest
version of procps.  Most of the reported bugs (i.e. all I can remember
at the moment ;-) have been fixed, a man page for ps has been added,
and several new programs have been added and/or fixed.  A list of the
stuff provided:

             ps
             free (a real one, from Linus)
             uptime (this needs work to be good, mine is a hack)
             tload (a hack, but who cares?)
             xload (from drew)
             fuser (perl script prototype, hopefully the real thing in a
                    later release)


File: linux-faq.info,  Node: IV-11,  Next: IV-12,  Prev: IV-10,  Up: IV-00

(IV.11)  Since Linux 0.96b I have a lot of core file all over my disk. How can I sweep them away ?
==================================================================================================

   ANSWER: Use the following command

                     find / -name core -exec rm {} \;

   BTW: think twice before using this command, there might be a John
Core user on your system; this command will erase his mail :)

   If you never want to see another core file, put this line into your
/etc/rc file:

             for a bash user
                                     ulimit -c 0
             for a csh or tcsh user
                                     limit coredumpsize 0


File: linux-faq.info,  Node: IV-12,  Next: IV-13,  Prev: IV-11,  Up: IV-00

   IV.12)  I can only log-in as "root", is it normal ?

   ANSWER: No, add "rm -f /etc/nologin" in your /etc/rc.local file


File: linux-faq.info,  Node: IV-13,  Next: V-00,  Prev: IV-12,  Up: IV-00

   IV.13)  Sometimes my Linux virtual console get messed up when I cat
a binary file. The characters shown are above ascii 127, any clue ?

   ANSWER: (J. Stuckey stuckey@mrcnext.cso.uiuc.edu)

   It's a vt-100 thing I think.

     echo "^V^O"

should fix it.  Control-V is the literal-next character that stty
reports for me, and Control-O is the "magic" character that returns you
to livability.


File: linux-faq.info,  Node: V-00,  Next: V-01,  Prev: IV-13,  Up: Top

(V.) LINUX and DOS
******************

     This section is co-written by Mark Komarinski, A. V. Le Blanc and
     MM. Corsini. The official maintainer is Mark, if you have *any*
     questions, mail him at komarimf@craft.camp.clarkson.edu

     Last Update 03.08.93

* Menu:

*  V-01::  Is is possible to access DOS from Linux?
*  V-02::  Why use mtools if you can just mount a drive?
*  V-03::  How do I get the mtools package set up correctly?
*  V-04::  What is the format of the file /etc/mtools?
*  V-05::  Where can I find out more about mtools?
*  V-06::  How do I use the DOS file system?
*  V-07::   When I mount an MS-DOS disk, I get two lines of what seem
     to be error messages and the message: No bmap support.  Is my disk bad?
*  V-08::  I want to use the DOS file system with either conv=binary or
     conv=auto, but I want to convert text files from DOS to UNIX format,
     or from UNIX to DOS format.
*  V-09::  Where can I find out more about the DOS file system?
*  V-10::  This sounds me like a chicken and eggs problem, how can I
     install the mtools package at the very beginning.
*  V-11::  Could someone explain how to use rawrite?
*  V-12::  What is as86.tar.Z ?
*  V-13::  Turbo (Microsoft) Assembler won't compile the Linux boot code.
     In fact, some of the opcodes in these files look completely
     unfamiliar.  Why?
*  V-14::  What about the dos emulator (dosemu)
*  V-15::   I have a Stacker volume on my hard drive.  Can I access that?
*  V-16::   How about OS/2 HPFS partitions, or MacIntosh/Amiga floppies?
     Can I mount any of them?


File: linux-faq.info,  Node: V-01,  Next: V-02,  Prev: V-00,  Up: V-00

(V.01)  Is is possible to access DOS from Linux?
================================================

   ANSWER: Yes.

   (1) The mtools package allows you to access DOS files; it emulates
the DOS commands CD, COPY, DEL, DIR, TYPE, and others.

   (2)  Since approximately version 0.97 of the kernel, you can mount
DOS file systems as part of your Linux directory tree, providing you
have an appropriate mount command.

   (3)  A DOS emulator is in alpha test, which will allow some DOS
programs and utilities to run under Linux.


File: linux-faq.info,  Node: V-02,  Next: V-03,  Prev: V-01,  Up: V-00

(V.02)  Why use mtools if you can just mount a drive?
=====================================================

   ANSWER: Mtools is good if you want to do something quickly.  For
example, if you want to get directories on a bunch of floppies.  The
mount procedure requires you to mount the drive, get a directory, then
umount it. Mtools lets you get the directory with one command.

   (Dirk Hohndel:) Mtools is really fast when copying disks. I mount the
SLS directory of my SUN to my linux box and use mcopy to get the files
on the disks. 3 times faster than using xcopy under DOS


File: linux-faq.info,  Node: V-03,  Next: V-04,  Prev: V-02,  Up: V-00

(V.03)  How do I get the mtools package set up correctly?
=========================================================

   ANSWER: The mtools package is available in source form on most Linux
ftp sites.  The most recent version (As of Sept 1992) is mtools.n2, and
there are linked binaries and library (.a) files available as well (for
example, as part of MCC interim releases of Linux).  In the n2 release
of mtools, there is only one executable binary which works differently
depending on its name: you can create hard or symbolic links to it
named mcopy, mdel, mdir, mtype, etc; this is how the Makefile in
version n2 of mtools does it, and it saves several hundred kilobytes of
disk space.  Finally, you need the correct information in the file
/etc/mtools, which is described below.  Mtools also comes with the SLS
release of linux.


File: linux-faq.info,  Node: V-04,  Next: V-05,  Prev: V-03,  Up: V-00

(V.04)  What is the format of the file /etc/mtools?
===================================================

   ANSWER: A complete entry in the file /etc/mtools contains the
following fields: drive, device, fat, cylinders, heads, sectors,
offset.  Two examples of entries from /etc/mtools are

          A /dev/fd0 12 80 2 15
          C /dev/hda1 16 0 0 0

which defines the DOS disk A: as accessible through the device /dev/fd0,
having a 12-bit FAT, 80 cylinders, 2 heads, and 15 sectors per track;
DOS disk C: is accessible through the device /dev/hda1, has a 16-bit
FAT, and its geometry is simply that of the hard disk where it lives.
The last three numbers can be 0 if you wish; this allows mtools to try
to figure out the disk's geometry itself, and perhaps to fail.  A
12-bit FAT is common for floppies, but may occur in small hard disk
partitions.  A 16-bit FAT is common for hard disks.  This is an extract
of my /etc/mtools file:

     A /dev/fd0 12 0 0 0     # 3.5  1.4 Meg (autodetect)
     B /dev/fd1 12 0 0 0     # 5.25 1.2 Meg (autodetect)
     C /dev/hda1 16 0 0 0    # 1st partition of my Disk


File: linux-faq.info,  Node: V-05,  Next: V-06,  Prev: V-04,  Up: V-00

(V.05)  Where can I find out more about mtools?
===============================================

   ANSWER: There are two detailed README files in the mtools.n2
distribu- tion.  These files treat compiling and using mtools.  There
is a file README.mtools which treats only using mtools, which is a part
of the MCC interim version of Linux.


File: linux-faq.info,  Node: V-06,  Next: V-07,  Prev: V-05,  Up: V-00

(V.06)  How do I use the DOS file system?
=========================================

   ANSWER: The DOS file system is part of the kernel.  If you have a
kernel of level .97.1 or above, and an appropriate mount command, type

          mount -t msdos [-o conv=text] /dev/hda1 /dos

   to mount the partition /dev/hda1 as an MS/DOS file system on the
directory /dos.  You'll need a recent mount command, from at least
release 97 or later of the root disk.  Recent mount commands also
accept the options conv=binary|text|auto (default is binary) to specify
that text end-of-lines in DOS files are to be converted to UNIX
end-of-lines (by omitting carriage return characters) in no cases
(binary) or in all cases (text) or in cases that don't have 'well-
known binary extensions' (e.g., .EXE or .COM) (auto).


File: linux-faq.info,  Node: V-07,  Next: V-08,  Prev: V-06,  Up: V-00

(V.07)   When I mount an MS-DOS disk, I get two lines of what seem to be error messages and the message: No bmap support.  Is my disk bad?
==========================================================================================================================================

   ANSWER: No.  Since the dosfs is still in ALPHA mode, the two lines
are used for displaying information about the disk that was mounted,
just in case you have problems.  The 'No bmap support' message means
that you cannot run linux programs from that partition.  This has been
fixed in the latest release (alpha.9)


File: linux-faq.info,  Node: V-08,  Next: V-09,  Prev: V-07,  Up: V-00

(V.08)  I want to use the DOS file system with either conv=binary or conv=auto, but I want to convert text files from DOS to UNIX format, or from UNIX to DOS format.
=====================================================================================================================================================================

   ANSWER: Use the utility todos/fromdos which comes as part of the
dosfs package, currently (Sept 92) in released in version 8, or use the
flip utility by Rahul Dhesi.


File: linux-faq.info,  Node: V-09,  Next: V-10,  Prev: V-08,  Up: V-00

(V.09)  Where can I find out more about the DOS file system?
============================================================

   ANSWER: There is a README file included in dosfs.XX.tar.Z (the
current value of XX is 10)


File: linux-faq.info,  Node: V-10,  Next: V-11,  Prev: V-09,  Up: V-00

(V.10)  This sounds me like a chicken and eggs problem, how can I install the mtools package at the very beginning.
===================================================================================================================

   ANSWER: You have to use rawrite or the mount procedure.


File: linux-faq.info,  Node: V-11,  Next: V-12,  Prev: V-10,  Up: V-00

(V.11)  Could someone explain how to use rawrite?
=================================================

   ANSWER: Rawrite is a DOS util which write sequential sectors of a
formatted disk/floppy. When a floppy has been rawritten, you can (under
Linux) untar it (use x, v, z and f flags). As an example: a) under Dos
use rawrite

     rawrite
             source: kermit.z
             destination: a
     b) boot under Linux, and perform a tar
     tar zxvf /dev/fd0
     tar zxvp < /dev/fd0

   You DO NOT NEED TO MOUNT a rawritten disk


File: linux-faq.info,  Node: V-12,  Next: V-13,  Prev: V-11,  Up: V-00

(V.12)  What is as86.tar.Z ?
============================

   ANSWER: It's the port of Bruce Evans' minix assembler, you need it to
be able to recompile Linux at your convenience. In fact this is ONLY
used for boot/setup.S and boot/bootsect.S they create 80x86 REAL mode
code.


File: linux-faq.info,  Node: V-13,  Next: V-14,  Prev: V-12,  Up: V-00

(V.13)  Turbo (Microsoft) Assembler won't compile the Linux boot code.  In fact, some of the opcodes in these files look completely unfamiliar.  Why?
=====================================================================================================================================================

   ANSWER: The Linux boot codes are written in Bruce Evans' minix
assembler, which has the same opcodes as the original minix assembler
ported to linux get as86.tar.Z There are a few differences between
these and normal DOS assemblers.


File: linux-faq.info,  Node: V-14,  Next: V-15,  Prev: V-13,  Up: V-00

(V.14)  What about the dos emulator (dosemu)?
=============================================

   ANSWER: Dosemu is in alpha testing now, so it is very unstable and
crashes easily.  Some programs (such as earlier versions of Turbo
Pascal; TP 5.5 too) seem to work fine, but other programs such as dir
/p will crash the emulator.

   Look in your favorite FTP site for the dosemu kit.  For a
semi-complete list of programs that do and do not work under the
emulator, get the file /pub/Linux/docs/emusucc.txt at sunsite.unc.edu
or tsx-11.mit.edu.

