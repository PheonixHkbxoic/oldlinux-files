From:     Digestifier <Linux-Misc-Request@senator-bedfellow.mit.edu>
To:       Linux-Misc@senator-bedfellow.mit.edu
Reply-To: Linux-Misc@senator-bedfellow.mit.edu
Date:     Mon, 13 Sep 93 20:28:37 EDT
Subject:  Linux-Misc Digest #128

Linux-Misc Digest #128, Volume #1                Mon, 13 Sep 93 20:28:37 EDT

Contents:
  Re: *** Commercial app developer and Linux! *** (Jim Howard)
  Re: Windows Pop Quiz Re: NT versus Linux (Ted Lilley)
  Re: Windows Pop Quiz Re: NT versus Linux (Tim Smith)
  M-Script (Mark Morley)
  Re: *** Commercial app developer and Linux! *** (Kelly Murray)
  Re: Printer for Linux (Byron A Jeff)
  Re: Problem installing LINUX with OS/2 2.1 (John Henders)
  Re: Windows Pop Quiz Re: NT versus Linux (Brandon S. Allbery)

----------------------------------------------------------------------------

From: jahoward@iastate.edu (Jim Howard)
Subject: Re: *** Commercial app developer and Linux! ***
Date: Mon, 13 Sep 1993 19:23:19 GMT

In <CD5D6J.56q@cs690-3.erie.ge.com> teffta@cs690-3.erie.ge.com (Andrew R. Tefft) writes:

>Neat, I got to play with the SimCity demo on the Sun and thought about
>asking them if they'd consider a port to Linux. It's very addicting.

>This would be much better (for this non-dos-user, at least) than
>thinking about getting it running under dosemu!

>I think the price for the Sun version is $89, perhaps a bit high for a
>game, but of course much less than other Unix software. If the 
>price were the same as the dos version I would definitely buy.

This would be a really cool chance to give the sound driver something
to actually do too!  

Are there any other programs that integrate sound capabilities other
than porgrams specific to sound?

Jim
-- 
*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*_*
jahoward@iastate.edu                                                ISU EE/IEEE
=-=-=-=        LINUX --  Have you administered a real OS today?         =-=-=-=
==================== IPRT/ICEMT--Black Engineering 95E ======================== 

------------------------------

Crossposted-To: comp.os.ms-windows.advocacy
From: tlilley@HMC.Edu (Ted Lilley)
Subject: Re: Windows Pop Quiz Re: NT versus Linux
Reply-To: Ted_Lilley@hmc.edu
Date: Mon, 13 Sep 1993 19:41:53 GMT

In article <26uv1q$f9r@news.u.washington.edu> tzs@hardy.u.washington.edu (Tim Smith) writes:

   Ted <tlilley@muddcs.claremont.edu> wrote:
   >Basically, the salient aspects of operating systems that I can pull
   >out of this is that an OS is a collection of programs that:
   >    1. Manages resources at the hardware level.

   OK, Windows does this.

Yes and no.  For the most part, no.  Any device driver loaded in
config.sys becomes part of the DOS data structures to manage hardware.
Windows specific drivers do qualify for this, and since it has the
capability, I am more than willing to say that Windows satisfies this
requirement.

   >    2. Provides access to I/O devices and I/O time.

   OK, Windows does this, too.

I'll agree on the same principle as above.

   >    3. Allocates primary and secondary storage.

   OK, Windows does this.

I apply a different perspective on this one, although still in
Windows' favor.  The memory management is still done through a driver
loaded in config.sys, but in this case it is emm386.exe (or .sys),
which is included in the commercial package of Windows, so I'll say
that "belongs" to Windows.  However, that is only for primary storage.
Windows does not manage secondary storage.  Secondary storage is
managed solely through DOS with the exception of the swap file in most
cases.  The "most cases" qualifier refers to the fact that the
direct-access swapping occurs on WD-compatible controllers only, so in
some cases, secondary storage is managed solely through DOS.  Windows
fails this requirement, which is much like the next point.

   >    4. Provides a file system and command language.
   >    (whether keyboard or mouse based).

   Now it gets tricky.  What does this mean?  For example, if I run Unix
   on a diskless workstation connected to an NFS server, is Unix still
   an operating system?  It's not directly providing the file system.

The key difference is the residency of the file system interface
(which is all that's of importance to the upper layers).  In Unix, it
is in the operating system, whereas with Windows, it is in DOS.  Take
away the NFS mount, you still have a file system handler in the OS.
Take away DOS, you have nothing.  A slight discrepancy that can make a
world of difference when you want to change things.  That aside, your
analogy is correct...in the all-embracing vision of the way things
are, both accomplish the same job.  Tracing the passing of information
through the layers doesn't give you much of a difference of the way
the file system is being handled (almost obviously, since both systems
are *supposed* to handle filing in roughly the same manner).  It is when
you want to nail down specific interfaces to specific packages that
you run into trouble.  The file system interface does not belong to
the Windows package.  Hence you can't call it an OS in it's own right
on this score either.

[deletia]

   Note also that items 1 through 4 all break down in the presence of a
   virtual machine system, like IBM's VM system.  It seems to me to be
   incorrect to say that XXX is an operating system when running on bare
   hardware, but it is no longer an operating system when it is run under
   a virtual machine.

In these cases, the operating system you are running is not simply the
"os" in the virtual machine (you can call it an operating system if it
stands in its own right, though).  The operating system (the
*collection* of programs that run your hardware) is in that case not
confined to one commercial package or another.  That is why, for
example, the Taligent micro-kernel runs "personality modules", not
"operating systems".

   I've got some objections to the part about a command language in
   item 4.  Certainly, many systems built a command language right into
   the guts of the system (e.g., TOPS-10), but Unix doesn't do this.

You fail to recognize that a command processor is indeed one of the
collection of programs that runs your hardware, i.e. part of the OS.

   >    5. Schedules and protects processes from one
   >    another.
   >
   >With regards to this definition, is Windows an OS?  No.  Is DOS

   Windows does schedule and protect, so #5 is met.  Which item do
   you find not met?

The ones previous.  #5 is not a point of contention.

   >at the time of writing).  The one that does deal with the PC
   >sets the "disc operating system" as a classification unto itself.
   >If you take the simplistic view that Dos schedules processes one
   >at a time, and hence doesn't need to protect processes from one
   >another, then you satisfy criteria #6, and DOS is an OS.  Few
   >of these books would view DOS as an OS, however, because most
   >deem multitasking as a basic element of operating systems.

   I think you'll find that they view multitasking as a basic element because
   they intend to look at multitasking OSes.  If you look at books that also
   give some coverage to batch processing OSes (e.g., Deitel or Shaw), I
   think you'll find that they don't make multitasking a basic element.

I have read Deitel, and I didn't get that much of a different
impression from it, but then again, I wasn't truly concerned with this
question at the time.

[deletia]

   I like what Deitel has to say.  His definition is not that important,
   actually.  What is important is that he gives two.  He gives one that
   he says would be used in the 60s, and then points out how the way we
   build computers has changed, and gives a more modern definition.  The
   thing I like about this is that it suggests that the definition should
   be flexible, changing to match the way computers are actually built.
   This seems to me to be the best way to go.  Being too rigid will trip
   you up when someone comes along and does something weird (like hooks
   you up to a network and takes something that you thought was part of
   the OS and sticks it on a server somewhere).

Yes, the definition should be flexible.  My survey suffers from a
lack of more recent writing, but like I said, those were random
selections.  If I were being paid for it, I might have put a little
more effort into it :).  However, I stand by my analyses (as my
analyses) for the reasons above.  I think the criteria for an OS I
pulled out of the sources is a fairly accurate appraisal of what even
a modern OS is.

   Personally, I like my definition.  If writing XXX is a job I would have
   considered taking back in the days when I viewed myself as an OS hacker,
   and I don't have to write it in 80x86 assembly language, then XXX is
   an operating system or part of an operating system. :-)

Heh, I never said Windows wasn't part of the operating system.
It surely is since it participates in the criteria above.  Windows
(the commercial package) does not satisfy the criteria for being an
operating system in it's own right, though.  I think you could agree
with that.

--
   -----------------------------------------------------------------------
   |       Ted Lilley              "If God is omniscient, then It is a   |
   |       CS Major                 superset of the universe."           |
   |       Harvey Mudd College                                           |
   -----------------------------------------------------------------------

------------------------------

From: tzs@hardy.u.washington.edu (Tim Smith)
Crossposted-To: comp.os.ms-windows.advocacy
Subject: Re: Windows Pop Quiz Re: NT versus Linux
Date: 13 Sep 1993 20:50:49 GMT

Brandon S. Allbery <bsa@kf8nh.wariat.org> wrote:
>>>     1. Manages resources at the hardware level.
>>>     2. Provides access to I/O devices and I/O time.
>>
>>OK, Windows does this.
>
>MS-Windows does *part* of this.  DOS does the rest.
>
>I have, however, reached the conclusion that this is spurious.  Traditional
>definitions of "operating system" break down when applied to the results of
>modern OS development, in particular to true microkernels like Mach 3.x.  They

It's not just modern stuff that breaks down those traditional definitions.
For example, what about a system that maps a peripheral (e.g., a frame
buffer) into the address space of a process and lets the process directly
manipulate it?  Does that system now cease to be an operating system
because there exists hardware that it is no longer directly controlling?

>>>     5. Schedules and protects processes from one
>>>     another.
>>>
>>>With regards to this definition, is Windows an OS?  No.  Is DOS
>>
>>Windows does schedule and protect, so #5 is met.  Which item do
>>you find not met?
>
>Does MS-Windows actually insure that each process does not have access to any
>other process's pages?  How about the system's pages?  (I'm not needling
>anyone, I honestly don't know.  Previous versions didn't do this, but that
>says nothing about the current version.)

DOS processes are protected from each other.  (Note: I am assuming that
an attempt to protect is sufficient.  If not, then there aren't very
many opeating systems!).  Windows processes are much less protected.

How much protection is required to qualify as an OS?  Does Minix count
as an OS, for example?  It provides no protection.  Neither did PC/ix, 
yet most people seemed to count that as an operating system.

>If we are using the strict technical definition of "scheduling", MS-Windows
>does scheduling.  *Scheduling is not multitasking, it is an aspect of
>multitasking*.  Does the definition of "operating system" being used
>distinguish between pre-emptive and cooperative multitasking?  MS-Windows
>does not pre-emptively multitask its applications (but it does pre-emptively
>multitask DOS applications) but it 8does* schedule them.

Earlier, you said DOS was an OS, yet DOS does not pre-emptively schedule,
so clearly that is not required for operating systemhood.

I think the concept of "operating system" is outmoded.  The better concept
is "non-application services," which is those services provided for application
programs to build upon.  Non-application services include, but are not limited
to, scheduling, memory management, file system management, networking, user
authentication, security, user interface, etc..

--Tim Smith

------------------------------

Crossposted-To: comp.os.linux
Subject: M-Script
From: morley@suncad.camosun.bc.ca (Mark Morley)
Date: 13 Sep 93 12:59:28 PDT

Hello all,

Some of you (very few of you, actually) are aware that I was writing some
BBS software for Unix (Linux, to be specific).  Here's an update:

I started over.

What I've done now is to create a new programming language called
M-Script.  It is an interpreted language but it is tightly written and
very fast.  It looks similar to dBase or BASIC.  Anyway, M-Script is
designed for writing BBS's and other on-line systems (MUD's etc).  It has
many built-in functions that deal with ANSI colors/graphics, file
browsing, hyper text screens, menus, data entry, blah, blah, blah.  Of
particular interest to many of you may be its built-in Internet apps like
finger, telnet, FTP, etc.

I'm now re-writing my BBS in M-Script.  It's going a _LOT_ faster now -
even though I'm basically creating a new programming language _and_ a BBS
written in that language at the same time.  Loads'o'fun.  Really.  I mean it.

If you want to see what M-Script can do, telnet to buckyball.camosun.bc.ca
(134.87.16.6) and log in as 'guest' (password is also 'guest').  Note that
I've currently limited the guest account to a maximum of 3 simultaneous
logins, so if it won't let you in try again in a few minutes.

*************************************************************************
NOTE: What you will see on buckyball is a mostly useless mock BBS.  It
exists primarily for me to test M-Script and BBS concepts.  It changes
from day to day.  If you're really lucky you'll catch it just as I'm
making changes and it'll dump out on you.  Help screens are there but are
incomplete, etc.  There is _very_ little that you can actually do.  Don't
assume this is what my real BBS will look like.  This is just a SAMPLER.
If you don't like the mock BBS don't freak out.  With M-Script it could
have any interface you want: command line, menu, hot-keys, RIP, GTP, etc.
*************************************************************************

People who are interested in M-Script can drop me a note.  I'll be looking
for a half dozen or so beta testers in the next week or so.  M-Script
ain't gonna be free, but beta testers will get a free copy.  If you want
to be a beta tester, tell me why and how you plan to make use of M-Script.
When I've finished writing the prliminary programmers' reference I'll send
a binary of the M-Script interpreter (for Linux or SunOS - your choice)
and the reference to at most 10 testers who I feel are _really_ gonna put
it through its paces.

Mark
morley@camosun.bc.ca

------------------------------

From: kem@prl.ufl.edu (Kelly Murray)
Subject: Re: *** Commercial app developer and Linux! ***
Date: 13 Sep 1993 22:20:45 GMT

>> On 10 Sep 1993 20:56:18 GMT, kem@prl.ufl.edu (Kelly Murray) said:
 >In article <26qpliINN1f0@no-names.nerdc.ufl.edu> kem@prl.ufl.edu (Kelly Murray) writes:
 > Which version of Linux will SimCity or your product be ported to?
 > -Kelly Murray
>>michaelkjohnson said:
>I'm not sure what you mean by this question.  The current version at
>the time, I imagine, and it should keep working as Linux versions progress.
>Do you mean "SLS or MCC or <foo> or <bar>"?  In that case, I explain:
>It doesn't matter!  It is the kernel that matters -- the distribution
>is (or at least should be...) just the utilities that come with a
>kernel.  The port I'm talking about should work on a properly
>configured Linux system, whether it is put out by MCC, DEBIAN,
>Linux/PRO, Purple, or even SLS (modified to work, of course. Grrrr.)

>Which question were you asking, and was your question answered?

I thought different Linux versions are not binary compatible,
so you must select a version you will support.  Isn't this true?
Here is a recent posting to this group:

>frerk@tk.telematik.informatik.uni-karlsruhe.de (Frerk Meyer) writes:
> >Linux, as any OS in the world, will never be finished.
> >It is yet stable, powerful and supports more Hardware than
> >OS/2 and Windows NT together.
>It is not stable yet. The networking code is being under complete
>overhaul, and has not stabilized as to yet. There are significant changes
>in the kernel being done to facilitate new applications. The system interface
>and capabilities change drastically, and binaries are not compatible. New
>binary support (ELF, perhaps COFF) is expected.
> >So make the next patchlevel the version 1.0!
> >Or does anyone remember MS-DOS 1.0, OS/2 v1.0, Windows 1.0
> >as being perfect, bug free and finished?
>I would wait for 1.0 until all of the kernel and file system features
>expected to remain have stabilized a bit.

And another post:

|> In article <MUTS.93Sep12103533@compi.hobby.nl>,
|> Peter Mutsaers <muts@compi.hobby.nl> wrote:
|> >This suggests that there are different versions. I think however that
|> >when it will be compiled on a kernel that is not too old (or somewhat
|> >below) it will run everywhere. Especially when statically linked. They
|> >might provide two binaries, one dynamically thinked and one
|> >statically.
|> >

Has anyone ever checked if new binaries work on older kernel releases?  
Do the archive sites even keep around older version very long?
There are lots of people using Linux, but which version is used the most?
Once commercial products are being sold, doesn't this create a lot
of pressure to make sure old binaries still work and constrain future progress.
Is anyone responsible for maintaining binary compatibility?

|>   Don't they have to have either a dynamically-linked program or make 
|> unliked objects available?  libc *is* covered under the LGPL.
|> Jonathan Lennox

I can see this being a problem for proprietary products like SimCity.

The cost of commercial products for Linux just might be /more/ expensive
than DOS or SCO if supporting/maintaining them is more time consuming.

-Kelly Murray



------------------------------

From: byron@cc.gatech.edu (Byron A Jeff)
Subject: Re: Printer for Linux
Date: Tue, 14 Sep 1993 00:08:01 GMT

In article <CDB0wC.ICI@undergrad.math.uwaterloo.ca>,
Wilkin Chau <wkwchau@neumann.uwaterloo.ca> wrote:
>I am going to buy a printer for my PC (run both DOS and Linux).  I would
>like to know whether there is any software under Linux allow me to print
>a postscript file with a Bubble jet printer ??

Yup. It's called ghostscript. Check it out.

BAJ

>
>Thanks in advance.
>
>Wilkin


---
Another random extraction from the mental bit stream of...
Byron A. Jeff - PhD student operating in parallel!
Georgia Tech, Atlanta GA 30332   Internet: byron@cc.gatech.edu

------------------------------

Crossposted-To: comp.os.os2.setup,comp.os.linux.help,comp.os.os2.misc
From: jhenders@jonh.wimsey.bc.ca (John Henders)
Subject: Re: Problem installing LINUX with OS/2 2.1
Date: Mon, 13 Sep 1993 20:28:50 GMT

gilbert@yalevm.ycc.yale.edu (Howard Gilbert) writes:

I still boot Linux using the boot diskette.  Can anyone shed light on 
>installing LILO on disk in this kind of a configuration?

        The easiest thing to do is install lilo on the boot floppy. It's 
as fast as having lilo on the hard drive, with none of the hassles.


-- 
John Henders       GO/MU/E d* -p+ c+++ l++ t- m--- s/++ g+ w+++ -x+

------------------------------

Crossposted-To: comp.os.ms-windows.advocacy
From: bsa@kf8nh.wariat.org (Brandon S. Allbery)
Subject: Re: Windows Pop Quiz Re: NT versus Linux
Date: Mon, 13 Sep 1993 23:59:43 GMT

In article <272mf9$dhk@news.u.washington.edu> tzs@hardy.u.washington.edu (Tim Smith) writes:
>Brandon S. Allbery <bsa@kf8nh.wariat.org> wrote:
>>I have, however, reached the conclusion that this is spurious.  Traditional
>>definitions of "operating system" break down when applied to the results of
>>modern OS development, in particular to true microkernels like Mach 3.x.  They
>
>It's not just modern stuff that breaks down those traditional definitions.
>For example, what about a system that maps a peripheral (e.g., a frame
>buffer) into the address space of a process and lets the process directly
>manipulate it?  Does that system now cease to be an operating system
>because there exists hardware that it is no longer directly controlling?

True.  But that only proves my point:  the traditional definition of
"operating system" isn't flexible enough to properly describe modern operating
systems.

>>Does MS-Windows actually insure that each process does not have access to any
>>other process's pages?  How about the system's pages?  (I'm not needling
>>anyone, I honestly don't know.  Previous versions didn't do this, but that
>>says nothing about the current version.)
>
>How much protection is required to qualify as an OS?  Does Minix count
>as an OS, for example?  It provides no protection.  Neither did PC/ix, 
>yet most people seemed to count that as an operating system.

True.  I should have said "insofar as the hardware permits"...

>>If we are using the strict technical definition of "scheduling", MS-Windows
>>does scheduling.  *Scheduling is not multitasking, it is an aspect of
>>multitasking*.  Does the definition of "operating system" being used
>>distinguish between pre-emptive and cooperative multitasking?  MS-Windows
>>does not pre-emptively multitask its applications (but it does pre-emptively
>>multitask DOS applications) but it 8does* schedule them.
>
>Earlier, you said DOS was an OS, yet DOS does not pre-emptively schedule,
>so clearly that is not required for operating systemhood.

DOS's scheduler is the trivial case:  only one process can run at any given
time, so the "scheduler" just runs the sole runnable process.  As the original
poster mentioned, emphasis was placed on multitasking OSes in the references
from which he assembled the definition.

>I think the concept of "operating system" is outmoded.  The better concept
>is "non-application services," which is those services provided for application

Well, I don't think the concept is outmoded so much as its definition is
outmoded.  Which is pretty much what I was trying to get at above.  The sole
constant in the definition of an "operating system", so far as I can see
(meaning:  since I'm not omniscient, I may well have overlooked something in
either direction) is that it is a collection of system resource and service
APIs --- not, note, that this collection must be provided by a single entity.
Thus, DOS is an OS, as is DOS+MS-Windows, DOS+DESQview, DOS+GO32 (which
provides VM and paging for its clients) (substitute your own favorite DOS
extender), combinations thereof (DOS+MS-Windows+X, anyone?), true microkernels
like Mach 3.x, partial microkernels like Mach 2.x and NT, multithreaded
kernels like SunOS 5.x and OS/2 2.x (I think), "monolithic kernels" like
traditional *ix, etc.  Note also that by this definition Linux+XFree86 is a
"different" operating system from Linux alone, since Linux+XFree86 provides a
different screen API.

++Brandon
-- 
Brandon S. Allbery         kf8nh@kf8nh.ampr.org          bsa@kf8nh.wariat.org
"MSDOS didn't get as bad as it is overnight -- it took over ten years
of careful development."  ---dmeggins@aix1.uottawa.ca

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Misc-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux.misc) via:

    Internet: Linux-Misc@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    sunsite.unc.edu				pub/Linux

End of Linux-Misc Digest
******************************
