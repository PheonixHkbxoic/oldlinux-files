From:     Digestifier <Linux-Misc-Request@senator-bedfellow.mit.edu>
To:       Linux-Misc@senator-bedfellow.mit.edu
Reply-To: Linux-Misc@senator-bedfellow.mit.edu
Date:     Sat, 20 Nov 93 10:37:02 EST
Subject:  Linux-Misc Digest #321

Linux-Misc Digest #321, Volume #1                Sat, 20 Nov 93 10:37:02 EST

Contents:
  Re: Fastest graphics card under linux?? (Harald Koenig)
  Re: SunWorld on Linux (Gregor Hoffleit)
  Re: Don't use Motif for free sw: it now requires runtime royalties! (Nhi Vanye)
  Re: Minix fs editor(viewer) for file recovery. + Docs on the fs. (Robert Sanders)
  Re: how fast is linux? (David Barr)
  Mosaic-2.0+term, no luck with the patches (System Administrator)
  Re: Linux performance?? (Dr Eberhard W Lisse)
  Re: how fast is linux? (Vernard C. Martin)
  Re: how fast is linux? (Philip Brown)

----------------------------------------------------------------------------

From: koenig@ceres.tat.physik.uni-tuebingen.de (Harald Koenig)
Subject: Re: Fastest graphics card under linux??
Date: 19 Nov 93 16:04:35 GMT

In <1993Nov19.105719.6512@kth.se> nv91-ceh@mumrik.nada.kth.se (Carl-Eric Henning) writes:


>I've been told that the S3805 cards are much faster than the ET4000/W32
>cards. Is this true?

yes and no. the accelerator part of the ET4000/W32 isn't supported 
in XFree86-2.0 (it's used as plain ET4000 frame buffer card).
There are rumors in DOS/Windows based adverticements that ET4000/W32
should be faster than S3, don't know (only markting? at least 
for Linux this is definitivly NOT true yet).

>And another question: When I start up linux, it checks if the card installed
>has a ET4000 compatible chip or not. Does this mean that ET4000 based cards
>run faster under linux than others?

ET4000 is the best plain-VGA card chip I know of (compared to Trident8900 etc.)

For high end accelerator cards I'd vote for a S3-928 card:
I'm using a ELSA Winner1000 VLB with 1MB VRAM and get ~105k Xstones
with 1024*768*256 at 90 or 100 Hz refresh rate (110MHz pixel clock)
on my 486/dx2-66 with 16mb ram and XFree86-2.0.

Harald
-- 
Harald Koenig, Inst.f.Theoret.Astrophysik  (koenig@tat.physik.uni-tuebingen.de)

    All SCSI disks will from now on be required to send an email
         notice 24 hours prior to complete hardware failure!

------------------------------

Crossposted-To: comp.os.linux
From: flight@mathi.uni-heidelberg.de (Gregor Hoffleit)
Subject: Re: SunWorld on Linux
Date: Fri, 19 Nov 93 16:23:33 GMT

Shun-Chang Tsai (stsai@scws1.harvard.edu) wrote:
: The October issue of SunWorld ran an article on PC UNIX. They reviewed
: BSD/386, SCO Open Desktop, Solaris 2.x, and UnixWare. SCO Open Desktop
: was given the most favorable review.

: Linux was mentioned in a sidebar briefly, however, only as Softlanding
: Linux Systems.  Nothing was said about the origin of Linux, etc. The
: ftp sites were given as well as SLS's and Yggdrasil's communication
: addresses. A reader who does not know what Linux is likely to
: misinterpret the sidebar to mean that SLS developed the system.

Nice. This shows who is better not mentioned in the SUN world: Linux and
NeXTSTEP. Maybe they are afraid of them in their SUN world ?

        Gregor

--
| Gregor Hoffleit                          admin MATHInet |
| MAIL: Mathematisches Institut   PHONE: (49)6221 56-5771 |
|       INF 288, 69120 Heidelberg / Germany  FAX: 56-3812 |
| EMAIL: flight@mathi.uni-heidelberg.de (NeXTmail)        |

------------------------------

From: offer@robots.ox.ac.uk (Nhi Vanye)
Subject: Re: Don't use Motif for free sw: it now requires runtime royalties!
Date: Fri, 19 Nov 1993 16:13:54 GMT

In article <2cfn1r$o7j@klaava.Helsinki.FI> pcg@aber.ac.uk (Piercarlo Grandi) writes:
>Perhaps this is a johnny-come-lately sort of posting, but the subject
>matter is important enough that it deserves repeating, if that's the
>case.
>
>I have recently learned that the Motif library implementation by OSF is
>now distributed with a license that requires royalty payments for every
>_binary_ distributed that contains parts of the OSF Motif runtime
>libraries when the binary is for a machine that does not already have a
>Motif license.
>
>This effectively means that all those that want their sw to be generally
>free should stop using Motif -- there is no alternative to OSF's Motif
>implementation for all of the free OSes that are currently so popular (I
>don't know of _any_ other commonly available library with an API
>ompatible with that of OSF's Motif implementation).
>
>Note that this new license restriction makes Motif based sw hard to
>distribute *only* on free OSes: most commercial OSes nowadays are sold
>bundled with a runtime Motif license, so there is no need to pay OSF a
>runtime library royalty when distributing a Motif binary for say an IBM
>or HP workstation (and soon, thanks to COSE, for Sun too).
>
>Therefore all authors and prospective authors of free sw should avoid
>using Motif:
>
>  their programs will not be distributable in binary form for any free
>  OS (BSD, Linux, Mach 3.0, and so on), and using source distributions
>  will require the purchase of a rather expensive (when compared to the
>  royalty paid by a manufacturer to bundle Motif on all their machines)
>  full Motif package, if available.
>
>There are several alternatives to Motif:
>
>  * the XView library, donated by Sun, is rather high quality and easy
>    to program into.
>
>  * the Interviews library, for C++ programmers, is also very high
>    quality and easy to program for, and rumour is that it will become
>    a standard part of X11R6.
>
>  * the venerable Athena widget library is standard with most all X11
>    packages, and there are several high quality high level widgets
>    available in the Free Widget Foundation collection, which cover
>    the functionality of the more sophisticated XView/Motif/Interviews
>    widgets.
>
>Finally a personal note: I think that this decision of the OSF is
>extremely ill considered; I am hard pressed to think of *any* supplier
>of graphical libraries of any sort that requires the payment of a
>royalty on every copy of a program using a runtime library.
>
>Runtime library royalties have not been a common industry practice for
>many years now; they were quick to disappear in the early eighties
>(largely thanks to Borland).
>
>It is also interesting to note that this significant tightening of the
>license terms seems *designed* to hurt *only* the development of free
>sw, and of free OSes: the OSF Motif l&f and implementation are an ever
>more popular industry standard, and virtually all workstation
>manufacturers already supply a (very cheap to them) Motif runtime
>license with every copy of their proprietary OSes.
>
>Perhaps the OSF founders feel threatened by Linux, now that the
>ATT/USL/SUN axis is conquered?
>
>--
>Mail submissions for comp.os.linux.announce to: linux-announce@tc.cornell.edu
>PLEASE remember Keywords: and a short description of the software.

This is all (what we in the trade call ) hogwash.

While using run time libraries is nice (smaller binaries), it is still
quite common to use static libraries on a number of OS's.

What is wrong with distributing statically linked binaries. The motif
I bought comes with two versions of the libraries,  run time and static. To quote from the the readme :-

  1) Metro Link provides OSF/Motif 1.2.2 in both static and
     shared versions. By default, when you link an application
     using -lXm, the linker links using the shared version of the
     library. To override this, you need to explicitly specify
     the static Motif library, i.e:

     Normal way to link a Motif application (i.e. uses shared
     library):

     # cc -o mdemo mdemo.c -lXm -lXt -lX11

     To build a static motif binary:

     # cc -o mdemo mdemo.c /usr/lib/libXm.a -lXt -lX11

     Why build a static library? The static version is
     distributable to others free of charge. I.e. you do not need
     to pay a per-copy royalty as you would if you shipped the
     shared version with a copy of libXm.so.1.2.2. The static
     version is also used when debugging (-g).


I hope this has encouraged more people to not write off using Motif in
free software.

vanye.


------------------------------

From: gt8134b@prism.gatech.EDU (Robert Sanders)
Subject: Re: Minix fs editor(viewer) for file recovery. + Docs on the fs.
Date: 20 Nov 93 02:05:01 GMT

In <2cj75j$n2f@vishnu.jussieu.fr> card@masi.ibp.fr (Remy CARD) writes:

>In article <2ci98f$n9d@tyana.denkart.be>,
>Serge Robyns <sr@tyana.denkart.be> wrote:
>] I was just thinking on such a thing for ext2 fs. The idea just came in after
>] a HP-UX troubleshooting course where I learned about fsdb (FileSystem
>] DebuGger). I was just wondering in anybody did it for the ext2fs already,
>] otherwise I would like to take the chalenge.

>       Such a beast already exists.  It's called debugfs and is included in
>Theodore T'so's new version of e2fsck available on tsx-11.mit.edu in
>/pub/linux/ALPHA/ext2fs.  debugfs understands the ext2 fs structure (in fact,
>it uses a library which understands it) and is very useful (it helped me to
>realize that the ext2 fs kernel code contained some bugs relative to the
>times management).

Long ago when my first filesystem crash happened, Ted sent me an early
copy of debugfs and the ext2fs library, and it saved my disk.  When
my second fs crash happened, I used it to again.  I sent some
diffs for debugfs to Ted (some of which are in the "released" version
of debugfs).  Even a simple tool like debugfs can make a lot of
difference; if I'd had to use a hex editor, I'm not sure I would
ever have recovered my disk.

(And the fs crashes were *not* due to ext2fs instability, so get yer
 hand off that 'f' key)

I've modified Perl 4.036 to add access functions to most of the ext2fs
library, including {directory,inode,block} iterator callbacks to Perl
functions.  fsperl will also include curses access functions (which can
work with either standard Linux curses or ncurses).  The first thing
I'm going to do once the actual Perl interpreter is done is write a 
full-screen fsdb in fsperl.


-- 
 _g,  '96 --->>>>>>>>>>   gt8134b@prism.gatech.edu  <<<<<<<<<---  CompSci  ,g_
W@@@W__        |-\      ^        | disclaimer:  <---> "Bow before ZOD!" __W@@@W
W@@@@**~~~'  ro|-<ert s/_\ nders |   who am I???  ^  from Superman  '~~~**@@@@W
`*MV' hi,ocie! |-/ad! /   \ss!!  | ooga ooga!!    |    II (cool)!         `VW*'

------------------------------

From: barr@pop.psu.edu (David Barr)
Subject: Re: how fast is linux?
Date: 20 Nov 1993 02:14:58 GMT

In article <1993Nov19.183401.20344@rosevax.rosemount.com>,
Grant Edwards <grante@hydro.rosemount.com> wrote:
>Michael H Price II (mhp1@Isis.MsState.Edu) wrote:
>: I am thinking about upgrading to linux but a friend told me it ran
>: slow.
>
>He's right, man!  I run Linux and X11 on a 368DX-25, 8MB, no cache and
>a herc monochrome board.  X performance and usability suck rocks
>compared to a SPARC-10 with 32MB, a 19 inch color monitor.

Oh come on.

Your setup amounts to a Honda Civic with a 2-foot long banana stuck
up the tailpipe.

If you had a reasonable graphics card, then you would have acceptable
performace.

>So skip Linux and get a SPARC-10 with a nice 19 inch monitor.

Sure, and pay 5 times the price.  (a 386/25 is perhaps $2K.  A
SPARC 10 model 30 is around $10K)

--Dave
-- 
"No man is good enough to govern another man without that other's consent"
- Abraham Lincoln

------------------------------

From: root@cac.washington.edu (System Administrator)
Crossposted-To: comp.infosystems.www,comp.os.linux.help
Subject: Mosaic-2.0+term, no luck with the patches
Date: 20 Nov 93 02:59:39 GMT


Anybody get these patches to work? The patches were posted on the term 
channel (by Ronald Florence (ron@mlfarm.com)) don't seem to work at all. 
I've tried  connecting to the standard WWW home page, my own WWW server 
home page, and various others with no luck in connecting. I've also 
tried using tredir to redirect my port 80 to a valid WWW server and 
connecting to localhost and that failed as well. Are these patches for Linux 
or what?

If ANYONE can get these patches to work, PLEASE let me know. 

Here's a repost of the patches from the TERM channel in all it's fullness:

====================================================
====================================================
From: "Linux Activists" <linux-activists@joker.cs.hut.fi>
To: "Linux-Activists" <linux-activists@joker.cs.hut.fi>
Reply-To: "Linux-Activists" <linux-activists@joker.cs.hut.fi>
X-Note1: Remember to put 'X-Mn-Key: TERM' to your mail body or header
Subject: Linux-Activists - TERM Channel digest. 93-10-13-1:17
X-Mn-Key: TERM
Sender: owner-linux-activists@joker.cs.hut.fi
Message-Id: <93Nov13.044525eet.61956-3@niksula.hut.fi>
Date: Sat, 13 Nov 1993 04:45:19 +0200


Topics:
         Term patch for Mosaic-2.0


======================================================================

From: ron@mlfarm.com (Ronald Florence)
Subject: Term patch for Mosaic-2.0
Date: Fri, 12 Nov 1993 22:02:34 +0200


Mosaic-2.0, just released from NCSA, is even easier to port to term
than xmosaic-1.2.  I used the new C_BINDN call from term-1.08, which
much simplifies the ftp code.

This is the entire README.  Install the Mosaic-2.0 distribution, then
this patch, configure the rest of the Makefile to suit your local
installation, and `make'.  I compiled with freeWAIS-0.1 for direct
WAIS access, which requires a couple of simple patches in the freeWAIS
code.  

Mosaic-2.0 is a decided improvement, especially with term.  


                                Ronald Florence
                                ron@mlfarm.com



*** Makefile.orig       Tue Nov  9 04:21:59 1993
--- Makefile    Fri Nov 12 09:08:54 1993
***************
*** 35,44 ****
  #### For Convex whatever, do -DCONVEX
  #### For SCO ODT 3.0, do -DSCO -DSVR4 -DMOTIF1_2
  #### For Motorola SVR4, do -DSVR4 -DMOTOROLA -DMOTIF1_2
! sysconfigflags = 
  
  #### System libraries.
! syslibs = -lPW -lsun -lmalloc
  #### For AIX 3.2
  # syslibs = -lPW -lbsd
  #### For most other Motif platforms:
--- 35,44 ----
  #### For Convex whatever, do -DCONVEX
  #### For SCO ODT 3.0, do -DSCO -DSVR4 -DMOTIF1_2
  #### For Motorola SVR4, do -DSVR4 -DMOTOROLA -DMOTIF1_2
! sysconfigflags = -DTERM -I/usr/local/src/term
  
  #### System libraries.
! # syslibs = -lPW -lsun -lmalloc
  #### For AIX 3.2
  # syslibs = -lPW -lbsd
  #### For most other Motif platforms:
***************
*** 56,61 ****
--- 56,62 ----
  #### For Motorola SVR4:
  # syslibs = -lnsl -lsocket -lgen
  
+ syslibs = /usr/local/src/term/client.a -lm
  
  #### X include file locations -- if your platform puts the X include
  #### files in a strange place, set this variable appropriately.  Else
***************
*** 134,143 ****
  
  #### -lm is required for freeWAIS 0.1, as ceil() is used.
  
! waisroot = /X11/marca/freeWAIS-0.1-sun
  waisflags = -DDIRECT_WAIS -I$(waisroot)/ir
  waislibdir = $(waisroot)/bin
! waislibs = $(waislibdir)/inv.a $(waislibdir)/wais.a $(waislibdir)/libftw.a -lm
  
  
  #### Customization flags:
--- 137,146 ----
  
  #### -lm is required for freeWAIS 0.1, as ceil() is used.
  
! waisroot = /usr/local/src/freeWAIS-0.1
  waisflags = -DDIRECT_WAIS -I$(waisroot)/ir
  waislibdir = $(waisroot)/bin
! waislibs = $(waislibdir)/inv.a $(waislibdir)/wais.a $(waislibdir)/libftw.a
  
  
  #### Customization flags:
*** src/grpan-www.c.orig        Sat Sep  4 05:03:11 1993
--- src/grpan-www.c     Thu Nov 11 15:55:17 1993
***************
*** 61,67 ****
--- 61,71 ----
  #include "HTAnchor.h"
  #include "HTParse.h"
  
+ #ifdef TERM
+ #include <client.h>
+ #endif
  
+ 
  /****************************************************************************
   * name:    HtLoadHTTPANN (PRIVATE)
   * purpose: Issue a command to a group annotation server.
***************
*** 87,92 ****
--- 91,99 ----
        int fmt, compressed;
        int command_len;
        HTParentAnchor *anchor;
+ #ifdef TERM
+       char host[255];
+ #endif
  
        /*
         * Set up defaults:
***************
*** 101,106 ****
--- 108,116 ----
  
        tptr = HTParse(arg, "", PARSE_HOST);
        status = HTParseInet(sin, tptr);
+ #ifdef TERM
+       strcpy(host, tptr);
+ #endif
        free(tptr);
        if (status)
        {
***************
*** 110,115 ****
--- 120,135 ----
        /*
         * Now, let's get a socket set up from the server for the data.
         */
+ #ifdef TERM
+       s = connect_server(0);
+       if (s  < 0 ||
+           send_command(s, C_PORT, 0, "%s:%d", 
+                        host, ntohs(soc_address.sin_port)) < 0)
+         status = -1;
+       else
+         send_command(s, C_DUMB, 1, 0);
+ #else
+ 
  #ifdef DECNET
        s = socket(AF_DECnet, SOCK_STREAM, 0);
  #else
***************
*** 117,122 ****
--- 137,143 ----
  #endif
        status = connect
            (s, (struct sockaddr*)&soc_address,sizeof(soc_address));
+ #endif /* TERM */
        if (status < 0)
        {
                return(HTInetStatus("connect"));
*** libwww2/HTFTP.c.orig        Fri Nov  5 04:13:36 1993
--- libwww2/HTFTP.c     Fri Nov 12 14:40:12 1993
***************
*** 44,49 ****
--- 44,53 ----
  #include "HTSort.h"
  #include "HText.h"
  
+ #ifdef TERM
+ #include <client.h>
+ #endif
+ 
  #ifndef IPPORT_FTP
  #define IPPORT_FTP    21
  #endif
***************
*** 308,315 ****
    }
    
    con = -1;
    status = HTDoConnect (arg, "FTP", IPPORT_FTP, &con);
-   
    if (status < 0)
      {
        if (TRACE)
--- 312,319 ----
    }
    
    con = -1;
+ 
    status = HTDoConnect (arg, "FTP", IPPORT_FTP, &con);
    if (status < 0)
      {
        if (TRACE)
***************
*** 497,503 ****
    struct sockaddr_in soc_address;     /* Binary network address */
    struct sockaddr_in *sin = &soc_address;
    int new_socket;                     /* Will be master_socket */
!   
    /* Create internet socket */
    new_socket = socket (AF_INET, SOCK_STREAM, IPPROTO_TCP);
    
--- 501,516 ----
    struct sockaddr_in soc_address;     /* Binary network address */
    struct sockaddr_in *sin = &soc_address;
    int new_socket;                     /* Will be master_socket */
! 
! #ifdef TERM
!   if ((new_socket = connect_server(0)) < 0)
!     return -1;
!   if (send_command(new_socket, C_BINDN, 0, 0, 0) < 0)
!     {
!       fprintf(stderr, "FTP listen: %s\n", command_result);
!       return -1;
!     }
! #else
    /* Create internet socket */
    new_socket = socket (AF_INET, SOCK_STREAM, IPPROTO_TCP);
    
***************
*** 536,551 ****
      if (status<0) 
        return -1;
    }
-   
    CTRACE(tfp, "FTP: bound to port %d on %s\n",
           (int)ntohs(sin->sin_port),
           HTInetString(sin));
!   
    if (master_socket >= 0)
      close_master_socket ();
    
    master_socket = new_socket;
    
    /* Now we must find out who we are to tell the other guy */
    (void)HTHostName();         /* Make address valid - doesn't work*/
    sprintf(port_command, "PORT %d,%d,%d,%d,%d,%d%c%c",
--- 549,573 ----
      if (status<0) 
        return -1;
    }
    CTRACE(tfp, "FTP: bound to port %d on %s\n",
           (int)ntohs(sin->sin_port),
           HTInetString(sin));
! #endif /*TERM*/    
! 
    if (master_socket >= 0)
      close_master_socket ();
    
    master_socket = new_socket;
    
+ #ifdef TERM
+   sprintf(port_command, "PORT ");
+   if (read(master_socket, port_command+5, 58) < 0)
+     {
+       fprintf(stderr, "FTP listen: can't read port\n");
+       return -1;
+     }
+   strcat(port_command, "\r\n");
+ #else
    /* Now we must find out who we are to tell the other guy */
    (void)HTHostName();         /* Make address valid - doesn't work*/
    sprintf(port_command, "PORT %d,%d,%d,%d,%d,%d%c%c",
***************
*** 564,570 ****
        return -1;
      }
    CTRACE(tfp, "FTP: Master socket(), bind() and listen() all OK\n");
!   
    return master_socket;               /* Good */
  } /* get_listen_socket */
  
--- 586,593 ----
        return -1;
      }
    CTRACE(tfp, "FTP: Master socket(), bind() and listen() all OK\n");
! #endif /*TERM*/
! 
    return master_socket;               /* Good */
  } /* get_listen_socket */
  
***************
*** 1016,1021 ****
--- 1039,1067 ----
    
    /* Wait for the connection */
    {
+ #ifdef TERM
+     char port[10];
+     int  p;
+ 
+     if (read(master_socket, port, 10) < 0)
+       {
+       fprintf(stderr, "FTP: cannot get port\n");
+       close_master_socket();
+       return HT_NOT_LOADED;
+       }
+     p = atoi(port);
+     if ((status = connect_server(0)) > 0)
+       if (send_command(status, C_ACCEPT, 0, "%d", p) < 0)
+       {
+         fprintf(stderr, "FTP accept: %s\n", command_result);
+         status = -1;
+       }
+       else
+       {
+         (void) close(master_socket);
+         master_socket = status;
+       }
+ #else
      struct sockaddr_in soc_address;
  
      int       soc_addrlen = sizeof(soc_address);
***************
*** 1022,1028 ****
      status = accept(master_socket,
                      (struct sockaddr *)&soc_address,
                      &soc_addrlen);
! 
      if (status < 0)
        {
          NETCLOSE (control);
--- 1068,1074 ----
      status = accept(master_socket,
                      (struct sockaddr *)&soc_address,
                      &soc_addrlen);
! #endif /*TERM*/
      if (status < 0)
        {
          NETCLOSE (control);
*** libwww2/HTTCP.c.orig        Tue Nov  9 12:14:51 1993
--- libwww2/HTTCP.c     Thu Nov 11 20:49:28 1993
***************
*** 19,24 ****
--- 19,28 ----
  #define HTParseInet           HTPaInet
  #endif
  
+ #ifdef TERM
+ #include <client.h>
+ #endif
+ 
  #ifdef __STDC__
  #include <stdlib.h>
  #endif
***************
*** 206,211 ****
--- 210,216 ----
  #if 0
            fprintf (stderr, "=+= Fetching on '%s'\n", host);
  #endif
+ #ifndef TERM
            phost = gethostbyname (host);
            if (!phost) 
              {
***************
*** 232,237 ****
--- 237,243 ----
            cached_phost_h_length = phost->h_length;
  
            memcpy(&sin->sin_addr, phost->h_addr, phost->h_length);
+ #endif /* TERM */
          }
      }
    
***************
*** 304,309 ****
--- 310,318 ----
    struct sockaddr_in soc_address;
    struct sockaddr_in *sin = &soc_address;
    int status;
+ #ifdef TERM
+   char host[255];
+ #endif
  
    /* Set up defaults: */
    sin->sin_family = AF_INET;
***************
*** 315,320 ****
--- 324,332 ----
      char *p1 = HTParse(url, "", PARSE_HOST);
      int status;
  
+ #ifdef TERM
+     strcpy(host, p1);
+ #endif
      sprintf (line, "Looking up %s.", p1);
      HTProgress (line);
  
***************
*** 332,337 ****
--- 344,368 ----
      free (p1);
    }
  
+ #ifdef TERM
+   status = connect_server(0);
+   if (status < 0)
+     {
+       char line[255];
+ 
+       sprintf(line, "Cannot connect to term server.");
+       HTProgress(line);
+       return HT_NO_DATA;
+     }
+   *s = status;
+   if (send_command(*s, C_PORT, 0, "%s:%d", host, sin->sin_port) < 0)
+     {
+       HTProgress(command_result);
+       return HT_NO_DATA;
+     }
+   send_command(*s, C_DUMB, 1, 0);
+ #else
+ 
    /* Now, let's get a socket set up from the server for the data: */      
    *s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
  
***************
*** 490,495 ****
--- 521,527 ----
      {
        close(*s);
      }
+ #endif /* TERM */
  
    return status;
  }



==============================

End of TERM Digest
******************
=======



-- 
=======[ roland@cac.washington.edu ]=======================================
Outside of a dog, computers are a man's best | UCS Consulting
 friend. Inside a dog, it's too dark to type.| UW Ice Hockey Co-Captain
================================================================[ LINUX] ==

------------------------------

From: el@lisse.NA (Dr Eberhard W Lisse)
Subject: Re: Linux performance??
Date: 11 Nov 93 18:35:20 GMT

greg@serveme.chi.il.us (Gregory Gulik) writes:

>In article <2bmah6$lj9@cville-srv.wam.umd.edu> bbfaus@wam.umd.edu (John E. Krokes) writes:
>>Linux runs significantly faster than DOS because it's a 32-bit OS that
>>doesn't have the constraints that DOS does. DOS was written over a decade
>>ago for machines that are nowhere near as powerful as a 486, and some
[...]
>Then how do you explain Unix being originally written over 20 years ago?
>8^)

Beacuse the man wanted to play a game :-)-O


el
-- 
Dr. Eberhard W. Lisse   \         /                 Windhoek Central Hospital
<el@lisse.NA>            \ *      |  Department of Obstetrics and Gynaecology
Private Bag 13215         \      /  61 203 2106/7 (Bleeper)  61 224014 (home)
Windhoek, Namibia         ;____/

------------------------------

From: vernard@cc.gatech.edu (Vernard C. Martin)
Subject: Re: how fast is linux?
Date: Sat, 20 Nov 1993 03:21:06 GMT

barr@pop.psu.edu (David Barr) wrote:
>In article <1993Nov19.183401.20344@rosevax.rosemount.com>,
>If you had a reasonable graphics card, then you would have acceptable
>performace.


>Sure, and pay 5 times the price.  (a 386/25 is perhaps $2K.  A
>SPARC 10 model 30 is around $10K)

$2K sounds extremely expensive for a 386/25 setup. more like $1K. The price 
on the sparc 10 is right though.

Also, I have worked on a sparc 10 model 30 and a 486Dx50 running linux and
the sparc 10 doing flating point math is *way* faster. 

just my opinion

V
Vernard Martin (vernard@cc.gatech.edu) 
Ga Tech High Performance and Parallel Computing Experimentation Laboratry

------------------------------

From: philb@cats.ucsc.edu (Philip Brown)
Subject: Re: how fast is linux?
Date: 20 Nov 1993 01:28:00 GMT


In <2cji89$dkf@soc2.pop.psu.edu> barr@pop.psu.edu (David Barr) writes:

>That depends.  It's not hard to get a 486 which is faster than
>a SPARC 10, modulo bus, disk, and video speeds.

Wow. Now THERE's a misleading statement!

Give specific examples of "faster". specify sparc 10 setup, and 486 setup.

Yes, I agree that in certain cases, a 486-66 does some things faster than
a sparc 10 with one processor. But how does it compare to a sparc 10 with
4 high-speed sparc processors?

-- 
 ----------------------------------------------------------------------
"Look! Up in the Sky! It's a bird!" "It's a plane!" "It's... time for lunch!"
"Naaa. it's just SuperBabs"
"Well, I was hoping it was time for lunch..."

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Misc-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux.misc) via:

    Internet: Linux-Misc@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    sunsite.unc.edu				pub/Linux

End of Linux-Misc Digest
******************************
