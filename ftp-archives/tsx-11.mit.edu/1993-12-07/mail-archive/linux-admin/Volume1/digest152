From:     Digestifier <Linux-Admin-Request@senator-bedfellow.mit.edu>
To:       Linux-Admin@senator-bedfellow.mit.edu
Reply-To: Linux-Admin@senator-bedfellow.mit.edu
Date:     Fri, 12 Nov 93 20:28:06 EST
Subject:  Linux-Admin Digest #152

Linux-Admin Digest #152, Volume #1               Fri, 12 Nov 93 20:28:06 EST

Contents:
  bash 1.12 link error (Keith Hollister)
  XFree2.0 and ld.so (Tracey Beauchat)
  Re: bash 1.12 link error- IGNORE (Keith Hollister)
  Re: Berkeley Fast Filesystem (CHoPP Computer Corp.)
  Re: Berkeley Fast Filesystem (Nate Williams)
  Re: Berkeley Fast Filesystem (Nate Williams)
  Re: SLIP FAQ (Norbert Kuemin)
  Re: UUGETTY respawning too rapidly? (Rafal Kustra)
  Linux in academia / industry - Recommendations needed (Ronan Mullally)
  Re: Berkeley Fast Filesystem (Joachim Hoenig)
  Re: Berkeley Fast Filesystem (Joachim Hoenig)
  Re: filesystem for archive disks ( Karsten Ballueder)
  Re: Is PLIP possible form a LAN? (Kevin Haddock)

----------------------------------------------------------------------------

From: keith@ursa.com (Keith Hollister)
Subject: bash 1.12 link error
Date: Fri, 12 Nov 1993 01:24:48 GMT

I'm sure this was probably covered in the distant past, but I am getting  
an error during the final link for bash 1.12. Apparently, the ulimit  
builtin module is trying to make a call to a ulimit() system function  
which doesn't exist under NS 3.0. How do I hack ulimit.c to fix this?
Thanks

--

Keith Hollister
keith@ursa.com
-- 

Keith Hollister
keith@ursa.com

------------------------------

From: tracey@cs.wm.edu (Tracey Beauchat)
Subject: XFree2.0 and ld.so
Date: Fri, 12 Nov 1993 02:44:03 GMT


The XFree2.0 distribution says that it requires ld.so.  I 
haven't been able to find it.  Could someone please tell
if it is on sunsite or tsx-11, and if so where it is?

Thanks,
-Tracey

===================================================================
                        Tracey A. Beauchat
===================================================================
*********   *********   ********
*********   ***   ***   ***   ***    The College of William & Mary
   ***      *********   ********     Department of Computer Science
   ***      ***   ***   ***   ***    Williamsburg, VA  23185
   ***      ***   ***   ********
===================================================================
       EMAIL: tracey@cs.wm.edu         PHONE: (804)221-3468
===================================================================
         <-[ " The truth is a virus! " - Harry Hardon ]->


------------------------------

From: keith@ursa.com (Keith Hollister)
Subject: Re: bash 1.12 link error- IGNORE
Date: Fri, 12 Nov 1993 02:43:12 GMT

In article <1993Nov12.012448.4426@ursa.com> keith@ursa.com (Keith  
Hollister) writes:
> I'm sure this was probably covered in the distant past, but I am getting  
> an error during the final link for bash 1.12. Apparently, the ulimit  
> builtin module is trying to make a call to a ulimit() system function  
> which doesn't exist under NS 3.0. How do I hack ulimit.c to fix this?
> Thanks

Oops - slip of the mouse - wrong news group. Sorry
-- 

Keith Hollister
keith@ursa.com

------------------------------

Crossposted-To: comp.os.linux.development
From: chopp@netcom.com (CHoPP Computer Corp.)
Subject: Re: Berkeley Fast Filesystem
Reply-To: andras@cyber.net
Date: Fri, 12 Nov 1993 01:53:14 GMT

In article <WAYNE.93Nov11144259@backbone.uucp> wayne@backbone.uucp (Wayne Schlitt) writes:
>Fragments are not necessarily a good idea.  There are two independent
>values here:
>
>  1)  How big should the block size be when allocating space for a
>      file?
>       ...
>  2)  How much data should you read off the disk at one time?
>       ...
>
>The Berkeley Fast Filesystem changed things to use a 8k block size,
>which is better for a disk access size, but horrible for an allocation
>size.  In order to "fix" the problem with the allocation size, they
>created fragments, which are 1k.  Unfortunately, you can only use a
>fragment if the entire file fits in the fragment, so the FFS wastes,
>on average 4k any time the file is over 1k in size.  Fragments add
>additional code and complications when something needs to be moved too
>or from a fragment.  The 8k block size also isn't large enough to get
>really good throughput from the disk when reading sequentially, and it
>is too large when reading randomly.

I thought any file could use fragments at the very end of the file.
That is, the cluster size (transfer size) was 4k (8k on Sun), but the
allocation size was effectively 1k.  Files were laid out in contiguous
multiples of 4k, with the last few k scattered around in fragments.
If the file grew, the fragments were collected and copied into a new
block.

Other neat features of the BSD FFS were elevator head scheduling,
contiguous space allocation, and an attempt at reasonable free space
management -- directories and files created where there is room to
grow (to still provide contiguous allocation even in an in-use file
system, avoiding disk fragmentation).

Some of the journaling filesystems may achieve as good or better
performance, though, using a completely different approach.

> ...
>SCSI drives, you don't know this information and the tracks per sector
>isn't constant.  IDE drives usually lie about the number of heads and
>cylinders in order to work under DOS.

Newer IDE drives, like SCSI drives, all seem to have "zones" with
different number of sectors per track in each zone -- so they have to lie.

Andras
andras@cyber.net

------------------------------

From: nate@bsd.coe.montana.edu (Nate Williams)
Crossposted-To: comp.os.linux.development
Subject: Re: Berkeley Fast Filesystem
Date: 12 Nov 1993 05:49:26 GMT

In article <WAYNE.93Nov11144259@backbone.uucp>,
Wayne Schlitt <wayne@backbone.uucp> wrote:

>Fragments are not necessarily a good idea.  There are two independent
>values here:
>  1)  How big should the block size be when allocating space for a
>      file?
>
>      On average, you will waste about half of the last block
>      allocated, unless you make the block size _way_ too big and most
>      files fit in less than one block, in which case you will waste
>      more than half.
>
>      On a typical Unix system, approx 40% of the files will be 1k or
>      less, and 90% of the files will be 4k or less.

I think this has changed, but I have no numbers to back it up.

>      If you make the block size too small, then too much space will
>      be wasted keeping track of the blocks.

In a non-fragmented FS, too much space will be wasted when it your
program does not fit into a  complete block.  Keeping track of the block
is pretty much the same cost no matter how big the file is since the
inode is of fixed length.

>      So, the allocation unit should probably be somewhere around 1k,
>      maybe as small as 256, maybe as large as 4k.
>
>
>  2)  How much data should you read off the disk at one time?
>
>      If you read too little data, then you are going to spend a lot
>      of time dealing with the overhead of reading blocks.  

Right.  When you read in block-at-a-time mode, you can only read the blocksize
value at a time.  The larger the blocksize, the more data you read at one time.

>      You also
>      won't be able to read consecutive tracks, causing rotational
>      delays to be added in.

Huh?  I think the end result is that if you read one block at a time, you read
one block at a time.  This has very little bearing on disk tracks.

>      If you read too much data, then you may well be wasting space on
>      I/O buffers that could better be used for programs or data.

???  This is irrelavant to the file-system, and is a problem with your buffer
code being overly agressive.

>The Berkeley Fast Filesystem changed things to use a 8k block size,
>which is better for a disk access size, but horrible for an allocation
>size.  In order to "fix" the problem with the allocation size, they
>created fragments, which are 1k.

>Unfortunately, you can only use a
>fragment if the entire file fits in the fragment, so the FFS wastes,
>on average 4k any time the file is over 1k in size. 

What *ARE* you talking about?  The fragments are used for the tail ends
of the files.  Say you have a 40.1K file, with an 8K/1K filesystem.  
With a non-fragmented file-system, you would use up 6*8K=48K of your
file system space, because the first 40K of the file fills up 5 8K
blocks, but you MUST use an entire block in order to store the final
data.  So, out of a 40.1 K file we have 7.9K of wasted space.

However, with the Berkeley FFS (and other similar FS), we use the same
original 5 8K blocks as well, but because we have 1K fragments, we break
up the blocks into 8-1K chunks.  The final .1K of the file fits into the
1K chunk.  This is only wasting 0.9 K of space, instead of the 7.9K.  A
fragmented file-system will almost invariably use less space than a
non-fragmented file-system.

However, as you eluded to above, the tradeoff is speed.  

>Fragments add
>additional code and complications when something needs to be moved too
>or from a fragment.  The 8k block size also isn't large enough to get
>really good throughput from the disk when reading sequentially, and it
>is too large when reading randomly.

??? 8K isn't large enough to get really good throughput.  Let's see some
numbers to back that up.  I get VERY good performance using an 8K/2K
BSD-FFS with the 486/33.  (1.5MB/sec reading and 1MB/sec writing w/out
any hardware cache on a 486/33 ISA box.  On EISA boxes I've seen numbers
in the upper 2's and 3's)

>The Berkeley FFS also suffers from several other problems on modern
>disk drives.  In particular, they made the assumptions that the users
>knew how many heads, tracks and cylinders the disk had, and the the
>number of tracks per sector stayed constant across the disk.  With
>SCSI drives, you don't know this information and the tracks per sector
>isn't constant.  IDE drives usually lie about the number of heads and
>cylinders in order to work under DOS.

Hmm, I know how many heads, tracks, cylinders and such on my drive. 
And, the filesystem knows how to optomize for this.  If you don't know
this information, it can't optomize for it but the BSD-FFS doesn't
REQUIRE this information for it to work effeciently.

(And it was pointed out in a followup article that most newer drives use
zones.  I've heard that the BSD 4.4 SCSI drivers take this information
into account so that the FS can use them.)

>While the Berkeley FFS was much better than the Version 7 file system,
>it is far from being an ideal filesystem.  

Nobody is claiming it's the ideal filesystem, but it sure beats alot of
existing filesystems that are currently out there.

The BSD-FFS with the recent 4.4 additions to it is still one of the
fastest filesystems around.   (Now if we could pry those changes out of
the author, but he has been too busy with real work to get them to us.
:-)  Let's all hope that the USL-BSDI suit ends soon.


Nate
-- 
nate@bsd.coe.montana.edu     |  Freely available *nix clones benefit everyone,
nate@cs.montana.edu          |  so let's not compete with each other, let's
work #: (406) 994-4836       |  compete with folks who try to tie us down to
home #: (406) 586-0579       |  proprietary O.S.'s (Microsloth) - Me

------------------------------

From: nate@bsd.coe.montana.edu (Nate Williams)
Crossposted-To: comp.os.linux.development
Subject: Re: Berkeley Fast Filesystem
Date: 12 Nov 1993 05:50:47 GMT

In article <choppCGCvwr.DyE@netcom.com>,
CHoPP Computer Corp. <andras@cyber.net> wrote:
>>SCSI drives, you don't know this information and the tracks per sector
>>isn't constant.  IDE drives usually lie about the number of heads and
>>cylinders in order to work under DOS.
>
>Newer IDE drives, like SCSI drives, all seem to have "zones" with
>different number of sectors per track in each zone -- so they have to lie.

Most of the 'lying' is required because of MS-DOS's 1024 cylinder limit.


Nate

-- 
nate@bsd.coe.montana.edu     |  Freely available *nix clones benefit everyone,
nate@cs.montana.edu          |  so let's not compete with each other, let's
work #: (406) 994-4836       |  compete with folks who try to tie us down to
home #: (406) 586-0579       |  proprietary O.S.'s (Microsloth) - Me

------------------------------

From: kuemin@srapc101.alcatel.ch (Norbert Kuemin)
Subject: Re: SLIP FAQ
Reply-To: norbert.kuemin@alcatel.ch
Date: Fri, 12 Nov 1993 06:34:21 GMT

Debi Reid (dreid@mailer.cc.fsu.edu) wrote:

:       I looked several places (sunsite, tsx-11, etc) but could not find
:       and FAQ's on SLIP via dialup. I remember seeing them port up in   
:       serveral inet news linux areas. Could someone mail this FAQ 
:       or point me in the right direction?

Take a look to the NET-2-FAQ and to the SERIAL-FAQ

=======================================+=======================================
+----------V----------+ Eltech. ING HTL|EMAIL: norbert.kuemin@alcatel.ch
| A  L  C  A  T  E  L | Norbert Kuemin |DEC:   PSI%(0228)4795123920::ZAD_KUEMIN
+---------------------+ Alcatel STR    |X.400: c=CH a=arCom p=Alcatel
         S T R          CH-8804 Au/ZH  |       s=Kuemin g=Norbert
=======================================+=======================================

------------------------------

From: g1krakow@cdf.toronto.edu (Rafal Kustra)
Subject: Re: UUGETTY respawning too rapidly?
Date: Fri, 12 Nov 1993 05:58:35 GMT

In <CG3uIv.1M7@reality.UUCP> henryc@reality.UUCP (Christian Henry) writes:

>In article <CG0o7D.n09@nocusuhs.nnmc.navy.mil>,
>PERUCCI, PHILIP A. <SSB1PZP@imcvms.med.navy.mil> wrote:

>>I am currently trying to get uugetty (getty_ps) working with 
>>Slackware 1.0.5.
>>
>>With everything configured, at boot time I get a message about
>>
>>"c7: respawning too rapidly: disabled for 5 minutes"
>>
>>(note that the message is not verbatim - it is from memory).  Anyone
>>know what might cause this?  I know it takes some doing to get this
>>working...
>>
>>  2: Must echo be DISABLED on the modem (Q and E AT commands)?
I had uugetty working, and suddenly, I started having above problem.
It simply means that getty exits almost immediately, supposively with 
error code. I just grabbed getty_ps sources again, and recompiled. I
also remmember, when installing, that I would have that problem. Debug
file would show 'Could not open init line' or something. I remmember
that setting (or unsetting) a define on SYSV init would help. Try
that.


                                Rafal


>[good advice deleted]
>See if this helps you any.  :-)

>-- 
>  |  Christian Henry...          |  "If there's a new way,                  |
>  |      ...North York, Ontario  |   I'll be the first in line,             |
>  |                              |   But it better work this time!"         |
>  |  e-mail: henryc@io.org       |         - Megadeth, "Peace Sells", 1986  |
-- 
/|| Numbers exist only in our minds. There is no physical entity that
 ||_is_ number 1. If there were, 1 would be in a place of honor in 
 || some great museum of science, and past it would file a steady
==== stream of mathematicians gazing at 1 in wonder and awe.

------------------------------

From: ronan@scamall9.iol.ie (Ronan Mullally)
Crossposted-To: comp.os.linux.misc
Subject: Linux in academia / industry - Recommendations needed
Date: 12 Nov 1993 14:48:53 -0000

I'm look for arguments for or against setting up a Linux box as a *nix
server for 35-40 final year computer science students.

I'd appreciate any comments from anyone running Linux in a university / 
industrial environment, with the following points in mind:

        - What kind of hardware are you using ?

        - What kind of load is the machine under ?

        - How reliable do you find it ?

        - Why did (didn't ?) you choose Linux ?

        - Did you have any trouble convincing the 'powers that be'
          to pay for / install / allow the machine(s) ?

What I have in mind is setting up a machine administered by the students,
for use by students, for mail / news, project work where appropriate, and
to give the students who come forward to manage the system experience with
system administration before they are unleashed on the real world next summer
;-)

Any replies would be greatly appreciated.  If anyone wants to see a summary
posted let me now.

-- 
 Ronan Mullally                                     320 Sutton Park, Sutton
 <ronan@scamall9.iol.ie>                            Dublin 13,
 <ronan@bermuda.ucd.ie>                             Ireland.

------------------------------

From: hoenig@immd3.informatik.uni-erlangen.de (Joachim Hoenig)
Crossposted-To: comp.os.linux.development
Subject: Re: Berkeley Fast Filesystem
Date: Fri, 12 Nov 1993 10:05:02 GMT

nate@bsd.coe.montana.edu (Nate Williams) writes:
>Wayne Schlitt <wayne@backbone.uucp> wrote:

>>The Berkeley FFS also suffers from several other problems on modern
>>disk drives.  In particular, they made the assumptions that the users
>>knew how many heads, tracks and cylinders the disk had, and the the
>>number of tracks per sector stayed constant across the disk.  With
>>SCSI drives, you don't know this information and the tracks per sector
>>isn't constant.  IDE drives usually lie about the number of heads and
>>cylinders in order to work under DOS.

>Hmm, I know how many heads, tracks, cylinders and such on my drive. 
>And, the filesystem knows how to optomize for this.  If you don't know
>this information, it can't optomize for it but the BSD-FFS doesn't
>REQUIRE this information for it to work effeciently.

That's right. BSD-FFS uses this info to do some elaborate guessing at
the optimal rotational position where to continue allocating blocks for
a file after stepping to a different cylinder. Without this information
no harm is done, maybe the FS performance is a nifty bit less than
optimal.

>(And it was pointed out in a followup article that most newer drives use
>zones.  I've heard that the BSD 4.4 SCSI drivers take this information
>into account so that the FS can use them.)

And you can try to fit your partition in one of these zones and go with
the sector numbers of this zone.

Joachim

------------------------------

From: hoenig@immd3.informatik.uni-erlangen.de (Joachim Hoenig)
Crossposted-To: comp.os.linux.development
Subject: Re: Berkeley Fast Filesystem
Date: Fri, 12 Nov 1993 10:07:15 GMT

hpeyerl@novatel.ca (Herb Peyerl) writes:

>Joachim Hoenig (hoenig@immd3.informatik.uni-erlangen.de) wrote:
>: imcclogh@cs.ucsd.edu (Ian McCloghrie) writes:
>: With some reverse engineering the NetBSD file system utilities like
>: tunefs, newfs and fsck compile nicely on linux, though.

>Why would you have to reverse engineer anything from NetBSD.  The source
>is free you know...

You have to remove the disklabel etc. stuff.

Joachim

------------------------------

From: karsten@lt8.cs.rhbnc.ac.uk ( Karsten Ballueder)
Subject: Re: filesystem for archive disks
Date: 12 Nov 1993 10:03:51 GMT
Reply-To: karsten@lt8.cs.rhbnc.ac.uk ( Karsten Ballueder)



Could somebody suggest which filesystem to use for the purpose of
archiving (maybe mke2fs with '-m 0' option so I use all of the disk)?

Why use a filesystem for archiving? If you only want to save backups
in forms of tar-files, you can have it much easier with writing directly
to the disk, which will still work, if filesystems have changed during
time:

e.g.

fdformat /dev/fd0H1440
tar cz[some other options]f /dev/fd0H1440

You can tar tell how much bytes to write to the disk (I don't remember
the right option at this time...) and so it writes exactly 1.44MB per
disk. This disk then is readable by all machines who support 1.44MB disks,
you don't need to care for the filesystem.
(You can use the 'dd' program in a similar way.)

                                                Ciao, Karsten

                                        
--


                                 _____..---========+^+=========---.._____
    ______________________ __,-='=====____  ================== _____=====`=
   (._____________________I__) - _-=_/    `--------=+=--------'
       /      /__...---===='---+---_'          
      '------'---.___ -  _ =   _.-'    
                     `--------'                
                                                 USS Enterprise, NCC-1701D 
  ------------------------------------------------------------------------------
         Karsten Ball"uder, Royal Holloway, c/o Physics Department,
             Egham Hill, Egham, Surrey TW20 0EX, United Kingdom
        charon.physik.uni-osnabrueck.de   jupiter.rz.uni-osnabrueck.de
                  --> LinuX - The better text adventure. <--

------------------------------

From: fish@ecst.csuchico.edu (Kevin Haddock)
Subject: Re: Is PLIP possible form a LAN?
Date: 12 Nov 1993 10:18:25 GMT

In article <CG9ELE.G30@acenet.auburn.edu>,
Ron Russell <rrussell@agronomy.auburn.edu> wrote:
>Of course your idea is not new.  sbus-cards that provide
>both ethernet and an additional SCSI adapter functions have
>been available for quite some time.  However, the creation of
>such a card for the ISA/MC/EISA/IDE realm has not been addressed.
>Certainly the concept of a multi-function card has.

Actually an additional SCSI port may not be necessary.  A company called
MicroMint extended the SCSI protocol (to what they called SCSI-plus) to
enable it to handle 64 devices including the original 8 devices which
could be regular SCSI devices completely unaware anything funny was
going on.  I believe they did this by using two arbitration bits instead
of just one (although the 'real' devices could still continue to use
just one).  When the bus was arbitrated you did not only check to see
if you had the lowest bit set but that the dual bit value you asserted
was the lowest.  It should be fairly easy to implement a driver for
this for most standard SCSI host adaptors (at least from what I remember
from the data-sheets for the 5380 and WD chips I have seen).

>
>Now would you find a 5 Mb/s ISA bus a favorable place to install
>a 10 Mb/s ethernet card?

Excuse me but I assume you know you ARE talking apples and oranges here, e.g.
the ISA being a 15 mega-WORD(16 bit)/sec bus (although I realize delays are
common for slow devices) and the Ethernet cable being a 10 megaBIT/sec
interface.

>   Of course both of these are maximal
>values, and given that most proprietary IDE and many of the SCSI
>interfaces for PeeCees are just that, and thus do not adhere to
>either the SCSI standards for either cabling or balanced pair 
>signaling distance requirements; is it not surprising that SCSI
>standard labeling is not affixed to any PeeCee device?

Ok, now here is where you can educate me.  To my somewhat dated knowledge
of SCSI cabling is simply 50 pin ribbon, every other pin ground with
a bunch of grounds in the middle, open collector with 220/330 ohm resistor
nets at each end of the bus, max 20' in length.  I don't see how that
is so tough to achieve.  There are a myriad of single and multi-chip
components that give you almost everything you need on the host adaptor
side ('cept the software, but lots of hardware support for arbitration,etc...
so that is easy).

>
>And now you wish to connect an interrupt latency bound
>device that has greatly varying responsiveness into a 
>lan environment?  Oh come on, how many times must the
>wheel be re-invented before roundness in your mind is
>satisfied?
>
huh?  varying responsiveness?  SCSI has the quickest arbitration
in the business.  The throughput is many times that of Ethernet.  Ever
heard of DMA?  (Although I will admit PC's DMA is a pain but that does
not go to the viability of SCSI for a close proximity LAN in general).

>Let me guess, if you wind the cable tightly the electrons
>will get dizzy, and thus decrease throughput.
>
>Another Network Genius is borne of fire from the PeeCee 
>realm.  {yawn}
>
>oh yeah, then there comes the backplane technology advancement
>of the century. LOCALBUS, which is barely either. {yawwwnnn}
>
>yet another market hype solution to prove, {gasparrrgh}, that
>mid-range server RISC technology is capable on a PeeCee. hahaha.
>give me a break,

Now with the PowerPC, Mips [34]000, NCR, etc... mid-range server RISC
technology will soon be PeeCee's.

>  Imagine the concept of a localbus burst mode.
>it is great but you still have the CISC chip responding to 
>an interrupt driven slave mode ISA bus and a purported bus-master
>technology.

Agreed, Intel CISCs suck.

>  Come on how real does real have to be to recognize that
>the common LPT port has inherent throughput problems.  I agree that
>for two machines on an island with free parallel ports this may be useful.
>But a replacement for ethernet, come on get real!!! 

Hey, I used to do 250k bits/sec on a 1 MHz Commodore 64 with hardware
handshake on a single bit via the 6526's.  Byte wide buffering, no DMA.
Set up right parallel screams.  I can't think of a single computer main
bus out there that isn't essentially a parallel bus with hardware handshake.
Perhaps you should show us how wonderful your Ethernet is by building us
a motherboard that uses single bit Ethernet for communicating to memory,
i/o, disks, etc...

I'll admit a serial net is the way to go for distance but when you have
two or more machines sitting on the same bench running database servers,
terminal servers, print servers, etc... having that puny little 10 megabit
Ethernet sitting there when you could have SCSI-2 is a joke.  Get real!!!



-Kevin
===============================================================================
| But dehumanizing the victim makes things simpler   | Kevin Haddock A.K.A.   |
| it's like breathing with a respirator              | fish@ecst.csuchico.edu |
| it eases the conscience of even the most conscious ||||||||||||||||||||||||||
| and calculating violator               -------------------------------------|
| words can reduce a person to an object | Ve bring da vorld new order...     |
| something more easy to hate            | Heil Hitler's vorld new order...   |
| an inanimate entity                    | Every von of foreign race          |
| completely disposable                  |   Will _love_ der Fuehrer's face   |
| no problem to obliterate               |   vhen ve bring to da vorld        |
|                                        |   dis order!                       |
| -- The Disposable Heros of HIPHOPRISY  | -- Spike Jones 1942                |
===============================================================================

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Admin-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux.admin) via:

    Internet: Linux-Admin@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    sunsite.unc.edu				pub/Linux

End of Linux-Admin Digest
******************************
