From:     Digestifier <Linux-Development-Request@senator-bedfellow.mit.edu>
To:       Linux-Development@senator-bedfellow.mit.edu
Reply-To: Linux-Development@senator-bedfellow.mit.edu
Date:     Fri, 17 Sep 93 14:13:21 EDT
Subject:  Linux-Development Digest #105

Linux-Development Digest #105, Volume #1         Fri, 17 Sep 93 14:13:21 EDT

Contents:
  Please no /config. (Michael Griffith)
  Re: Please no /config. (Rebuttal) (John McDermott)
  Another multiple sector IDE driver... (Frank Sommer)
  Re: Another multiple sector IDE driver... (Jan Richert)
  Re: port of Linux to the upcoming PowerPC? Free manual available (Hansruedi Heeb)
  Re: [Q] biff and comsat? (Michael O'Reilly)
  Re: Status of the NET-2 port (Mark Evans)
  Re: NetWare protocol stacks? (Alan Cox)
  Re: GCC, is it a bug or isn't it? (John Henders)

----------------------------------------------------------------------------

From: grif@ucrengr.ucr.edu (Michael Griffith)
Subject: Please no /config.
Date: 17 Sep 1993 02:12:07 GMT


Please don't mess with the standard filesystem layout.  It would make
life more difficult for those with experience with other UNIX-like
operating systems.

With the current setup, we can always tell newcomers:  "Now that you
have your own Linux machine, it might be a good time to learn UNIX
system adminstration.  Perhaps you should go buy a good book like
Nemeth, Snyder, and Seebass's UNIX SYSTEM ADMINISTRATION HANDBOOK."

In any case, newcomers are going to need to be assisted.  If we go to
the dupey /config or /conf, then we will have to explain not only to
newcomers, but to experienced UNIX sysadmins.

--
                                                Michael A. Griffith
                                                grif@cs.ucr.edu




------------------------------

From: mcdermot@daedalus.cs.unm.edu (John McDermott)
Subject: Re: Please no /config. (Rebuttal)
Date: Fri, 17 Sep 1993 15:26:44 GMT

In article <27b6dn$l99@galaxy.ucr.edu> grif@ucrengr.ucr.edu (Michael Griffith) writes:
>
>Please don't mess with the standard filesystem layout.  
Is there such at thing?  The SVR4 version is SOOO different from other
systems.  Each "version" has its own layout.  [Do we NEED sbin?]
>
>With the current setup, we can always tell newcomers:  "Now that you
>have your own Linux machine, it might be a good time to learn UNIX
>system adminstration.  Perhaps you should go buy a good book like
>Nemeth, Snyder, and Seebass's UNIX SYSTEM ADMINISTRATION HANDBOOK."
>
Hopefully EVERYONE will go to /config.  While Nemeth, et al is a good
text, it is not THE answer.  And, BTW, SYSV admin is much harder than
BSD (IMHO).

>In any case, newcomers are going to need to be assisted.  If we go to
>the dupey /config or /conf, then we will have to explain not only to
>newcomers, but to experienced UNIX sysadmins.
I have fifteen years UNIX sysadmin experience.  I would LOVE this.
I would also like to see a sys-defaults sort of file like X-windows'
.../app-defaults directory: then we could have a place to look for 
parameters which don't belong in .h files.  It works for X and it could work
for Linux.

These changes (especially /config) should be proposed to the ANSI committee
for POSIX if they work.  Hmmm, how about creating an ANSI/ISO-IEC spec for
configuration, then the world would have it available everywhere?
>
>--
>                                               Michael A. Griffith
>                                               grif@cs.ucr.edu

--john
-- 
John McDermott                                  505/897-2064 H/W
mcdermot@cs.unm.edu     (The facts/opinions above are MINE, MINE, MINE)
[ UNM only lets me use this account because they are nice.  I have no 
        relationship with them whatsoever (besides being friends).]

------------------------------

From: fsommer@krefcom.GUN.de (Frank Sommer)
Subject: Another multiple sector IDE driver...
Date: Fri, 17 Sep 1993 14:47:22 GMT

Here is my multiple sector IDE driver with EISA support.
Any suggestions and comments should be directed to:

fsommer@fh-krefeld.de or fsommer@krefcom.gun.de

The driver was tested with a 386/40 computer with two Seagate drives
and a 486/50 with one Quantum drive and works fine.          


Frank

==============================================================
patch for hd.c!!!
0a1
> 
6a8,18
> 
> /* Multiple Sector Transfer and 32 Bit IO by Frank Sommer     
>                                               fsommer@krefcom.gun.de
>                                               fsommer@fh-krefeld.de
> This Driver supports 32-Bit IO for faster data transfer.
> But I know only about 1 controller who supports this:  DTC2290 EISA-IDE.  
> Currently there is a problem when the kernel wants to read the partition 
> table and the drive does not support multiple sector io:
> some timeout errors may occure. I think this is not  dangerous !
> */
> 
55a68,85
> #define WIN_MULTIPLE_READ     0xc4
> #define WIN_MULTIPLE_WRITE    0xc5
> #define WIN_SET_MULTIPLE      0xc6
> #define WIN_IDENTIFY_DRIVE    0xec
> 
> static struct {
>       int     secspint;
>       char    name[80];
>       int     dwordio;
>       int     readcmd;
>       int     writecmd;
> } new_hd_info[4];
> 
> static volatile int new_hd_intack = 1;
> 
> 
> 
> static int exec_multiple_write;
88a119,121
> #ifdef CONFIG_BLK_DEV_DTC2290
> /* 32 Bit-IO on data transfer */
> 
90c123
< __asm__("cld;rep;insw": :"d" (port),"D" (buf),"c" (nr):"cx","di")
---
> __asm__("cld;.byte 0xf3; .byte 0x6d": :"d" (port),"D" (buf),"c" (nr):"cx","di")
93c126,134
< __asm__("cld;rep;outsw": :"d" (port),"S" (buf),"c" (nr):"cx","si")
---
> __asm__("cld;.byte 0xf3; .byte 0x6f": :"d" (port),"S" (buf),"c" (nr):"cx","si")
> #else
> 
> #define port_read(port,buf,nr) \
> __asm__("cld;rep;insw": :"d" (port),"D" (buf),"c" (nr<<1):"cx","di")
> 
> #define port_write(port,buf,nr) \
> __asm__("cld;rep;outsw": :"d" (port),"S" (buf),"c" (nr<<1):"cx","si")
> #endif
230a272
> static void init_multiplesector_transfer(int);
243a286,287
>       for (i=0;i<2;i++)
>               init_multiplesector_transfer(i);
278c322,324
<       printk("Unexpected HD interrupt\n");
---
>       if (!new_hd_intack)
>               printk("Unexpected HD interrupt\n");
>       new_hd_intack = 0;
319,321c365,369
<       int i;
<       int retries = 100000;
< 
---
>        int i;
>        int retries = 100000;
> register int multiple_sectrs = 0;
> register int max_multi_secs;
>       max_multi_secs = new_hd_info[MINOR(CURRENT->dev)>>6].secspint;
342c390
<       port_read(HD_DATA,CURRENT->buffer,256);
---
>       port_read(HD_DATA,CURRENT->buffer,128);
347a396
>       multiple_sectrs++;
355c404,408
<       if (i > 0) {
---
>       if (i > 0)
>               if (multiple_sectrs < max_multi_secs) {
>                       goto ok_to_read;
>                       }
>               else {
365c418
<       return;
---
> return;
368c421
< static void write_intr(void)
---
> static void dummy_write_intr(void)
371c424,431
<       int retries = 100000;
---
>       CURRENT->sector++;
>       i = --CURRENT->nr_sectors;
>       --CURRENT->current_nr_sectors;
>       CURRENT->buffer += 512;
>       end_request(1);
>       cli();
>       do_hd_request();
> }
372a433,444
> static void write_intr(void)
> {
>               int i;
>               int retries = 100000;
> register      int multiple_sectrs = 0;
> register      int max_multi_secs ;
>       
>       if (exec_multiple_write){
>               multiple_sectrs++;
>               exec_multiple_write--;
>       }
>       max_multi_secs = new_hd_info[MINOR(CURRENT->dev)>>6].secspint;
392a465
>       cli();
397c470,472
<       if (!i || (CURRENT->bh && !SUBSECTOR(i)))
---
>       sti();
>       multiple_sectrs++;
>       if (CURRENT->bh && !SUBSECTOR(i))
399,403c474,495
<       if (i > 0) {
<               SET_INTR(&write_intr);
<               port_write(HD_DATA,CURRENT->buffer,256);
<               sti();
<       } else {
---
>       if (i > 1) { 
>               if (multiple_sectrs < max_multi_secs) { 
>                       port_write(HD_DATA,CURRENT->buffer,128);
>                       goto ok_to_write;
>               } else  {
>                       SET_INTR(&write_intr);
>                       port_write(HD_DATA,CURRENT->buffer,128);
>               }
>       }       
>       
>       else { if (i) { /* Nur wenn multiple io */
>               SET_INTR(&dummy_write_intr);
>               port_write(HD_DATA,CURRENT->buffer,128);
>              } else {    /* verhindert terror bei 1 block io */
>                  if (!(CURRENT->bh && !SUBSECTOR(i))) 
>                     end_request(1);
>                  cli(); 
>                  do_hd_request();
>               }
>       }
>       
>       
407,408d498
<               do_hd_request();
<       }
441a532,536
> 
> 
> 
> 
> 
503c598
<               hd_out(dev,nsect,sec,head,cyl,WIN_WRITE,&write_intr);
---
>               hd_out(dev,nsect,sec,head,cyl,new_hd_info[dev].writecmd,&write_intr);
511d605
<               port_write(HD_DATA,CURRENT->buffer,256);
512a607,609
>               port_write(HD_DATA,CURRENT->buffer,128);
>               exec_multiple_write =1;
>               if (new_hd_info[dev].secspint>1) write_intr();
516c613
<               hd_out(dev,nsect,sec,head,cyl,WIN_READ,&read_intr);
---
>               hd_out(dev,nsect,sec,head,cyl,new_hd_info[dev].readcmd,&read_intr);
626a724,771
> static void init_multiplesector_transfer(int drive)
> 
> {
>       if (new_hd_info[drive].secspint>1) {
>               sti();
>               new_hd_intack = 1;
>               SET_INTR(unexpected_hd_interrupt);
>               outb(new_hd_info[drive].secspint,0x1f2);
>               outb(0xA0|(drive<<4),0x1f6);
>               outb(WIN_SET_MULTIPLE,0x1f7);
>               new_hd_info[drive].writecmd = WIN_MULTIPLE_WRITE;
>               new_hd_info[drive].readcmd = WIN_MULTIPLE_READ;
>       } else {
>               new_hd_info[drive].writecmd = WIN_WRITE;
>               new_hd_info[drive].readcmd = WIN_READ;  
>       }
> }     
> 
> 
> static void get_drive_info(void)
> {
> static        unsigned char   infobuffer[512];
>       unsigned int    i;
>       for(i=0;i<2;i++) { 
>                       new_hd_intack = 1;
>                       sti();
>                       SET_INTR(unexpected_hd_interrupt);
>                       outb(0xA0|(i<<4),0x1f6);
>                       outb(WIN_IDENTIFY_DRIVE,0x1f7);
>                       if (wait_DRQ()==0) {
>                               port_read(HD_DATA,&infobuffer,128);
>                               int x;
>                               for (x=0;x<40;x+=2) {
>                                       new_hd_info[i].name[x] = infobuffer[55+x];
>                                       new_hd_info[i].name[x+1] = infobuffer[54+x];
>                               }
>                               new_hd_info[i].name[42] = '\0';
>                               new_hd_info[i].secspint = infobuffer[94]; 
>                               new_hd_info[i].dwordio =  infobuffer[96];
>                       } else {
>                               new_hd_info[i].secspint = 0;
>                               printk ("Error during IDENTIFY_DRIVE drive %d!\n",i);
>                       }
>       }
> 
> 
> }
> 
738a884,886
>       int i;
>       get_drive_info();
>       reset_controller(); 
743a892,894
>       printk("Device:  Description:                             MEM   INT DMA  IO          \n");
>       for (i=0;i<2;i++)
>               printk("hd%-6d %-40s ---    14  --  0x1F0 SPI: %1d\n",i,new_hd_info[i].name,new_hd_info[i].secspint);

------------------------------

From: jrichert@krefcom.GUN.de (Jan Richert)
Subject: Re: Another multiple sector IDE driver...
Date: Fri, 17 Sep 1993 16:18:24 GMT

fsommer@krefcom.GUN.de (Frank Sommer) writes:

>Here is my multiple sector IDE driver with EISA support.
>Any suggestions and comments should be directed to:

Hi..

I'm quite happy with this driver.. at least it did not (yet)
corrupt my filesystem as Mark Lord's did (sorry).

Greets, Jan

-- 
Jan Richert (NIC-ID: JR482)   | Internet:   jrichert@krefcom.GUN.de
Krefeld, FRG                  | Datex-J:    02151399843-0001
Voice: +49 2151 313124        | IRC-Nick:   jrichert
FAX:   +49 2151 396479        | Data:       +49 2151 396479 (12-20h MEDT)

------------------------------

Crossposted-To: comp.os.linux.misc
From: heeb@watson.ibm.com (Hansruedi Heeb)
Subject: Re: port of Linux to the upcoming PowerPC? Free manual available
Date: Fri, 17 Sep 1993 16:22:45 GMT

In article <1993Sep16.211424.7634@iitmax.iit.edu> grzyrob@elof.acc.iit.edu (Rob Grzywinski) writes:
>With all of the work going into the development and porting of Linux
>will there be an effort to port over to the PowerPC (running on the 
>MPC601 Motorola chip) when they are released?
>

Just in case someone wants to get started on this: the (free) manual
of the PowerPC 601 is available. It also contains a detailed
description of the op codes.

The part numbers are:
IBM: 52G7484 (phone 800-IBM-MIRS)
Motorola: MPC601 UM/AD
 (Motorola Literature Distribution, PO Box 20912, Phoenix, AZ 85036)
 (Motorola Ltd, European Literature Centre, 88 Tanners Dr, Blakelands,
  Milton Keynes, MK14 5BP, England)

(the two are the same, I think)

Hansruedi



------------------------------

From: oreillym@tartarus.uwa.edu.au (Michael O'Reilly)
Subject: Re: [Q] biff and comsat?
Date: 17 Sep 1993 15:50:23 GMT

Johannes Grosen (grosen@argv.cs.ndsu.nodak.edu) wrote:
: In article <1993Sep16.141819.23697@nrao.edu> rzm@oden.oso.chalmers.se (Rafal Maszkowski) writes:
: >Have anybody ported biff and comsat (are these 2 enough to get
: >messages about new mail?). If so - under which name can they be
: >found?

You also need your sendmail agent to be comsat aware (smail by default
isn't... ). 

: I have `ported' them to my machine but there really isn't any need if you
: are running `bash' as your shell. Check the `MAIL' and `MAILPATH'
: environment variables. Bash can monitor several mailboxes with the
: MAILPATH environment variable.

Prorting involved adding comsat to /etc/inetd.conf, and changeing the
signal handlers to re-install the signals after they were triggered.
3 lines added. Biff has #include <sgtty.h> to #include <bsd/sgtty.h>
and -lbsd added to the compile line. 



Michael.

------------------------------

From: evansmp@mb48057.aston.ac.uk (Mark Evans)
Subject: Re: Status of the NET-2 port
Date: Fri, 17 Sep 1993 17:09:34 GMT

Donald J. Becker (becker@super.org) wrote:

: I fall on both sides of this issue.  I've put a _lot_ of effort into
: the low levels of Linux networking, as almost all of the device-level
: code was written by me.  I would be very disappointed to see that
: thrown away.  I think many users would be disappointed as well -- the
: ethercard drivers have been very solid, and going to BSD code would
: mean dropping support for most of the not-quite-clone ethercards that
: many Linux users have.

They are also rather usefull, in being able to have a generic kernel
and not have to worry about IRQ's and such like of cards.
I wonder how much of the initialisation code could be shared between
the PLIP and parallel printer drivers. Checking the same piece of
hardware to see if exists twice appears to be overkill.

: On the other hand, I see the not yet released "Net-2e" development
: picking up significant parts of the BSD code, and I can't help
: wondering what their goals really are.  I see little difference
: between having 1/3 of the code being from BSD with the existing
: networking code changed to fit it (e.g.  changed from sk_buffs to
: mbufs), and 9/10 of being from BSD with only a new Linux kernel interface.

I would be more inclined to look at the Xinu code than the BSD code.
This forms part of a book describing the writing of a TCP/IP networking
module.

: Coupled with this is my frustration at the way new bugs were introduced
: with "Net-2", and then "development team" abandoned the code with the
: promise "everything will be fixed when we come out with yet another
: completely new structure".  I feel hamstrung, because any improvement

Such as? There cannot be very many sensible data structures to hold an
IP datagram.

: Even if the USL lawsuit didn't exist, I think it's a good thing that
: we are doing a publically-available networking implementation separate
: and distinct from BSD.  BSD has historic cruft, and most of the design
: decisions date from a far different era and are ripe to be
: revisited.  A notable example is the use of 'mbufs', a structure that
: is at the core of BSD networking.  It was designed to hold packets as
: a linked list of protocol headers and data pages.  This was a good

There are advantages in using some sort of linked data structure.
Notably that it can be added to, at either end, without needing to
physically copy data, which is a potentially expensive operation.

Most notably in fragment reassembly, the original size of the datagram
is unknown until the last (the one without the more-fragments bit set)
arrives, this is quite likely to be the last to arrive.
So that enforcing a linear buffer all the time has an 
allocate-copy-deallocate cycle of buffer.

: idea in the days of microcoded machines with complex addressing modes,
: short pipelines, and very small memories.  On modern machines they are
: slower than storing always storing the packet linearly.  (Would

I have wondered about using a linked structure, optimised to minimise
copying. Though this needs quite a bit of modifications in various places.
Depends how bored I get this weekend.

: someone care to comment on how many times 'mpullup()' occurs in BSD,
: and how expensive it is?)


------------------------------

From: iiitac@swan.pyr (Alan Cox)
Subject: Re: NetWare protocol stacks?
Date: Fri, 17 Sep 1993 16:21:06 GMT

In article <279prc$hg@samba.oit.unc.edu> jem@sunSITE.unc.edu (Jonathan Magid) writes:
>Yes, I believe this is more or less correct- the docs cover IPX and the
>what is neccesary to implement a Netware client (i.e. connecting to
>a server)- something less than full documentation, but more than just 
>IPX.  Of course this is all based on hearsay on both sides- perhaps
>someone should inquire to Novell or COSE, exactly what is available and
>how much $$ it costs?
>
It is possible to get the complete specification of IPX by reading the right
generally available books. In addition the routing algorithms (they use
RIP handily enough!) are easily deducable knowing this. The SPX spec
I've yet to see completely documented anywhere but I guess a little work
with a sniffer or a bit of bookwork would find that.
What Novell guard carefully is NCP the Netware Core Protocol which is the
layer used to do Novell Server type things. Thus building a linux<->novell
communication link is viable but Netware file access and stuff would be out.

With the current progress in free WinSockAPI type clients I feel a much
better line of attack would be to get involved in the NCSA free WinSockAPI
project and implement an NFS client on top of that (if nobody else has started)
Hint: The really evil stuff is the DOS network redirector, you can nick a 
complete redirector layer ready to go from MACH , or better still from
Linux DOSEMU. All that's needed then is to nail NFS and UDP on to it.

Alan




------------------------------

From: jhenders@jonh.wimsey.bc.ca (John Henders)
Subject: Re: GCC, is it a bug or isn't it?
Date: Thu, 16 Sep 1993 16:21:44 GMT

zmbenhal@netcom.com (Zeyd M. Ben-Halim) writes:

>>3.  Final problem.  Again when compiling Faircom's header files I came
>>  across this line:
>>#ifdef NEVER_DEFINED
>>  Hey you dummy, you defined NEVER_DEFINED.  
>>#endif
>>  The GCC compilere would complain and give me an error condtion on the
>>  ifdef'd line.  Isn't the preprocesor supposed to follow the conditionals
>>  the  same as the compilere? 
[...]
>I'm not sure what ANSI says about this but it is common in the transition
>from MSDOS to unix (or at least GCC). It should look like:
>#ifdef NEVER_DEFINED
>#error  Hey you dummy, you defined NEVER_DEFINED.  
>#endif

    Unless I'm missing something here, the above should work. According
to K&R, A 12.5, "text controlled by inactive arms of the conditional is
ignored except for checking the nesting of conditionals."


-- 
John Henders       GO/MU/E d* -p+ c+++ l++ t- m--- s/++ g+ w+++ -x+
                      Segments are for Worms

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Development-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux.development) via:

    Internet: Linux-Development@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    sunsite.unc.edu				pub/Linux

End of Linux-Development Digest
******************************
