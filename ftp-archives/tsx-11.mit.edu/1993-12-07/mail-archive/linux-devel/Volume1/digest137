From:     Digestifier <Linux-Development-Request@senator-bedfellow.mit.edu>
To:       Linux-Development@senator-bedfellow.mit.edu
Reply-To: Linux-Development@senator-bedfellow.mit.edu
Date:     Fri, 1 Oct 93 14:23:56 EDT
Subject:  Linux-Development Digest #137

Linux-Development Digest #137, Volume #1          Fri, 1 Oct 93 14:23:56 EDT

Contents:
  Re: No smart serial boards??? (Orc)
  Need programming info for FD TMC845 (robert.k.nichols)
  Source for DIP (Brett Michaels)
  Re: After Dark-like screensaver for Linux (Kevin S Ho)
  Re: xcalentool, xview (LMRusu)
  Re: Linux Slowly Dying Off? + Lets make a game for Linux (Humble Pie)
  Re: No smart serial boards??? (David Jeske)
  Dunamic loading of code ( like Sun) How??? (Martin Visser)
  Re: Linux Slowly Dying Off? + Lets make a game for Linux (Ian McCloghrie)
  Where is FD_SET, FD_ZERO, etc (Cameron Hutchison)
  Re: linux scheduler alternatives??? - MY IDEA (Matthew Dillon)
  Re: gdb doesn't work with pl12? (Michael Utech)
  Re: Tandy CDR-1000 CD-ROM (Phil Hughes)
  Re: No smart serial boards??? (Jon Brawn)

----------------------------------------------------------------------------

From: orc@pell.chi.il.us (Orc)
Subject: Re: No smart serial boards???
Reply-To: orc@pell.chi.il.us (Orc)
Date: Thu, 30 Sep 1993 18:22:13 GMT

In article <1993Sep27.011618.517@bhhome.ci.net>,
Bill Heiser <bill@bhhome.ci.net> wrote:
>
>Rich, what is your system like when all of your lines are in use?

   I'm not Rich, but I've my machine has got two serial ports, one
attached to a modem and the other attached to a terminal; when both
are running (at 38400, natch) with someone reading news on the
terminal and uucico reading news from the modem, I can tell no
difference, even during cpu-eating compiles, from when there is no
activity on the serial lines.

                 ____
   david parsons \bi/ orc@pell.chi.il.us
                  \/

------------------------------

Crossposted-To: comp.periphs.scsi,comp.sys.ibm.pc.hardware
From: rnichols@cbnewsg.cb.att.com (robert.k.nichols)
Subject: Need programming info for FD TMC845
Date: Thu, 30 Sep 1993 18:42:13 GMT

I have a Future Domain TMC845 so-dumb-you-don't-want-to-use-it SCSI
adapter.  I was wondering whether this device might be dumb enough that I
might write software that would allow it to be used as a SCSI bus
snooper.  Does anyone know whether this is possible/impossible?  Where
can I get the low-level (there is no other) programming information for
this device?

Email preferred.  I will forward or summarize if there is any other
interest.  Followups set to comp.periphs.scsi.

--
Bob Nichols
AT&T Bell Laboratories
rnichols@ihlpm.ih.att.com

------------------------------

From: brettm@access.digex.net (Brett Michaels)
Subject: Source for DIP
Date: 30 Sep 1993 14:51:39 -0400


Does anyones know where I can find the source code for DIP.  Does anyone
know who wrote it?


------------------------------

From: ksh@math.ufl.edu (Kevin S Ho)
Subject: Re: After Dark-like screensaver for Linux
Date: 30 Sep 1993 20:48:14 GMT


>> 
>> All that remains is for people to write nifty "modules" for
>> xscreensaver to use.

Try xfishtank!

It's cool


------------------------------

From: rusu@eniac.seas.upenn.edu (LMRusu)
Subject: Re: xcalentool, xview
Date: 30 Sep 93 23:41:50 GMT



>I am trying to compile a version of calentool 2.2X using Ken
>Osterberg's Linux XView port.  I grabbed the stock sources off

>>If you get this to work, Please Summarize .. I'd *love* to have
>>Calentool here.  Thanks!

>of sunsite (/pub/X11/contrib), configured a makefile and tried
>to build.  It bombs trying to include <sys/ucontext.h> 
>point and I have missed it?   Anybody else compiled calentool for
>Linux?  If you have could you drop me a line about how you did it?

>>It must be something the xcalentool "porter" did as a special.
>>I have SLS 1.03 (patched to p13) and I don't have that file either.

Get the xview3 from one of the sites, extract the file ucontext.h and 
copy it into your /usr/include/sys. 
Calentool 2.2x should compile fine after that (it did for me).
BTW, it's a great calendar program. 

Hope this helps,

L.R

--


------------------------------

From: boutell@netcom.com (Humble Pie)
Subject: Re: Linux Slowly Dying Off? + Lets make a game for Linux
Date: Fri, 1 Oct 1993 00:09:00 GMT

soup@penrij.UUCP (John R. Campbell) writes:
>What I find amusing is that MS-Windoze has only proven itself as a game
>program and screen-saver environment.  Why worry about *real* applications?
>Most people only run MineSweeper and/or Solitaire...

REALITY CHECK:

Excel
Word for Windows
Ami Pro
Pagemaker...

Etc etc etc etc etc etc etc.

-T
-- 

Tom Boutell, boutell@netcom.com

------------------------------

From: djeske@chameleon.uiuc.edu (David Jeske)
Subject: Re: No smart serial boards???
Date: 1 Oct 1993 02:11:40 GMT
Reply-To: jeske@ux4.cso.uiuc.edu

In article <28c8rq$4gh@crl.crl.com> mahmha@crl.com (Mark A. Horton) writes:
>> Bill Broadley (broadley@neurocog.lrdc.pitt.edu) wrote:
>> : > *ONE* line at 38400 ( modem on V.32bis TUUCP 1.04 g(7,1024) )
>> : > uses 3.x % CPU on my noname 486DX33 with 8 MB and a 16555 uart.

While I would not expect multiple lines (dumb serial lines) to 
increase the CPU load equally (i.e., 4 ports = 4*1port) It can be taxing.

As you may or may not have noticed, I recently started an Intelligent
Serial Board Driver project. We now have the driver sending and receiving 
code optimized. I'm happy to report that for one port we are consistantly
10-15% less CPU for a 38400 xfer than the xfer is on the "16550". And
We have found that (as we expected) the CPU load for added ports is
significantly less than for added ports on "dumb" serial solutions
(although this is farily hard to judge).

(I was using a Digiboard PC/8i board)


------------------------------

From: Martin Visser <Martin.mc.visser@bhpmelmsm.bhp.bhpmel04.telememo.au>
Subject: Dunamic loading of code ( like Sun) How???
Date: 1 Oct 1993 07:27:28 GMT

Hi,

I've obtained a network simulation package that compiles and runs on
SunOS. To enable
loading custom protocol simulation functions the program uses Sun's
dynamic
loading feature to compile and link in code at run-time. Can anyone give
hint's on if or how this can be done in linux.

Regards, Martin
               : Martin Visser
      /\/\     : BHP Steel - Slab & Plate Products Division 
     / / /\    : Engineering Technology - Computer Systems
    / / /  \   : PO Box 1854 Wollongong NSW 2502, AUSTRALIA
   / / / /\ \  : A.C.N. 006 476 218
   \ \/ / / /  : Phone     +61-42-753852
    \  / / /   : Fax         +61-42-757897
     \/\/\/    : Internet MARTIN.M.C.VISSER@
               :          BHPMELMSM.BHP.bhpmel04.telememo.au
               : X.400    G=MARTIN I=MC S=VISSER OU=BHPMELMSM O=BHP
               :          P=BHPMEL04 A=TELEMEMO C=AU

------------------------------

From: imcclogh@cs.ucsd.edu (Ian McCloghrie)
Subject: Re: Linux Slowly Dying Off? + Lets make a game for Linux
Date: 1 Oct 93 08:43:42 GMT

soup@penrij.UUCP (John R. Campbell) writes:

>>      As I understand it, X11R5 lacks the necessary hooks upon which
>>one would hang a user-defined screensaver program like After Dark.
>>I saw an announcement somewhere that X11R6 would correct this.

>See?  MS-Windoze actually contributed concepts to X-Windows!

        I'm fairly sure that Apple did it on the macintoy before
Microsoft did in windows.  Of course, that's not to say Apple didn't get
the idea from some other company...

--
 /~> Ian McCloghrie      | Commandant of Secret Police - Cal Animage Beta.
< <  /~\ |~\ |~> |  | <~ | email: ian@ucsd.edu               Net/2, USL 0!
 \_> \_/ |_/ |~\ |__| _> | Card Carrying Member, UCSD Secret Islandia Club

------------------------------

From: camh@nms.otc.com.au (Cameron Hutchison)
Subject: Where is FD_SET, FD_ZERO, etc
Date: 1 Oct 1993 09:29:37 +1000

Last night I tried to compile some software that used fdsets (presumably
for select(2)), but I got a link error saying that FD_SET, FD_ZERO
and FD_ISSET were undefined. I figured that the appropriate header
file wasnt being included so I grep'ed for FD_ in all my header files
but I couldnt find the macros that define them.

I did find a set of __FD_* macros in linux/types.h and gnu/types.h but
I didnt find anything anywhere without the __ prefix.

I am using libc 4.4.1, gcc 2.4.5 and linux 0.99p12

Can anybody tell me what I am missing?

-- 
Cameron Hutchison (camh@nms.otc.com.au) | Beware of the clams
GCS d--@ -p+ c++ l++ u+ e+ m+(-) s n- h++ f? !g w+ t r+ y?

------------------------------

From: dillon@moonshot.west.oic.com (Matthew Dillon)
Subject: Re: linux scheduler alternatives??? - MY IDEA
Date: 1 Oct 1993 02:03:19 -0700

In article <286i88INN9rh@fstgds15.tu-graz.ac.at> zloebl@piis10.joanneum.ac.at (Klaus ZLOEBL) writes:
>I found some time last weekend and read the khg
>after looking around in the kernel sources i had to notice
>that i don't fine the place where the timeout timer is set.
>So could somebody be so nice and tell me where to find it.
>
>Also i'd like to write a new scheduler (multilevel feedback queue)
>
>is there a new khg ? (i haven't seen one)
>
>What algorithm is use for paging?
>
>I have played with osp (an operating system simulator), but
>a real OS would be an even better playground!
>
>Thanks for any hints and pointers
>--
>
>Klaus Zloebl          | E-Mail: zloebl@piis10.joanneum.ac.at
>Joanneum Research     | PSI   : PSI%2631102911::ZLOEBL
>Steyrergasse 17       |
>A-8020 Graz           | Phone: ++43/316/8020/243
>AUSTRIA               |

    I have some ideas re: scheduling.  Specifically, the scheduler I did
    for a recent embedded OS.

    It's real simple, yet real powerful.

    It requires NO list traversal calculations at any time.  There is
    exactly ONE run queue and ONE wait queue.  It's incredibly easy to
    manage.

    Essentially, it works like this:  Each process is given a fixed 8 bit 
    unsigned priority.  The time-slice the process gets is:

                     pri
        maxTime * ----------
                   sum-pri

    maxTime = 50mS (smaller on faster machines.  The smaller this number,
              the greater the overhead, but the better the realtime response)
    pri     = priority of currently running task
    sum-pri = aggregate priority of all RUNNABLE tasks

    As you may have figured out, this scheme is really quite awesome in that
    process priorities are all relative and queue management is minimized.
    In my embedded OS, a complete task switch took 50uS on a 10MHz 68000.
    A 386 or 486 is at least 10 times faster (a 486DX2 is approximately
    20 times faster), so I would expect task switch times on the order of
    5-10uS...

    Furthermore, realtime response can be maintained even for low priority
    tasks because they get some amount of time each 50mS period (more on
    that in a moment).  Block/Unblock overhead is also greatly minimized.

    The only parameter the system needs to maintain is <sum-pri>, the
    aggregate sum of the priorities for all runnable tasks.  In otherwords,
    you add a task's priority to <sum-pri> when you put it on the run list,
    subtract it when you take it off, and modify <sum-pri> when a task
    who is on the run list is modified (i.e. renice).

    The implementation is even simpler... there is NO multiplication or
    division actually involved in the task switch interrupt itself, saving
    a lot of time.  Basically, you setup a fixed-rate timer interrupt at
    approximately 100Hz (10mS).  The faster the better... my embedded
    operating system implemented a 2mS time slice.  For me, the overhead was
    around 10uS/2mS (you don't switch tasks every interrupt!), or 0.5%.

    For a 386/486 with its greater interrupt overhead I would expect about
    the same percentage using a 2mS interrupt.

    What you do when the intrrupt occurs is a single subtraction:

        task->counter = task->counter - sum_pri

    when the counter goes negative you switch to the next task.  Note that
    YOU LEAVE THE COUNTER NEGATIVE!  You do not zero it.

    When you switch in the next task in the run queue you perform the 
    following calculation:

        task->counter = task->counter + (task->pri * CONSTANT)

    Where (task->pri * CONSTANT) is PRECALCULATED (only calculated when the
    task's priority actually changes, which is usually never!).  Now comes
    the tricky part.  If the counter is still negative, you skip the task
    and go on to the next one.  If the counter becomes positive you continue
    with the switch in and let it run.  the CONSTANT is directly related
    to the <maxTime> variable and based on the frequency of the timer
    interrupt verses <maxTime>.  It is effectively a constant.

    The end result is that the AVERAGE cpu the task gets is EXACTLY the
    ratio of its priority over the aggregate priority of all runnable
    tasks, NO MATTER WHAT INTERRUPT RATE YOU USE FOR YOUR BASE TIMER.  All
    the interrupt rate of the timer does is provide you with finer 
    granularity allowing you to get better real-time response from tasks
    in a heavily loaded system.

    The system has many advantages:

        * low overhead in a lightly loaded system because the time slices
          are larger.  For example, two processes of equal priority with
          <maxTime> set to 50mS will both get 25mS time slices.

        * Minimum time slice in a heavily loaded system.  A task will get
          a minimum time slice of one interrupt period.  Instead of the
          time slice getting smaller, the task will start to skip round
          robin periods when the switch-in addition to task->counter fails
          to make it positive again.

        * Adjustable real-time response.  Making <maxTime> smaller will 
          generally increase your real time response at a cost of switch
          overhead.  I suggest 50mS... That will allow the load factor
          to get to 25.0 with a 2mS timer interrupt before real time 
          response starts to suffer.

        * Extremely low overhead queueing and dequeueing operations and no
          other maintenance required.  Both the run and the wait queues are
          circular.  When you move a task to the run queue you ALWAYS ADD
          IT TO THE END OF THE QUEUE, JUST BEHIND THE CURRENTLY RUNNING 
          TASK.  This is necessary in order to avoid task starvation due to
          a high rate of deschedule/reschedule operations (i.e. synchronous
          IPC between two tasks could bring the rest of the system to a 
          grinding halt).

          But, the system will still compensate for the scheduling of a high
          priority task.  It's automatic and its free... the act of scheduling
          in a high priority task will cause <sum_pri> to increase and thus
          INSTANTLY give currently running tasks a shorter time slice,
          thereby getting to the scheduled in high priority task's queue
          position much faster.  If you need even faster response you can
          queue it in the front instead of the back, but I do not reccommend
          it due to the possibility of locking out other tasks in a runaway
          situation.

    Now, what about VM paging and thrashing?  Well, that's easy.

        * The task is not on the run queue during a pagein operation.

        * You can avoid thrashing by implementing thrashing management
          IN THE PAGEIN CODE, NOT IN THE SWITCHER CODE!  Thrash management
          really does belong in the pagein code.  Thrash management 
          consists simply of holding off the pagein operation for a period
          of time when thrashing is occuring.  This causes pagein activity
          to effectively 'burst' (hopefully with sequential block reads)
          rather then attempt to run multiple pageins for multiple tasks
          simultaniously (major seeking).

        * This allows you to implement different schemes based on the type
          of pagein occuring... i.e. file cache verses executable text
          page, data page, etc...

    What about fast-waits? A fast wait is when you do not bother to
    deschedule a task for an operation that 'blocks'.  Instead,
    you leave the task in the run-queue and 'poll' for completion, skipping
    the task if the poll returns FALSE.  This is EXTREMELY useful for 
    synchronous IPC applications.  By avoiding the four deschedule/reschedule
    calls that would normally occur for a single IPC transaction you get
    much faster synchronous response when the task is able to run the IPC
    and reply the message in less then a single time slice.  Of course,
    linux doesn't have to worry about that ... yet!

    I don't have time to implement this for linux myself, someone else
    care to?

    Next week, class, I'll describe the I/O subsystem for the embedded OS
    I did ;-)

                                        -Matt


    Matthew Dillon              dillon@moonshot.west.oic.com
    1005 Apollo Way             dillon@overload.berkeley.ca.us
    Incline Village, NV. 89451  ham: KC6LVW (no mail drop)
    USA                         Sandel-Avery Engineering (702)831-8000
    [always include a portion of the original email in any response!]


------------------------------

From: michael@utex.rni.sub.org (Michael Utech)
Subject: Re: gdb doesn't work with pl12?
Date: Thu, 30 Sep 1993 21:39:27 GMT

Mark Buckaway (mark@datasoft.com) wrote:
: Bill McCune (mccune@lutra.mcs.anl.gov) wrote:
: : When I call a function from gdb, I always get

: :         writing register number 10(0): I/O error.
: :         Unable to restore previously selected frame.

: : This is with pl12 and either gdb 4.8 and 4.10.pl1.

: : I hear that the problem does not exist with pl11.

: : Does this happen to anyone else?

: Bill, I've been using gdb 4.9 since 0.99.8 and it still works fine
: with 0.99.12 on my system. Perhaps, the best solution is to get gdb
: 4.9. The sources (all 5 megs worth) are on prep.ai.mit.edu in
: /pub/gnu. It compiles cleaning on a Linux system.

It won't work with gdb-4.9 either, at least it didn't for me.

I had the same problem since pl12. Apearently this isn't a problem
with gdb but with gcc-2.4.3 and the new kernel. You may try to recompile
the kernel with gcc-2.4.5 (as suggested in the README file for pl12 or 13)
if you also used an older version of gcc.

Hope that helps,
- Michael
-- 
Michael Utech, Max-Planck-Str.26, 69519 Viernheim, Germany
email: michael@utex.rni.sub.org, fm04@rummelplatz.uni-mannheim.de
phone: +49 6204 {4031 (home), 65929 (work), 740309 (data)}

------------------------------

From: fyl@fylz.com (Phil Hughes)
Subject: Re: Tandy CDR-1000 CD-ROM
Date: Fri, 1 Oct 1993 08:09:26 GMT

Spanky Sautins (sautins@rintintin.Colorado.EDU) wrote:
: 
:       Has anyone had any luck developing a driver, or using and existing
: driver for the Tandy CDR-1000 CD-ROM???

This is the Mitsumi CD-ROM and it works fine with the current Mistumi
(mcd.c) driver.
-- 
Phil Hughes - FYL - 8315 Lk City Wy NE - Suite 207 - Seattle, WA 98115 
Phone: 206-526-2919      Fax: 526-0803
E-mail: fyl@fylz.com or <most_anywhere>!fylz!fyl 

------------------------------

From: jonb@specialix.com (Jon Brawn)
Subject: Re: No smart serial boards???
Date: Fri, 1 Oct 1993 17:39:59 GMT

stimpson@panix.com (S. Joel Katz) writes:

>In <2731@blue.cis.pitt.edu> broadley@neurocog.lrdc.pitt.edu (Bill Broadley) writes:

>>> *ONE* line at 38400 ( modem on V.32bis TUUCP 1.04 g(7,1024) )
>>> uses 3.x % CPU on my noname 486DX33 with 8 MB and a 16555 uart.

>>I would suspect that 4 lines at 38,400 would be less then 4 * this,
>>during a single overhead of an interupt, all 4 ports can have their
>>buffers emptied.

>>Even 8 ports at 38,400 would probably be reasonable, if all 8 transfered at
>>full speed they probably would lose some bandwidth, but normally that
>>wouldn't be a problem, unless it's basically a file server.

>>--
>>Bill                                  1st>    Broadley@neurocog.lrdc.pitt.edu
>>Broadley@schneider3.lrdc.pitt.edu <2nd        3rd>                 Broadley+@pitt.edu
>>Linux is great.         Bike to live, live to bike.                      PGP-ok

>       One trick that we have used and found cost-effective for 16 or
>more ports is to take a 386sx system booting Linux from floppy and using
>it as a serial port server. Just set up the system to automatically telnet
>each line to your host system and connect it by ethernet.

Cough. Surely the overhead of running all that TCP/IP code on the host
is going to be enormous compared to the overhead of just running serial
ports? Telnet to a unix host will run in character-at-a-time mode, so 
that VI (emacs) will work, and everytime you press one of them buttons
on the keyboard, you will send an entire ethernet packet to be processed
by the TCP/IP stack and delivered through a pseudo tty device pair.

I cannot possibly recommend this type of instalation.

Jon.
>SJK


------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Development-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux.development) via:

    Internet: Linux-Development@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    sunsite.unc.edu				pub/Linux

End of Linux-Development Digest
******************************
