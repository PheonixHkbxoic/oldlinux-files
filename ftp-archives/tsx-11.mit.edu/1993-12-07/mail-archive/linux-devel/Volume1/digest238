From:     Digestifier <Linux-Development-Request@senator-bedfellow.mit.edu>
To:       Linux-Development@senator-bedfellow.mit.edu
Reply-To: Linux-Development@senator-bedfellow.mit.edu
Date:     Fri, 19 Nov 93 20:13:09 EST
Subject:  Linux-Development Digest #238

Linux-Development Digest #238, Volume #1         Fri, 19 Nov 93 20:13:09 EST

Contents:
  Re: Some ideas and reasons for a more modular kernel. (Don Holzworth)
  Re: Some ideas and reasons for a more modular kernel. (na6130400-Beuning)
  No core dumped? (Holger Muenx)
  Adding new HD controller driver -- Where do I start? (Alan Wenban)
  Re: Don't use Motif for free sw: it now requires runtime royalties! (Guy Harris)
  Re: Don't use Motif for free sw: it now requires runtime royalties! (Guy Harris)
  Major file locking problem in .99.13r (and others) !!!! (Gregory Gulik)
  Re: Don't use Motif for free sw: it now requires runtime royalties! (Barry A. Warsaw)
  Re: Some ideas and reasons for a more modular kernel. (Michael K. Johnson)
  Re: Don't use Motif for free sw: it now requires runtime royalties! (Scott Preece)
  Re: Don't use Motif for free sw: it now requires runtime royalties! (Clayton Haapala)
  Re: Don't use Motif for free sw: it now requires runtime royalties! (Warner Losh)

----------------------------------------------------------------------------

From: donh@gcx1.ssd.csd.harris.com (Don Holzworth)
Subject: Re: Some ideas and reasons for a more modular kernel.
Date: 18 Nov 1993 18:59:41 GMT
Reply-To: donh@gcx1.ssd.csd.harris.com (Don Holzworth)

In article <2cg3g1$oo2@illuminati.io.com>, async@illuminati.io.com (Felix Sebastian Gallo) writes:
|> richard@harlequin.co.uk (Richard Brooksby) writes:
|> 
|> >This is just some rather loose ideas about devices-as-tasks which may
|> >be useful.  I'm sorry I haven't had time to make this into a coherent
|> >proposal.
|> 
|> >Reading the Kernel Hacker's Guide, I noticed a comment about the
|> >monolithic Linux kernel.  I can't recall the exact details, but it
|> >expressed doubt as to why anyone would want a non-monolithic kernel.
|> >Here's an example of why I'd like device drivers to be tasks -- at the
|> >user level if possible.
|> 
|> Device drivers at the user level turn out to be a really bad idea
|> due to context switching.
|> 
What is the context switch time for linux? Wouldn't the trade off be
the data copy time between kernel and user space required for
kernel drivers and the context switch time required to handle
interrupts by a user level driver? If the context switch time
is low enough, and there are enough bytes copied per interrupt,
then the advantage would swing to the user driver. For devices which
interrupt for each character, there doesn't seem to be much contest.
However, for a LAN driver which on Ethernet has up to 1500 (OK, 1518)
bytes per interrupt, there might be some advantage. Move to
a FDDI where it's 4K per interrupt, and now we're talking. Of course
this requires locking pages in memory and if you get too
liberal with that, the times begin to get excessive there, too. I think
that in general, there is no general answer. The particular driver
and the particular application using it determine the utility of
user level drivers. Even splitting the driver between the user level
and the kernel is appropriate for some combinations of circumstances.
Now that I'm more confused than ever, I'll let the rest of you
figure out what's best. :-)

Regards,
==============================================================================
 donh@travis.csd.harris.com        |  Don Holzworth
 All opinions are mine alone.      |  (305) 977-5563
                                   |
      "I often quote myself. It adds spice to my conversation."
==============================================================================

------------------------------

From: bgb@psp710.ATT.COM (na6130400-Beuning)
Subject: Re: Some ideas and reasons for a more modular kernel.
Date: Thu, 18 Nov 1993 23:38:16 GMT

In article <CGLH1M.3xw@harlequin.co.uk> richard@harlequin.co.uk (Richard Brooksby) writes:

   A better approach would be to create a new block-special device which
   compresses blocks opaquely and is ignorant of any file-system
   structure imposed apon it.
        ...
   I should be able to create such a device as an extra layer on top of
   an existing block-special device.  For example:
        ...
   The latter assumes that the kernel can `call' the cbd process to
   service read/write/seek requests just like a device compiled into the
   kernel.  The interface for this isn't clear to me -- I've only just
   started thinking about this -- but I'm sure it's fairly simple.

   And why stop there?  The other devices could be provided by tasks with
   IO privelege -- hard disk, floppy disk, serial ports, you name it.

A couple of other replies were quick to point out the added overhead
imposed by the context switches by this proposal.  The same arguments
have been used about some features of Mach.

The idea is you want to be able to extend the kernel and add operating
system features that were not thought of when you wrote the operating
system.  One solution is to write the kernel with a general facility
for loading new code into the kernel while it is running.  This lets you
add most anything you want and does not suffer the context switch penalties
of putting the new code in a separate process.

Of course the interfaces within the kernel need to be set up properly
to allow layers of software to be inserted between other layers (to
support the compressed filesystem example in the original posting).
This isn't new, it sounds a lot like STREAMS.

Linux presently has the modules 0.1 package, which works, but is not
as thorough as you would like.

                Brian Beuning
                brian.beuning@att.com

------------------------------

From: muenx@heike.informatik.uni-dortmund.de (Holger Muenx)
Crossposted-To: comp.os.linux.admin
Subject: No core dumped?
Date: 18 Nov 1993 19:28:00 GMT


Guten Tag!

During a major upgrade session on weekend I installed the kernel 0.99.13 and
libs 4.4.4. Everything seems to work fine, except the fact that programs
refuse to dump core.

That's good news, you say.

Not really: Those programs are buggy and cause segmentation faults and other
nasty problems. After a segmentation fault I do not find a "core" or
"core.<progname>" file anywhere. Moreoever, in the message "Segmentation
fault" the usual "core dumped" is omitted.

Does anybody else experience that problem? How can I get rid of it?

Some experiments have shown that the new kernel is the problem. Going back to
older libraries does not change anything. Switching back to an older kernel
(pl11) makes me happy again with lots of cores!

My next thought was that the quota and job accounting patches may be
responsible. I unpacked a pure kernel and quickly compiled it and still
experienced missing core files.

Any information will be appreciated! Vielen Dank im voraus!

Holger Muenx (muenx@heike.informatik.uni-dortmund.de)

------------------------------

From: wenban@cs.cornell.edu (Alan Wenban)
Subject: Adding new HD controller driver -- Where do I start?
Date: Thu, 18 Nov 1993 19:25:27 GMT

I would like to write a new device driver for linux for a
hard drive controller that is not currently supported.  I
have the kernel sources installed, but don't know where to
start.  Can someone direct me to the appropriate sources that I
need to modify?  Also, is there some high-level description of
what functions all linux block device drivers must support
and how they are interfaced to the rest of the kernel?
-- 
======================================================================
Alan Wenban             |          Cornell University
wenban@ee.cornell.edu   |   School of Electrical Engineering
======================================================================

------------------------------

From: guy@Auspex.COM (Guy Harris)
Crossposted-To: comp.windows.x,comp.windows.x.i386unix,comp.windows.x.motif,gnu.misc.discuss,comp.sources.d
Subject: Re: Don't use Motif for free sw: it now requires runtime royalties!
Date: 19 Nov 93 02:49:34 GMT

>which tells me that no Motif runtime libraries are needed, nor is Mosaic
>statically linked.

"is_statically_linked" is not a predicate that takes an executable image
as an argument, at least in SunOS 4.x and SVR4/SunOS 5.x.  The predicate
is "is_statically_linked_with", and takes both an executable image *and*
a library as arguments. :-)

I.e, Mosaic could well have been linked statically with "-lXm" (and
"-lXt" and "-lX11", as they don't show up in the "ldd" output either)
and linked dynamically with all the libraries listed.

If that's the case, then it sounds as if, were it linked with the
"wrong" version of the Motif library, it would require a run-time
license.

>Where/why should OSF get a payment for my ability to run Mosiac?  Is this
>example not allowed by the Motif licensing agreement?

I presume the idea is that, if you run an application that was linked
with the Motif library, you need to pay OSF for the right to use the
Motif library code.

If the application was dynamically linked with the Motif library, then,
to run it, you probably have to have a copy of the shared library on
your machine, in which case you've presumably paid a license fee for it,
the appropriate amount of which went to OSF.

If the application was *statically* linked with the Motif library, then,
in effect, whoever handed you the application also handed you a copy of
the Motif library - or, at least, of those parts of the library linked
into the application.  OSF presumably wants whoever handed you the
application to kick back a license fee to them for the right to hand you
those Motif library routines.

------------------------------

From: guy@Auspex.COM (Guy Harris)
Crossposted-To: comp.windows.x,comp.windows.x.i386unix,comp.windows.x.motif,gnu.misc.discuss,comp.sources.d
Subject: Re: Don't use Motif for free sw: it now requires runtime royalties!
Date: 19 Nov 93 02:54:14 GMT

>I dunno, but I remember it beeing the other way 'round. Statically linked
>is ok to distribute under the OSF license. Dynamically linked binaries are
>taboo. 

That sounds a tad bizarre.  If the goal is to ensure that nobody gets to
use Motif without paying a royalty to OSF then, as has been noted by
others, dynamically-linked binaries do that quite well; if you don't
have the Motif shared library on your system, a binary dynamically
linked with the Motif library isn't going to run until you get a copy
from somebody who is presumably either

        1) paying a royalty to OSF for shipping the shared library

or

        2) violating the terms of their license with OSF

unless, of course, somebody's re-implemented the ABI of the Motif
library without using any of OSF's code, and given you *that* shared
library.  If they really are requiring people who ship applications
*dynamically* linked with the Motif library to pay a royalty, or
something such as that, perhaps that's what they're trying to
prevent....

------------------------------

From: greg@serveme.chi.il.us (Gregory Gulik)
Subject: Major file locking problem in .99.13r (and others) !!!!
Date: Fri, 19 Nov 1993 01:55:56 GMT


I think I've finally narrowed down a problem I've been having
with Smail for the longest time.

Every once in a while, I notice that local mail delivery stops,
and a lot of hung smail/sendmail processes exist on the system.
After checking some things, I found that they are hung at the
point where they write a temporary file in /usr/spool/smail/input
and are trying to lock it.  The other clue that if there already
is mail in /usr/spool/smail/input, a runq -v shows that it can't
open the files because they're locked.

So, it would appear that whatever locking Smail is doing, is hanging
the process so bad that I can't kill it!!


BTW, is there a Net channel for discussion of things like this?

-greg

-- 
Gregory A. Gulik                                 Call Gagme, a public access
       greg@gagme.chi.il.us                      UNIX system at 312-282-8606
   ||  gulik@rtsg.mot.com                        For information, send E-mail
                                                 to info@gagme.chi.il.us

------------------------------

Crossposted-To: comp.windows.x,comp.windows.x.i386unix,comp.windows.x.motif,gnu.misc.discuss,comp.sources.d
From: warsaw@nlm.nih.gov (Barry A. Warsaw)
Subject: Re: Don't use Motif for free sw: it now requires runtime royalties!
Reply-To: warsaw@nlm.nih.gov (Barry A. Warsaw)
Date: 18 Nov 1993 19:14:44 GMT


First of all, for some reason (probably a brilliant marketing ploy by
OSF 1/2 :-), they call both their specification and implementation
"Motif".  On the other hand, OpenLook is a specification only, while a
number of implementations exist (XView, OLIT, TNT, ...).  Its
unfortunate that OSF did this because it confuses the issue greatly.

While I personally detest MotifLAF, it is arguably a Good Thing that
the Industry has agreed to a common look-and-feel specification, no
matter what that is.  My own personal view (worth about $0.00 to you
I'm sure :-) is that for novices, a common LAF can be good, but that
ultimately the more experienced end user should be able to customize
their environment to a high degree, including being able to select the
unifying paradigm. I don't expect to see this anytime soon.  The
Motif/OpenLook/MacGUI debate is more useless than moot too since its
all religion anyway.

I would sincerely hope that COSE did *not* adopt OSF's MotifAPI
because this would be an incredibly Bad Thing.  If you want to ship
COSE compliant software, free or not, that's fine.  Make it comply
with the MotifLAF specification and protocols.  But I would be very
upset if to do this I had to somehow link my application with a
specific vendor's API written in C. That's just plain ridiculous. And
if OSF is requiring payment for use of their LAF and protocols, this
would also be very bad but my understanding is that the spec and
protocols are free and unencumbered as part of the COSE agreement.
Good.

Given that all the above is correct, there are a number of ways you
can write nearly COSE compliant free software today.  Joe mentioned
Tcl/Tk and I think that's an excellent way to go. Hopefully in the
future, a nice C++ toolkit (perhaps Fresco) will support MotifLAF, and
maybe other LAF's (MacGUI, OpenLook, flatAthena, MyNewWizzyLAF :-) in
an object-oriented way, with all that implies.  If I remember
correctly, Interviews had the concept of a "kit" which implemented
different LAF's.  OI's toolkit, while not free, provided a common C++
API which could be run-time switched between different LAFs.

So go ahead and write free Motif software, just don't use Motif :-).

Or try convince others to do this.

Or find a free toolkit that implements a Motif LAF and improve it.

All of the above can help the cause of free software.

------------------------------

From: johnsonm@calypso.oit.unc.edu (Michael K. Johnson)
Subject: Re: Some ideas and reasons for a more modular kernel.
Date: 19 Nov 1993 03:22:47 GMT

In article <CGLH1M.3xw@harlequin.co.uk> richard@harlequin.co.uk (Richard Brooksby) writes:

   Reading the Kernel Hacker's Guide, I noticed a comment about the
   monolithic Linux kernel.  I can't recall the exact details, but it
   expressed doubt as to why anyone would want a non-monolithic kernel.

Hmm.  I'll believe that you can't recall the exact details, since I'm
quite sure that I didn't write that I doubt that anyone would want a
non-monolithic kernel.  I *did* write that minix shows that it is
possible to write a microkernel, but does not show why you would want
to write one, but that does not condemn microkernels in general.  In
fact, I'm one of those who has suggested VSTa to people looking for a
microkernel free OS.  I have no problems with microkernels -- but
Linux is not structured in a way that would make it easy to bludgeon
into a microkernel, and I do recommend at the beginning that beginning
enthsiastic kernel hackers not come out on comp.os.linux.development
babbling about their great idea to turn Linux into a microkernel
realtime plan 9 clone (yes, I know that plan 9 is not a microkernel,
but a clone could be implemented as one) or whatever their niftiest
latest idea is.

I don't want to denigrate your ideas about compressed blocks, but I
would like to point out that device drivers as user processes isn't
the only way to do it.  Your compressed block device could also be
provided within the kernel proper as a part of the Logical Disk
Manager that I intend to work on.  This is a layer implemented as a
special (no pun intended) block device that can be insterted between
the buffer cache and other block devices, and into which almost any
modular mapping of blocks to blocks, including compression, could be
fit.

I still think that a compressed filesystem is better for compressed
disk access, because I don't think that inode and other metadata
should be compressed...

This is *not* a flame!!!!!!!!!

michaelkjohnson

------------------------------

From: prestat@uicsl.csl.uiuc.edu (Scott Preece)
Crossposted-To: comp.windows.x,comp.windows.x.i386unix,comp.windows.x.motif,gnu.misc.discuss,comp.sources.d
Subject: Re: Don't use Motif for free sw: it now requires runtime royalties!
Date: 18 Nov 93 15:38:36

In article <WARSAW.93Nov18141444@anthem.nlm.nih.gov> warsaw@nlm.nih.gov (Barry A. Warsaw) writes:

|   I would sincerely hope that COSE did *not* adopt OSF's MotifAPI
|   because this would be an incredibly Bad Thing.  If you want to ship
|   COSE compliant software, free or not, that's fine.  Make it comply
|   with the MotifLAF specification and protocols.  But I would be very
|   upset if to do this I had to somehow link my application with a
|   specific vendor's API written in C.
---

COSE does specify the Motif API.  On the other hand, though, there's
nothing to stop someone else from implementing that API, so it's not
bound to OSF except to the extent that OSF has the only implementation
of the API today and the vendors, being cost-sensitive, are satisfied to
buy that implementation rather than building their own.

scott
--
scott e. preece         motorola computer group
                        1101 e. university, urbana, il   61801
preece@urbana.mcd.mot.com

------------------------------

Crossposted-To: comp.windows.x,comp.windows.x.i386unix,comp.windows.x.motif,gnu.misc.discuss,comp.sources.d
From: clay@haapi.mn.org (Clayton Haapala)
Subject: Re: Don't use Motif for free sw: it now requires runtime royalties!
Date: Thu, 18 Nov 1993 20:16:26 GMT

In article <rick.753620843@digibd>,
Rick Richardson <rick@digibd.digibd.com> wrote:
>Statically linked Motif binaries are simply too large to be of much value.
>
>There is not much that the OSF can do to police and enforce this policy,
>however, they don't have to - it is self enforcing since statically linked
>binaries are just not practical.
>
Haven't programmed on raw BSD lately?  Statically linked binaries are just
LARGE, but not impractical.  My viewpoint is from development on a MACH2.5
system with the BSD server and no shared libraries.  Hey, disk is cheap,
these days.

Unenforcable royalties will atrophy and die, especially if the interface is
cloned.  But that's a different issue.
-- 
Clay Haapala                    "Well, there was the process of sitting around
clay@haapi.mn.org                and wishing I had more computer stuff."
                                        -- Dilbert

------------------------------

Crossposted-To: comp.windows.x,comp.windows.x.i386unix,comp.windows.x.motif,gnu.misc.discuss,comp.sources.d
From: imp@boulder.parcplace.com (Warner Losh)
Subject: Re: Don't use Motif for free sw: it now requires runtime royalties!
Date: Thu, 18 Nov 1993 20:05:48 GMT

In article <PCG.93Nov17202720@frontb.aber.ac.uk> pcg@aber.ac.uk (Piercarlo Grandi) writes:
>There are several alternatives to Motif:
>[...]
   * the OI library, which implements both the OPEN LOOK and Motif
     look and feels.  It is freely distributable in binary form for
     Linux (and soon *bsd).

>  * the Interviews library, for C++ programmers, is also very high
>    quality and easy to program for, and rumour is that it will become
>    a standard part of X11R6.

Nope.  Something done by the same author, Mark Linton, will be on the
X11R6 tape.  It is called Fresco, but it doesn't have a look and feel
to it.

Warner
-- 
Warner Losh             imp@boulder.parcplace.COM       ParcPlace Boulder
I've almost finished my brute force solution to subtlety.

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Development-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux.development) via:

    Internet: Linux-Development@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    sunsite.unc.edu				pub/Linux

End of Linux-Development Digest
******************************
