From:     Digestifier <Linux-Development-Request@senator-bedfellow.mit.edu>
To:       Linux-Development@senator-bedfellow.mit.edu
Reply-To: Linux-Development@senator-bedfellow.mit.edu
Date:     Fri, 8 Oct 93 07:13:08 EDT
Subject:  Linux-Development Digest #148

Linux-Development Digest #148, Volume #1          Fri, 8 Oct 93 07:13:08 EDT

Contents:
  Re: GCC and structure field alignment (Lars Wirzenius)
  Re: Xfree vs. BIOS (David E. Wexelblat)
  Re: GCC and structure field alignment (Jawaid Bazyar)
  Re: Use of gdb for kernel debugging: an idea (Eric Youngdale)
  Re: GCC and structure field alignment (Adrie Koppes)
  /dev/ports usage (Eric Williams)
  Re: CFC/CFI: XSysadmin (Karl Lehenbauer)
  Re: GCC and structure field alignment (John Paul Morrison)
  SIGIO in Linux (Dmitry Teytelman)
  Re: Trantor T348 MiniSCSI Plus support? (Drew Eckhardt)
  Re: Trantor T130B SCSI Controller (Drew Eckhardt)
  Re: CFC/CFI: XSysadmin (Markus Storm)
  Re: [PATCH] BogoBoost speedup for Linux (Bernd Meyer)
  Re: CFC/CFI: XSysadmin (Olaf Frommann)
  Re: debuggers & core inspectors (Michael Golan)
  Re: Use of gdb for kernel debugging: an idea (Michael Golan)

----------------------------------------------------------------------------

From: wirzeniu@cs.Helsinki.FI (Lars Wirzenius)
Subject: Re: GCC and structure field alignment
Date: 7 Oct 1993 22:54:33 GMT

bazyar@mrcnext.cso.uiuc.edu (Jawaid Bazyar) writes:
> For a total of 6 bytes. Unfortunately, gcc is insisting on aligning
> the various fields to at least two bytes (a and b/c are being aligned
> on word boundaries, I believe).

It's free to do that, according to the language definition.

> This wouldn't be a big deal if THE GCC MANPAGE LISTED THE 80X86 OPTIONS
> FOR GCC!! 

That might be nice; however, the man page for gcc is updated sporadically
so you should check out the info docs instead.

(When you learn of the 80x86 options, please fix the man page and
distribute it; else you're a hypocrit for complaining that other 
people don't fix problems in documentation.)

> I refuse to declare it as a character array because the bloody compiler
> is supposed to do this kind of thing for me.  

That's exactly what you should do, actually, if you want it to work
regardless of compilers and compiler options.  Otherwise you're going
to have problems with padding for a long time to come.

> So, could someone who knows please email me the appropriate option or
> suggestions?

BTW, since this is hardly Linux-related, it would be better to ask in
one of the GCC related groups or mailing lists (you know, the places
where the people actually work on gcc hang out).  I think one of them's
called gnu.gcc.help, but since I'm mostly uninterested in the stuff,
I can't remember for sure.

--
Lars.Wirzenius@helsinki.fi  (finger wirzeniu@klaava.helsinki.fi)
It doesn't matter who you are, it's what you do that takes you far. --Madonna

------------------------------

From: dwex@mtgzfs3.att.com (David E. Wexelblat)
Subject: Re: Xfree vs. BIOS
Date: Thu, 7 Oct 1993 22:40:30 GMT

In article <CEI6ML.2u3@watdragon.uwaterloo.ca> rpgallan@jeeves.uwaterloo.ca (Robert Gallant) writes:
> 
> I have an idea i've been thinking about, but, not wanting to be shot down
> by some hot fingered netter, have kept silent.  but it's related to this 
> thread, ... so
> 
> Since the makers of video cards generally always write a windows 
> driver, would it be possible to write a program to extract the 
> neccessary code from a windows driver to make it work with Xfree?
> This wouldn't have to be incorporated into the Xfree program 
> itself, but could be used to make just the driver portion, which
> could be linked in.  Could this work?
> --Rob
>                             
> 

Windows == 16 bits.

Unix == 32 bits.

Any other questions?

Not to mention, the ethics of such an approach, if not the legality, is
highly questionable.  I consider reverse-engineering a "bad thing",
in general.

--
David Wexelblat <dwex@mtgzfs3.att.com>  (908) 957-5871  Fax: (908) 957-5305
AT&T Bell Laboratories, 200 Laurel Ave - 3F-428, Middletown, NJ  07748

XFree86 requests should be addressed to <xfree86@physics.su.oz.au>

"If you don't expect too much from me, you might not be let down."
        -- Gin Blossoms, "Hey Jealousy"

------------------------------

From: bazyar@mrcnext.cso.uiuc.edu (Jawaid Bazyar)
Subject: Re: GCC and structure field alignment
Date: 8 Oct 1993 00:40:52 GMT

wirzeniu@cs.Helsinki.FI (Lars Wirzenius) writes:

>bazyar@mrcnext.cso.uiuc.edu (Jawaid Bazyar) writes:

>> This wouldn't be a big deal if THE GCC MANPAGE LISTED THE 80X86 OPTIONS
>> FOR GCC!! 

>That might be nice; however, the man page for gcc is updated sporadically
>so you should check out the info docs instead.

  Info docs?

>(When you learn of the 80x86 options, please fix the man page and
>distribute it; else you're a hypocrit for complaining that other 
>people don't fix problems in documentation.)

  Um. It's not my compiler :) I maintain excellent docs on all my software
(well, I have to, being a commercial developer). Linux's main lack is
professional documentation.

>> I refuse to declare it as a character array because the bloody compiler
>> is supposed to do this kind of thing for me.  

>That's exactly what you should do, actually, if you want it to work
>regardless of compilers and compiler options.  Otherwise you're going
>to have problems with padding for a long time to come.

  That's silly, though. The whole point of bitfields is to compress
a bunch of small items into one word; if the compiler doesn't do that
then the compiler is broken. Most other C Compilers I've ever used
work properly in this regard.

--
 Jawaid Bazyar              |   Like UNIX? Like your Apple IIGS? Then ask
 Procyon, Inc.              |   me about GNO/ME for the Apple IIgs!   
 bazyar@cs.uiuc.edu         |   P.O Box 620334
 --Apple II Forever!--      |   Littleton, CO 80162-0334   (303) 781-3273

------------------------------

From: eric@tantalus.nrl.navy.mil (Eric Youngdale)
Subject: Re: Use of gdb for kernel debugging: an idea
Date: Fri, 8 Oct 1993 01:22:03 GMT

In article <1993Oct7.192833.19857@unlv.edu> ftlofaro@unlv.edu (Frank Lofaro) writes:
>       I had posted before that I have used:
>
>gdb /usr/src/linux/tools/system /dev/core
>
>       on a kernel compiled with -g in order to examine kernel
>variables. However it couldn't modify them; i.e. if I did "set foo=5"
>it would say "Cannot access memory at 0xbar", where bar equals &foo.
>Now could one patch gdb to instead of doing a direct write, instead
>lseek on /dev/kmem (is this right, or should one use /dev/mem), and do
>a write(fd, &value, sizeof(value)), where value is the value being
>assigned to the variable? Would this be really hard?

        It would be much easier to patch the /dev/core (soon to be /proc/kcore)
device to allow you to write to it.

-Eric


-- 
"When Gregor Samsa woke up one morning from unsettling dreams, he
found himself changed in his bed into a lawyer."

------------------------------

From: adrik@paramount.nikhefk.nikhef.nl (Adrie Koppes)
Subject: Re: GCC and structure field alignment
Date: Fri, 8 Oct 1993 01:54:47 GMT

bazyar@mrcnext.cso.uiuc.edu (Jawaid Bazyar) writes:

>  That's silly, though. The whole point of bitfields is to compress
>a bunch of small items into one word; if the compiler doesn't do that
>then the compiler is broken. Most other C Compilers I've ever used
>work properly in this regard.

If you have the source for GCC, I believe there is a #pragma pack() option
implemented for some architectures. If you enable this and recompile GCC, it
should do exactly what you want. No alignment between structure members.
You still get alignment between structures though.

>--
> Jawaid Bazyar              |   Like UNIX? Like your Apple IIGS? Then ask
> Procyon, Inc.              |   me about GNO/ME for the Apple IIgs!   
> bazyar@cs.uiuc.edu         |   P.O Box 620334
> --Apple II Forever!--      |   Littleton, CO 80162-0334   (303) 781-3273

Adri Koppes,
Amsterdam,
The Netherlands.
adrik@paramount.nikhefk.nikhef.nl

------------------------------

From: wd6cmu@netcom.com (Eric Williams)
Subject: /dev/ports usage
Date: Fri, 8 Oct 1993 04:56:25 GMT


Can someone please email me some sample code that shows a use of
/dev/ports in an application?  Thanks.
-- 
Eric Williams      |  Vincent: MC (B+S)t G+Y 1.1 Y L++ C+ T+ I+++ H+ S++ V+ F++
wd6cmu@netcom.com  |  Murphy: DS W+(B+R)t+R Y 1.2 Y L C+ T- I+++ H+ A+ F+ B--
WD6CMU@WD6CMU.#NOCAL.CA.USA.NA


------------------------------

Crossposted-To: comp.lang.perl,comp.lang.tcl
From: karl@NeoSoft.com (Karl Lehenbauer)
Subject: Re: CFC/CFI: XSysadmin
Date: Fri, 8 Oct 1993 04:30:27 GMT

In article <KRAUS.93Oct5130245@orchid5.rtsg.mot.com> kraus@rtsg.mot.com (David Kraus) writes:
>Perl...
>But, you don't get the nice X interface that you would with tcl/tk.  You
>do, however, get termcap support.

Tcl users needing curses support should grab:
harbor.ecn.purdue.edu:/pub/tcl/extensions/tcl_curses.shar.Z
-- 
-- Email info@NeoSoft.com for info on getting interactive Internet access.
"The road untravelled is the road that can be endlessly speculated about."


------------------------------

From: jmorriso@rflab.ee.ubc.ca (John Paul Morrison)
Subject: Re: GCC and structure field alignment
Date: 8 Oct 1993 07:28:07 GMT

In article <29217e$292@vixen.cso.uiuc.edu>,
Jawaid Bazyar <bazyar@mrcnext.cso.uiuc.edu> wrote:
>I'm trying to create the following structure:
>

#pragma pack(1)

>struct foo {
>  unsigned char a; // 1 byte
>  unsigned b : 4; // 4 bits
>  unsigned c : 4; // 4 bits
>  unsigned long d; // 4 bytes
>}

#pragma pack(4)
>
>For a total of 6 bytes. Unfortunately, gcc is insisting on aligning
>the various fields to at least two bytes (a and b/c are being aligned
>on word boundaries, I believe).

problem: (according the OS/2 gcc 2.4.5  .inf file)

o GCC cannot compile expressions referencing bitfields of a packed
structure (see #pragma pack()).



>
>This wouldn't be a big deal if THE GCC MANPAGE LISTED THE 80X86 OPTIONS
>FOR GCC!! 
> 
>I refuse to declare it as a character array because the bloody compiler
>is supposed to do this kind of thing for me.  
>
>So, could someone who knows please email me the appropriate option or
>suggestions?

#pragma pack() orders the data correctly, whether the compiler code
works is another thing. better check the assembly output.
>
>Thanks.
>
>--
> Jawaid Bazyar              |   Like UNIX? Like your Apple IIGS? Then ask
> Procyon, Inc.              |   me about GNO/ME for the Apple IIgs!   
> bazyar@cs.uiuc.edu         |   P.O Box 620334
> --Apple II Forever!--      |   Littleton, CO 80162-0334   (303) 781-3273


-- 
___________________________________________________________________________
 John Paul Morrison                     | 
 University of British Columbia, Canada | Hey hey!! Ho ho!!
 Electrical Engineering                 | Tax & spend liberals
 jmorriso@rflab.ee.ubc.ca        VE7JPM | have got to go!! 
________________________________________|__________________________________

------------------------------

From: dim@leland.Stanford.EDU (Dmitry Teytelman)
Subject: SIGIO in Linux
Date: Fri, 8 Oct 93 08:16:05 GMT

Hi.

I'm trying to port some software to Linux that uses SIGIO. Does Linux currently
support that signal?

-- 
===============================================================================
   Dmitry Teytelman ( dim@leland.stanford.edu or dmtsi@cunyvm.cuny.edu )
===============================================================================

------------------------------

From: drew@romeo.cs.colorado.edu (Drew Eckhardt)
Subject: Re: Trantor T348 MiniSCSI Plus support?
Date: Fri, 8 Oct 1993 07:42:44 GMT

In article <28queoINN8mj@myall.awadi.com.au>,
David Hichens <dhichens@awadi.com.au> wrote:
>G'Day All,
>
>       Does Linux currently support (or will it in the future) the Trantor
>T348 MiniSCSI Plus parallel-to-SCSI adapter?

No.

------------------------------

From: drew@romeo.cs.colorado.edu (Drew Eckhardt)
Subject: Re: Trantor T130B SCSI Controller
Date: Fri, 8 Oct 1993 08:19:16 GMT

In article <066Xac1w165w@byteme.uucp>,
System Operator <system@byteme.UUCP> wrote:
>Is anyone currently working on a linux driver for a Trantor T130B SCSI 
>controller? I have an NEC MulltiSpin 84 CD Rom attached to it and it 
>works fine with MS-DOS, Windows, and OS/2.  I called Yggsdrasil and they 
>don't seem to be in any hurry to support it.
>
>HeLp!!!!!

The Trantor T130 uses on of the NCR chips (a NCR53c300 or NCR53c400, I 
can't recall which) built arround the NCR53c80 ASIC cell.  So, it's not
entirely compatable with the supported (.99.14 alpha) NCR5380 based 
Trantor board, but close enough that it should be fairly trivial to
hack the NCR5380 driver to work.


------------------------------

From: storm@uni-paderborn.de (Markus Storm)
Crossposted-To: comp.os.linux,comp.os.linux.admin
Subject: Re: CFC/CFI: XSysadmin
Date: 8 Oct 1993 09:42:14 GMT
Reply-To: storm@uni-paderborn.de

In article <291cls$efd@peanuts.informatik.uni-tuebingen.de>, will@linus (Michael Will) writes:

|> Yes, but there is still one major problem. We have to separate the
|> functionality from the user-interface, because we cannot use X alone.
|> To many users do not use X because of lack of memory - these are most
|> likely to be happy to use such a tool like we want to write.
|> I think we have to provide a curses-interface as well - how this can
|> be done we should discuss.

Yes, that would also ease porting it (I already think of porting it to our SUNs,
- as most of the functionality probably isn't Linux-specific -
though not a single line of code has been written ;-) ).
And usually noone owns the "commercial" OI/UIB.

|> My thinking is like: use virtual-functions (late binding) to have the objects
|> communicate with the user with the apropriate methods for the selected
|> user-interface. 

The best way to do this.
Though UIB is quite simple too use, doing subclassing needs further
documentation than supplied on-line (at least I had some problems).
So "C" programmers can supply functions code without working into OI.

|> Maybe we should create a mail-channel for this topic? If enough users
|> and developers are interested...

Yes. There's too much functionality needed than a single programmer can supply.

|> Cheers, Michael Will

More Cheers, Markus Storm



------------------------------

From: root@umibox.hanse.de (Bernd Meyer)
Subject: Re: [PATCH] BogoBoost speedup for Linux
Date: Thu, 7 Oct 1993 07:42:26 GMT

pfau@cnj.digex.com (Thomas Pfau) writes:

>In article <CEFu8D.Aun@iat.holonet.net>,
>Thomas McWilliams <tmcwill@iat.holonet.net> wrote:
>>[ a long description of a speed enhancing patch which I won't reproduce
>> here ]

>This had absolutely no effect on my system.  BogoMips stayed at 9.98,
>dhryston gives the same result.  Is it possible that some newer systems
>are shipping with higher DRAM refresh timer values?

Most newer systems ship with the refresh handled "hidden" by the chipset,
not taking any time anymore. You can even use DMA 0 on those boards (have a
look at a soundblaster card).

Bernie
-- 
We both know that the earth is round         | Bernd Meyer, EE-student
So we can't see the way before us to its end | "Nobody is a failure who has
We walk on this way, hand in hand,           |  friends" (from: "It's a   
And I hope you are still with me behind the horizon| wonderful life")

------------------------------

From: sm1of@tuhhco.rz.tu-harburg.de (Olaf Frommann)
Crossposted-To: comp.os.linux,comp.os.linux.admin
Subject: Re: CFC/CFI: XSysadmin
Date: 8 Oct 93 09:18:39 GMT

In article <291fir$efd@peanuts.informatik.uni-tuebingen.de>, will@linus (Michael Will) writes:
| Mhm, now that I read just another load of follow-ups, I think it would be 
| good to create a language as someone proposed.
| 
| This would describe screens, and actions, acting on curses and X in the
| same script...
| 

        Do you know wxWindows? It does just that, is a C++ wrapper for XVIEW,
        MOTIF and MS-WINDOWS *AND* a CURSES version is promised. One source
        for several environments.

| The advantage is clear: many users can contribute their configuration-
| scripts and do not have to bother to much with the userinterface.
| 

        Absolutely true.
| 
| Cheers, Michael Will - away for a week - sorry.

  CIAO, Olaf.

-- 

  Olaf Frommann,                          PHONE: +49 40 7718-2942
  TU Hamburg-Harburg,                     FAX  : +49 40 7718-2573
  Arbeitsbereich Stroemungsmechanik I     e-mail: Frommann@tu-harburg.d400.de   

------------------------------

From: mg@elan.Princeton.EDU (Michael Golan)
Subject: Re: debuggers & core inspectors
Date: Fri, 8 Oct 1993 02:08:18 GMT

ykhan@gandalf.ca (Yousuf Khan) writes:

>Hi, what sorts of debuggers are available for Linux, besides gdb? Anything
>that is perhaps menu-driven, perhaps Xwindows-based? If not, no sweat. 
>Are there any docs besides the man-pages and internal help of gdb, on how
>to use gdb, something like a FAQ?

Duel, an extension to gdb, comes with a help page that summarizes the most
useful gdb command (type dl help), which many people told me they found useful.

>What sorts of tools are there for inspecting the insides of core files. 

Duel is a state-exploration facility. My "usual" post about it follows below.

>Anything that reads the core file through, and prints out a summary report
>of any kind about what this core file is and what it was doing when it
>got created?

Thats not too well-defined is it? A stack trace can be considered such a thing,
I guess. From there, you're on your own.

--- Michael

BEGIN BLURB ON DUEL
========================
Duel is supposed to change the way you debug C programs. It is a stable, fully
functional, public domain implementation. Can work with any debugger, but
currently only gdb is supported. anon ftp from ftp.cs.princeton.edu:/duel.

If you are programming in C - try it! If you don't try it, I would 
appreciate it if you tell me why not (e.g., it looks stupid). Duel attempts
to address some of the problems that caused you to never use debuggers.
Please send all comments, good and bad (be cruel!) to mg@cs.princeton.edu

=============================================================================
DUEL -  A high level language for debugging C programs.
=============================================================================

Duel is a special purpose language designed for concise state exploration 
of debugged C programs under existing debuggers. It lets you to explore 
the program's state better than either the debugger's commands, a C 
interpreter, or print statements added to your code. The debugger is 
extended with the new 'dl' command for Duel expressions, e.g.,

     gdb> dl x[0..10].level >? 5
     x[3].level = 14
     x[8].level = 6

prints the "level" fields of array elements x[0] to x[10] that are greater 
than 5.  The output includes the values 14 and 6, as well as their 
symbolic representation "x[3].level" and "x[8].level". Linked list and
other complex data structures are just as easy. Most of C (e.g. for, if)
is also supported, e.g., int i; for(i=0; i<11; i++) if(x[i].level>5) x[i].

Duel is debugger-independent, but the current distribution interfaces only
with gdb. You will need the source for gdb-4.6, 4.7 or 4.8. All supported
gdb environments should work with Duel. It was tried at least on dec/mips,
sparc, sgi/iris, sony, hp9000, aix/rs6000, and sysV. Duel is public 
domain code. Do whatever you like with it - add it to commercial debuggers, 
to dbx/sdb or even make it part of the GNU project. No part of this 
distribution contains any copyright or derived code, (i.e. no GPL code, 
either). No disclaimer - free public domain software don't need one!
Even if you don't normally use debuggers, but you are programming in C, give
Duel a try! The man page & help even include a summary of useful gdb commands.

Duel is available for anonymous ftp from ftp.cs.princeton.edu, in 
/duel/duel.tar.Z. A "tar.Z" format means you should use the command
 "zcat duel.tar.Z | tar xf -" to unpack the files.
The Usenix Jan/93 paper about Duel is also available as tech report 399,
in /reports/1992/399.ps.Z on ftp.cs.princeton.edu

DUEL is "Debugging U (might) Even Like" or "Don't Use this Exotic Language"
you should judge which is better!

Michael Golan
mg@cs.princeton.edu
=============================================================================
The tutorial part from the manual page follows:

     Duel is based on expressions which return  multiple  values.   The  x..y
     operator  returns  the  integers from x to y; the x,y operator returns x
     and then y, e.g.

     gdb> dl (1,9,12..15,22)

     prints 1, 9, 12, 13, 14, 15 and 22. Such expressions can be  used  wher-
     ever a single value is used, e.g.

     gdb> dl x[0..99]=0 ;

     assigns zero to the first 100 elements of array x. The semantics of x[i]
     are  the  same as in C. They are applied for each of the values returned
     by 0..99, which can be thought of as  an  implied  external  loop.   The
     trailing  semicolon  indicates evaluation for side-effects only, with no
     output. Duel incorporates C operators, casts  C  statements  as  expres-
     sions, and supports limited  variable declaration:

     gdb> dl int i;for(i=0;i<100;i++)
                      if(x[i]<0) printf("x[%d]=%d\n",i,x[i]);
     x[7] = -4

     The semicolon prevents Duel output; only output from printf is  printed.
     Aliases  are  defined  with  x:=y and provide an alternative to variable
     declaration. We could also return x[i] instead of using printf:

     gdb> dl if(x[i:=0..99]<0) x[i]
     x[i] = -4

     The symbolic output "x[i]" can be fixed by surrounding i with {}, i.e.

     gdb> dl if(x[i:=0..99]<0) x[{i}]
     x[7] = -4

     The {} are like (), but force the symbolic evaluation to use i's  value,
     instead  of  "i". You can usually avoid this altogether with direct Duel
     operators:

     gdb> dl x[..100] <? 0
     x[7] = -4

     The ..n operator is a shorthand for 0..n-1, i.e. ..100 is  the  same  as
     0..99.   The x<?y, x==?y, x>=?y, etc., operators compare their left side
     operand to their right side operand as in C, but return  the  left  side
     value  if  the  comparison  result is true. Otherwise, they look for the
     next values to compare, without returning anything.

     Duel's x.y and x->y allow an expression y, evaluated under x's scope:

     gdb> dl emp[..100].(if(code>400) (code,name))
     emp[46].code = 682
     emp[46].name = "Ela"

     The if() expression is evaluated under the  scope  of  each  element  of
     emp[], an array of structures. In C terms, we had to write:

     gdb> dl int i; for(i=0; i<100 ; i++)
           if(emp[i].code>400) emp[{i}].code,emp[{i}].name

     A useful alternative to loops is the x=>y operator.  It  returns  y  for
     each value of x, setting `_' to reference x's value, e.g.

     gdb> ..100 => if(emp[_].code>400) emp[_].code,emp[_].name

     Using `_' instead of `i' also avoids the  need  for  {i}.  Finally,  the
     x-->y  operator  expands lists and other data structures. If head points
     to a linked list threaded through the next field, then:

     gdb> dl head-->next->data
     head->data = 12
     head->next->data = 14
     head-->next[[2]]->data = 20
     head-->next[[3]]->data = 26

     produce the data field for each node in the list. x-->y returns x, x->y,
     x->y->y,  x->y->y->y,  ...  until  a  NULL is found. The symbolic output
     "x-->y[[n]]" indicates that ->y was applied n times. x[[y]] is also  the
     selection operator:

     gdb> dl head-->next[[50..60]]->data

     return the 50th through the 60th elements in the list. The #/x  operator
     counts the number of values, so

     gdb> dl #/( head-->next->data >? 50 )

     counts the number of data elements over 50 on the list.

[There is a lot more in the full manual. Cyclic lists, strings, arrays like
argv, etc]
===========================================================================
-- 
Michael Golan       | Duel, PD add-on to gdb, let x[..100].val >? 0
mg@cs.princeton.edu | show the positive val elements of array x[100] in the
                    | debugger, etc. annon ftp ftp.cs.princeton.edu:/duel 


------------------------------

From: mg@elan.Princeton.EDU (Michael Golan)
Subject: Re: Use of gdb for kernel debugging: an idea
Date: Fri, 8 Oct 1993 02:15:53 GMT

ftlofaro@unlv.edu (Frank Lofaro) writes:


>       I had posted before that I have used:

>gdb /usr/src/linux/tools/system /dev/core

>       on a kernel compiled with -g in order to examine kernel
>variables. 


you really ought to try to use duel when hacking the kernel, I believe
it would be very useful in looking at kernel tables. If any of you
folks every try it, please lemme know how it goes!

See the other posting regarding debugging for a blurb on duel.
Basically, you could do things like
   proc_table[..procs_no].if(pno != 0) ptime

which replaces C code like
  int i ;
  for(i=0 ; i<procs_no ; i++) 
     if( proc_table[i].pno != 0 )
        printf("proc_table[%d].ptime= %ld\n",i,proc_table[i].ptime);

NOTE: even if u think the above Duel expression is hard to read, you
can COBMINE Duel style and C style using duel. In fact, the above
C code can be entered on the gdb command line as input to Duel and will
be executed correctly - ie duel has a built-in C interpreter.

For more details send me mail or ftp to ftp.cs.princeton.edu:/duel.
Duel extend gdb with a single "dl" command - the rest of gdb is unchanged.
Duel is not part of the gdb distribution mainly due to political problems :(
Users response so far has been enthusiastic.







-- 
Michael Golan       | Duel, PD add-on to gdb, let x[..100].val >? 0
mg@cs.princeton.edu | show the positive val elements of array x[100] in the
                    | debugger, etc. annon ftp ftp.cs.princeton.edu:/duel 


------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Development-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux.development) via:

    Internet: Linux-Development@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    sunsite.unc.edu				pub/Linux

End of Linux-Development Digest
******************************
