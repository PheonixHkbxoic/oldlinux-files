This message announces the availability of version 0.06 of Linux/68k.

It can be ftped from directory /pub/linux/680x0 at tsx-11.mit.edu.

A precompiled kernel executable and the Amiga "bootstrap" program can
be found in kern-0.06.tar.gz in the "kernel" subdirectory.

The kernel source can be found in linux-0.06.tar.gz in the "src"
subdirectory.

Compilation of this new version of the kernel requires gas-2.2.  Minor
changes to the stock gas-2.2 distribution were required in order to
generate an m68k-linux assembler.  The patches for these changes are
available in the "tools" subdirectory.

The new features of this release over 0.05 include:

*) A number of bug fixes.

*) linux/386 patches up to 0.99pl13 applied.

*) A memory management rewrite supporting the following new features:
   1) 68040 support.  I've made the changes that I think are required
      in order to support the 68040.  I am unable to test these, so
      I'll have to leave it up to someone else with an '040 to test
      them.
   2) Multiple non-contiguous memory chunks (Linux will now use all
      the FAST memory on an Amiga).

This release still contains only support for the Amiga.  Hopefully the
people working on MacIntosh and Atari support will have some sources
for inclusion soon.

Please let me know if this kernel runs on your Amiga, and the type of
Amiga and cards/peripherals you have.  The compressed minix file system
in the "filesys" directory can be used as a ram disk to boot with the
kernel, or can be copied to a floppy or SCSI hard disk.

To boot the kernel on an Amiga, use the supplied "bootstrap" command.

To boot with the ram disk image, uncompress the file system image and
type:

  bootstrap -r filesys

To boot from a floppy image, uncompress the file system image and copy
it to an Amiga format floppy.  This can be done using the "flat:"
handler.  Then type:

  bootstrap

If you somehow have a linux/68k minix file system on a SCSI hard disk
partition, you can boot from the partition by supplying the device
number to the bootstrap program:

   bootstrap -b [number]

The major number for SCSI disks is "0x08", and the minor number
depends on the disk and partition. linux/68k searches for SCSI disks
from target 0 to target 7, and for Logical Units 0 through 7 on each
target.  The minor number can be calculated by (disk_number)*16 +
partition_number.  The first disk found is disk 0.  Partition 0 is the
whole disk.  Partition 1 is the first partition found in the
RigidDiskBlock partition table on the Amiga hard disk.  Thus 0x0801 is
the first partition on the first disk found.  0x0818 is the second
partition on the second hard disk found.

For example, I have two SCSI hard disks.  The first is at target 5,
LUN 0 and the second at target 6, LUN 0.  The first has three
partitions, used for Linux and the second has 4 partitions used for
AmigaDOS.

Thus I have:

   devnum         linux device name
   ------         ------------------------------------
   0x0800         sda  (the entire disk at target 5 : BE CAREFUL)
   0x0801         sda1 (1st partition on disk at target 5)
   0x0802         sda2 (2nd partition on disk at target 5)
   0x0803         sda3 (3rd partition on disk at target 5)
   0x0810         sdb  (the entire disk at target 6 : BE CAREFUL)
   0x0811         sdb1 (1st partition on disk at target 6)
   0x0812         sdb2 (2nd partition on disk at target 6)
   0x0813         sdb3 (3rd partition on disk at target 6)
   0x0814         sdb4 (4th partition on disk at target 6)

My Linux root partition is on the 2nd partition of my first drive, so
I boot with:

  bootstrap -b 0x0802

After booting from one of the above methods, if the kernel supports
your SCSI driver, you should be able to create a minix file system on
one of your hard disk partitions if you wish.  

Determine the size of your partition in 1K blocks (take the number of
512 byte sectors from HDToolBox and divide by two), and determine
which special file to use in /dev (see above).  *DOUBLE CHECK* that
the major/minor numbers for the special device (ls -l /dev/xxx) are
correct.  If they are incorrect or the device special file doesn't
exist, use mknod to change or create the device special file.  Then
execute:

   /etc/mkfs /dev/xxxx size

This will create a minix file system on the hard disk partition.  You
can then mount this partition under /mnt and copy files to it:

  /etc/mount /dev/xxxx /mnt

When finished copying, unmount the partition:

  /etc/umount /mnt

sync a few times, and then reboot.  You can then boot the kernel by
providing "bootstrap" with the device number to boot from.

Again, you do any mucking around with hard disks at your OWN RISK.  I
bought a separate hard disk to use solely for linux before I began
playing with hard disk drivers and file systems for safety purposes.

DEBUGGING NOTE: The early stages of the kernel startup will send out
characters to the serial port to indicate how far it gets.  The serial
port is set to 9600 baud, 8 bits, one stop bit.  You'll need a NULL
modem to hook it up to a terminal.  The code should assert DTR.
