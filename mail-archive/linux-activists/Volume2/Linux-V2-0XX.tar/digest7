From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Thu, 2 Apr 92 10:30:21 EST
Subject:  Linux-Activists Digest #7

Linux-Activists Digest #7, Volume #2              Thu, 2 Apr 92 10:30:21 EST

Contents:
  beginners' FAQ/guide/still draft... (Chuck Boyer)
  Oleo available for Beta testing. (Peter.MacDonald@bcsystems.gov.bc.ca)
  Re: Ghostscript, printing of dvi/ps files using lp (D.Bolla)
  SCSI Question. (Ke-Wei Ma)
  Re: Swap space for LINUX (Linus Benedict Torvalds)

----------------------------------------------------------------------------

From: boyer@sumax.seattleu.edu (Chuck Boyer)
Subject: beginners' FAQ/guide/still draft...
Date: 2 Apr 92 14:40:56 GMT

(DOS) BEGINNER'S GUIDE TO LINUX v0.95a
======================================
Compiled by Chuck Boyer with help from the persons on the
'alt.os.linux' newsgroup.
====================
Following are the 'copyright' for Linux, followed by the
guide itself. The 'Beginner's Guide' is in a 'draft' mode
and will be posted with updates about one weekly until
the target date of April 15, 1992 in which case I plan to
be done with its basic form.
==================== 
 
          RELEASE NOTES FOR LINUX v0.95
          Linus Torvalds, March 7, 1992
  
          COPYRIGHT
  
Linux-0.95 is NOT public domain software, but is copyrighted by me.
 
The copyright conditions are the same as those imposed by the GNU
copyleft: get a copy of the GNU copyleft at any major ftp-site (if 
it carries linux, it probably carries a lot of GNU software anyway, 
and they all contain the copyright). 
 
 
The copyleft is pretty detailed, but it mostly just means that you
may freely copy linux for your own use, and redistribute all/parts 
of it, as long as you make source available (not necessarily in the 
same distribution, but you make it clear how people can get it for 
nothing more than copying costs).  Any changes you make that you 
distribute will also automatically fall under the GNU copyleft.
 
 
NOTE! The linux unistd library-functions (the low-level interface
to linux: system calls etc) are excempt from the copyright - you 
may use them as you wish, and using those in your binary files 
won't mean that your files are automatically under the GNU 
copyleft.  This concerns /only/ the unistd-library and those (few) 
other library functions I have written: most of the rest of the 
library has it's own copyrights (or is public domain).  See the 
library sources for details of those. 
==================
(DOS) BEGINNER'S GUIDE TO LINUX/UNIX
================== 
          INSTALLATION
 
Installation of Linux is covered in two documents;
 
INSTALL-0.11
and
LINUX.FAQ
INSTALL-0.11 is the installation documentation that accompanied
version 0.11 of Linux and dealt with installing Linux onto a hard 
disk, among other things. LINUX.FAQ is the linux 
'Frequently-Asked-Questions' documentation file. Grab a copy of 
these for future reference. Most of the material will be beyond 
your understanding for a little while, but once you have installed 
your Linux copy for yourself you should have gained an 
understanding through the process to understand much of what is 
included in these documentation files.
 
It is assumed that you have a working knowledge of how to grab a
document, file, etc. from an archive site through Internet. You 
use 'ftp' to call up and log onto the system, 'binary' to set the 
mode of transfer, and 'get filename' to transfer the file from the 
logged onto system ftp site to your home directory of the machine 
you have called out from.
 
It is also assumed that you have a basic working knowledge of DOS
and can get around well enough. (Perhaps you know how to create 
batch files using your favorite editor, or 'copy con' command line 
statement, and how to use the basic DOS utilities; fdisk, copy, 
erase, etc...). I am only trying to create a documentation here for 
DOS users who are totally unknowlegable of Unix system calls, 
utilities, commands and lastly; being a System Administrator (which 
you will be once you have Linux up and running on your 386/486 
machine).
 
In a later chapter I will describe the commands and utilities, etc. 
that are available to you. I, too, am a 'beginner' unix system 
user, so much of the explanations found here have been 'donated' in 
time and effort by programmers/concerned users of Linux from the 
'alt.os.linux' newsfeed.
 
Anyway, back to installation of Linux on your machine. Basically,
you can run Linux one of two ways; either from your floppy drives 
only, or from your hard disk/drive. If you just want to play around 
with Linux and get the 'look and feel' of using a Unix Operating 
System (as opposed to a DOS operating system) then you might want 
to choose to just run it from the floppy drive. 
 
Basically, the logic here would be that, you don't want to screw up 
anything on your hard drive (which is loaded with Windows, word 
processors, graphics programs, data-base programs, etc.), and you 
have either spent long and hard learning hours to have it set up 
that way, or you had someone else set it up for you and you 
wouldn't have a clue on how to re-set it up yourself. Running Linux 
from your floppy disk drive will not screw up your hard drive, 
basically. 
 
There 'are' programs on the Linux disks that you will have access 
to that 'can' ruin your hard drive though. (typing 'mkfs /dev/hda' 
for instance may render your hard drive unreadable by DOS, but then 
you wouldn't know how to do that yet...). Or, you could run Linux 
from booting from the floppy drive and thereafter having it run 
from the hard disk drive. The differences between these two methods 
are that Linux will run a lot (10 times?) slower if you choose to 
run it solely from the floppy disk drive, and you will be limited 
to the commands and utilities that you can run using the floppy 
drive only situation. 
 
On the other hand, running from the hard disk drive will run Linux 
much faster/quicker as well as give you space to have many more 
programs and utilities to run/use, but it also entails you having 
to learn to 1) create a Linux partition on your hard disk drive, 
and 2) learning how to maintain this partition with a handfull of 
sub-directories.
 
===================
When you boot up Linux 0.95a with the two floppies, the second
(rootimage floppy) will put into Linux as the system admin-
istrator ('root', as well as '/'). You are presented with
a blank screen other than your line prompt ('#'). You are
sitting on a drive/directory which is the beginning directory.
You are root ('system administrator', or '/'). If you issue
a command 'ls(ENTER)' (that's; type 'ls' and hit ENTER), you
will be presented with a listing of the directories;
                                                    
# INSTALL         dev     mnt     usr
  bin             etc     tmp
 
 
====================
This is the '/root' ('/') directory on the Linux 0.95a
distribution file; 'rootimage.0.95a' at tsx-11.mit.edu 3/23/92.
 
(issue the command; 'ls -l' to get this type of listing;)
====================
 
drwxr-xr-x   2 root     root          160 Mar 17 19:33 INSTALL
drwxr-xr-x   2 root     root          432 Mar 17 18:14 bin
drwxr-xr-x   2 root     root         1232 Mar 17 19:18 dev
drwxr-xr-x   2 root     root          272 Mar 22 08:45 etc
drwxr-xr-x   2 root     root           32 Mar 17 17:06 mnt
drwxr-xr-x   2 root     root           32 Mar 17 14:20 tmp
drwxr-xr-x   3 root     root           48 Mar 17 18:15 usr
====================
These are 'all' directories. You can mount another drive using
'mnt', 'tmp', or 'usr' directories. You can move into a dir-
ectory by issuing the command; 'cd directoryname'. Try, for
instance,; 'cd INSTALL'. Do an 'ls -l' or 'ls' and see what
files are there.
 
Read the files with the command; 'more filename' (where 'file-
name' is any filename that you choose, i.e.; 'install' or
'readme', etc.). If the file is large and keeps scrolling across
the terminal screen then use 'ctrl-s' to stop it and 'ctrl-q'
to resume printing to screen. (the 'more' utility sends the
output of 'filename' to stdout, which is an abbreviation for
'standard out', which is just the term used to describe what
the process is doing). (stdin/stdout are two terms you will
see often in discussions here in the 'linux' newsgroup at times.
They stand for 'standard in, or 'the standard/default place
for input to come from = keyboard', or 'standard out' 'the
standard/default place for output to be sent = screen/monitor/
terminal').
 
====================
These are the files in the '/bin' directory on the Linux 0.95a
distribution file; 'rootimage.0.95a' at tsx-11.mit.edu 3/23/92.
====================
This is a listing using the command; 'ls'
(This ends the examples of using the 'ls' (straight, without
any 'switches' selected in the command line for optional output
in different formats.)
====================
cat             login           mv              sync
compress        ls              pfdisk          tar.Z
cp              mkdir           rm              umount
fdisk           mkfs            rmdir           uncompress
fsck            mknod           rootdev
getty           mkswap          sh
ln              mount           swapon
====================
These are the files in the '/bin' directory on the Linux 0.95a
distribution file; 'rootimage.0.95a' at tsx-11.mit.edu 3/23/92.
====================
This is a listing using the command; 'ls -l'
====================
-rwxr-xr-x   1 root     sys         29700 Mar 14 22:02 cat
-rwxr-xr-x   1 root     sys         37892 Mar 14 22:02 compress
-rwxr-xr-x   1 root     sys         37892 Mar 14 22:02 cp
-rwxr-xr-x   1 root     sys         41988 Mar 15 10:39 fdisk
-rwxr-xr-x   1 root     sys         37892 Mar 14 22:02 fsck
-rwxr-xr-x   1 root     sys         29700 Mar 14 22:02 getty
-rwxr-xr-x   1 root     sys         33796 Mar  7 23:58 ln
-rwxr-xr-x   1 root     sys         46084 Mar 14 22:02 login
-rwxr-xr-x   1 root     sys         50180 Mar 14 22:02 ls
-rwxr-xr-x   1 root     sys         29700 Mar 14 22:02 mkdir
-rwxr-xr-x   1 root     sys         37892 Mar 14 22:02 mkfs
-rwxr-xr-x   1 root     sys         21508 Mar 14 22:02 mknod
-rwxr-xr-x   1 root     sys         21508 Mar 14 22:03 mkswap
-rwxr-xr-x   1 root     sys         21508 Mar 14 22:03 mount
-rwxr-xr-x   1 root     sys         33796 Mar 14 22:03 mv
-rwxr-xr-x   1 root     sys         50180 Mar 15 17:57 pfdisk
-rwxr-xr-x   1 root     sys         29700 Mar 14 22:03 rm
-rwxr-xr-x   1 root     sys         25604 Mar 14 22:03 rmdir
-rwxr-xr-x   1 root     sys         25604 Mar 14 22:03 rootdev
-rwxr-xr-x   1 root     sys         78852 Mar 14 22:03 sh
-rwxr-xr-x   1 root     sys         21508 Mar 14 22:03 swapon
-rwxr-xr-x   1 root     sys          9220 Mar 14 22:03 sync
-rwxr-xr-x   1 root     sys         84603 Mar 16 19:47 tar.Z
-rwxr-xr-x   1 root     sys         21508 Mar 14 22:03 umount
lrwxrwxrwx   1 root     root            8 Mar 17 18:14 uncompress -> compress
====================
These are the files in the '/dev' directory on the Linux 0.95a
distribution file; 'rootimage.0.95a' at tsx-11.mit.edu 3/23/92.
====================
brw-rw-rw-   1 root     sys        2,  28 Mar  7 23:51 PS0
brw-rw-rw-   1 root     sys        2,  29 Mar  7 23:51 PS1
brw-rw-rw-   1 root     sys        2,   8 Mar  7 23:51 at0
brw-rw-rw-   1 root     sys        2,   9 Mar 17 19:18 at1
crw-rw-rw-   1 root     sys        4,   1 Mar  7 23:51 console
brw-rw-rw-   1 root     sys        3,   0 Mar  7 23:51 hda
brw-rw-rw-   1 root     sys        3,   1 Mar  7 23:51 hda1
brw-rw-rw-   1 root     sys        3,   2 Mar  7 23:51 hda2
brw-rw-rw-   1 root     sys        3,   3 Mar  7 23:51 hda3
brw-rw-rw-   1 root     sys        3,   4 Mar  7 23:51 hda4
brw-rw-rw-   1 root     sys        3,   5 Mar  7 23:51 hda5
brw-rw-rw-   1 root     sys        3,   6 Mar  7 23:51 hda6
brw-rw-rw-   1 root     sys        3,   7 Mar  7 23:51 hda7
brw-rw-rw-   1 root     sys        3,  64 Mar  7 23:51 hdb
brw-rw-rw-   1 root     sys        3,  65 Mar  7 23:51 hdb1
brw-rw-rw-   1 root     sys        3,  66 Mar 13 18:25 hdb2
brw-rw-rw-   1 root     sys        3,  67 Mar 13 18:25 hdb3
brw-rw-rw-   1 root     sys        3,  68 Mar 13 18:25 hdb4
brw-rw-rw-   1 root     sys        3,  69 Mar 13 18:25 hdb5
brw-rw-rw-   1 root     sys        3,  70 Mar 13 18:25 hdb6
brw-rw-rw-   1 root     sys        3,  71 Mar 13 18:25 hdb7
crw-rw-rw-   1 root     sys        1,   2 Mar  7 23:51 kmem
crw-rw-rw-   1 root     sys        1,   1 Mar  7 23:51 mem
crw-rw-rw-   1 root     sys        1,   3 Mar  7 23:51 null
crw-rw-rw-   1 root     sys        1,   4 Mar  7 23:51 port
brw-rw-rw-   1 root     sys        2,  16 Mar  7 23:51 ps0
brw-rw-rw-   1 root     sys        2,  17 Mar  7 23:51 ps1
crw-rw-rw-   1 root     sys        4, 128 Mar  7 23:51 ptyp0
crw-rw-rw-   1 root     sys        4, 129 Mar  7 23:51 ptyp1
crw-rw-rw-   1 root     sys        4, 130 Mar  7 23:51 ptyp2
crw-rw-rw-   1 root     sys        4, 131 Mar  7 23:51 ptyp3
crw-rw-rw-   1 root     sys        4, 132 Mar  7 23:51 ptyp4
crw-rw-rw-   1 root     sys        4, 133 Mar  7 23:51 ptyp5
crw-rw-rw-   1 root     sys        4, 134 Mar  7 23:51 ptyp6
crw-rw-rw-   1 root     sys        4, 135 Mar  7 23:51 ptyp7
crw-rw-rw-   1 root     sys        4, 136 Mar  7 23:51 ptyp8
crw-rw-rw-   1 root     sys        4, 137 Mar  7 23:51 ptyp9
crw-rw-rw-   1 root     sys        4, 138 Mar  7 23:51 ptypa
crw-rw-rw-   1 root     sys        4, 139 Mar  7 23:51 ptypb
crw-rw-rw-   1 root     sys        4, 140 Mar  7 23:51 ptypc
crw-rw-rw-   1 root     sys        4, 141 Mar  7 23:51 ptypd
crw-rw-rw-   1 root     sys        4, 142 Mar  7 23:51 ptype
crw-rw-rw-   1 root     sys        4, 143 Mar  7 23:51 ptypf
brw-rw-rw-   1 root     sys        1,   1 Mar  7 23:51 ram
crw-rw-rw-   1 root     sys        5,   0 Mar  7 23:51 tty
crw-rw-rw-   1 root     sys        4,   0 Mar  7 23:51 tty0
crw--w--w-   1 root     other      4,   1 Mar  7 23:51 tty1
crw--w--w-   1 root     other      4,   2 Mar  7 23:51 tty2
crw--w--w-   1 root     root       4,   3 Mar  7 23:51 tty3
crw--w--w-   1 root     root       4,   4 Mar  7 23:51 tty4
crw-rw-rw-   1 root     sys        4,   5 Mar  7 23:51 tty5
crw-rw-rw-   1 root     sys        4,   6 Mar  7 23:51 tty6
crw-rw-rw-   1 root     sys        4,   7 Mar  7 23:51 tty7
crw-rw-rw-   1 root     sys        4,   8 Mar  7 23:51 tty8
crw-rw-rw-   1 root     sys        4, 192 Mar  7 23:51 ttyp0
crw-rw-rw-   1 root     sys        4, 193 Mar  7 23:51 ttyp1
crw-rw-rw-   1 root     sys        4, 194 Mar  7 23:51 ttyp2
crw-rw-rw-   1 root     sys        4, 195 Mar  7 23:51 ttyp3
crw-rw-rw-   1 root     sys        4, 196 Mar  7 23:51 ttyp4
crw-rw-rw-   1 root     sys        4, 197 Mar  7 23:51 ttyp5
crw-rw-rw-   1 root     sys        4, 198 Mar  7 23:51 ttyp6
crw-rw-rw-   1 root     sys        4, 199 Mar  7 23:51 ttyp7
crw-rw-rw-   1 root     sys        4, 200 Mar  7 23:51 ttyp8
crw-rw-rw-   1 root     sys        4, 201 Mar  7 23:51 ttyp9
crw-rw-rw-   1 root     sys        4, 202 Mar  7 23:51 ttypa
crw-rw-rw-   1 root     sys        4, 203 Mar  7 23:51 ttypb
crw-rw-rw-   1 root     sys        4, 204 Mar  7 23:51 ttypc
crw-rw-rw-   1 root     sys        4, 205 Mar  7 23:51 ttypd
crw-rw-rw-   1 root     sys        4, 206 Mar  7 23:51 ttype
crw-rw-rw-   1 root     sys        4, 207 Mar  7 23:51 ttypf
crw-rw-rw-   1 root     sys        4,  64 Mar 17 18:06 ttys1
crw-rw-rw-   1 root     sys        4,  65 Mar 17 18:06 ttys2
crw-rw-rw-   1 root     sys        4,  66 Mar 17 18:06 ttys3
crw-rw-rw-   1 root     sys        4,  67 Mar 17 18:06 ttys4
====================
These are the files in the '/etc' directory on the Linux 0.95a
distribution file; 'rootimage.0.95a' at tsx-11.mit.edu 3/23/92.
====================
-rw-r--r--   1 root     sys           204 Mar  7 23:52 group
-rwxr-xr-x   1 root     sys         29700 Mar  7 23:53 init
-rw-r--r--   1 root     sys           128 Mar 14 13:07 inittab
-rw-r--r--   1 root     sys            68 Mar 17 17:19 issue
-rw-r--r--   1 root     sys           365 Mar 17 17:19 motd
-rw-r--r--   1 root     root           26 Mar 22 08:45 mtab
-rw-r--r--   1 root     sys           152 Mar 13 18:33 passwd
-rw-r--r--   1 root     sys           654 Mar 15 10:47 rc
-rw-r--r--   1 root     sys            51 Mar 13 18:34 securetty
-rw-r--r--   1 root     sys         14322 Mar 16 20:11 termcap
-rwxr-xr-x   1 root     sys          9220 Mar 14 22:03 update
-rw-r--r--   1 root     sys           224 Mar 22 08:46 utmp
-rw-r--r--   1 root     sys          1624 Mar 22 08:46 wtmp
total 9
====================
 
====================
'/mnt'
and
'/tmp'
are empty of any files as they are the 'mounting' points for
floppy drives, hard drives, and other file systems that you
wish to mount to.
 
====================
These are the files in the '/usr/bin' directory on the Linux 0.95a
distribution file; 'rootimage.0.95a' at tsx-11.mit.edu 3/23/92.
====================
-rwxr-xr-x   1 root     sys         29700 Mar  7 23:58 chmod
-rwxr-xr-x   1 root     sys         33796 Mar  7 23:58 chown
-rwxr-xr-x   1 root     sys         41988 Mar 17 18:07 more
-rwxr-xr-x   1 root     sys         33796 Mar  7 23:58 setterm
====================
 
An explanation of the above files' listing;
-rwxr-xr-x 
        are the 'permissions' settings for the files/directories.
1 root 
        is the owner of the file (root in this case.)
sys
        is the kind of file (a system file.)
29700
        is the size of the file in bytes.
Mar 7
        is the date the file was created (or last modified.)
23:58
        is the time the file was created (or last modified.)
chmod
        is the filename.
====================
EXPLANATIONS:
====================
Given the above example again of a directory listing of the
file 'chmod' in the directory '/usr/bin':
====================
-rwxr-xr-x   1 root     sys         29700 Mar  7 23:58 chmod
 
        The 'permissions' settings for the files/directories.
        'r' means 'read' permission (can read the file).
        'w' means 'write' permission (can write to the file, i.e.
                edit/change it.)
        'x' means 'execute' permission (can execute the file,
                if it is an executable/binary file.)
 
-rwxr-xr-x
0123456789
        There are nine place holders for settings in 'all' 
        cases of permission settings on all files.
        The '0' place is for the type; file, or directory.
        The '1' place is for 'read' for 'sysadm/root'.
        The '2' place is for 'write' for 'sysadm/root'.
        The '3' place is for 'execute' for 'sysadm/root'.
        The '4' place is for 'r' for 'group'.
        The '5' place is for 'w' for 'group'.
        The '6' place is for 'x' for 'group'.
        The '7' place is for 'r' for 'all/anybody'.
        The '8' place is for 'w' for 'all/anybody'.
        The '9' place is for 'x' for 'all/anybody'.
 
The idea here is that a file can be set for security reasons
to be readable by some, all, nobody, writeable by some, all, 
nobody, executable by ..... etc. It is for system security 
reasons that the system administrator has the ability to set
file attributes/permissions so that only she/he can run certain
system routines, as well as other things. Also, any other user
can open up a directory and its files (or only certain files)
for others to read, others to write to (group that they all
belong to, for instance), or others to execute. So everybody
gets to set/change file attributes in one fashion or another.
The command to change a file that has just been written for
instance so that you can read it afterwards for instance is;
 
'chmod u+r filename'
 
To have it read and write and execute;
 
'chmod u+rwx filename'
 
To have 'all' read and execute it;
 
'chmod a+rx filename'
 
The three designations for changing files attributes then are;
read, write, and execute permissions set to either on or off.
Also, there are three sectors affected by these permission
settings; user, group, all. ('u', 'g', 'a').
 
=====================
ERROR CODES and their MEANINGS
=====================
You can find these by looking in /usr/include/errno.h and in 
/usr/src/lib/estdio/errlist.h . However this will be a problem if
you can't get you system up and running. (by the way, most programs
report "EPERM" instead of "error 2", which just depends on how
one compiled the program. 
 
Here comes  /usr/src/lib/estdio/errlist.h:
 
/* EUNKNOWN          0 */ "Unknown error",
/* EPERM             1 */ "Not owner",
/* ENOENT            2 */ "No such file or directory",
/* ESRCH             3 */ "No such process",
/* EINTR             4 */ "Interrupted system call",
/* EIO               5 */ "I/O error",
/* ENXIO             6 */ "No such device or address",
/* E2BIG             7 */ "Arg list too long",
/* ENOEXEC           8 */ "Exec format error",
/* EBADF             9 */ "Bad file number",
/* ECHILD           10 */ "No children",
/* EAGAIN           11 */ "No more processes",
/* ENOMEM           12 */ "Not enough core",
/* EACCES           13 */ "Permission denied",
/* EFAULT           14 */ "Bad address",
/* ENOTBLK          15 */ "Block device required",
/* EBUSY            16 */ "Mount device busy",
/* EEXIST           17 */ "File exists",
/* EXDEV            18 */ "Cross-device link",
/* ENODEV           19 */ "No such device",
/* ENOTDIR          20 */ "Not a directory",
/* EISDIR           21 */ "Is a directory",
/* EINVAL           22 */ "Invalid argument",
/* ENFILE           23 */ "File table overflow",
/* EMFILE           24 */ "Too many open files",
/* ENOTTY           25 */ "Not a typewriter",
/* ETXTBSY          26 */ "Text file busy",
/* EFBIG            27 */ "File too large",
/* ENOSPC           28 */ "No space left on device",
/* ESPIPE           29 */ "Illegal seek",
/* EROFS            30 */ "Read-only file system",
/* EMLINK           31 */ "Too many links",
/* EPIPE            32 */ "Broken pipe",
/* EDOM             33 */ "Math argument",
/* ERANGE           34 */ "Result too large",
/* EDEADLK          35 */ "Resource deadlock avoided",
/* ENAMETOOLONG     36 */ "Filename too long",
/* ENOLCK           37 */ "No locks available",
/* ENOSYS           38 */ "Function not implemented",
/* ENOTEMPTY        39 */ "Directory not empty"
=========================================
================= 
COMMANDS and their USAGE
=================
(I must admit that I too am a beginner, so I have not included
the explanation for all of the commands available in Linux.
You will have fun learning from other books, reading news
discussions on the net, etc. I have given examples of the 
utility programs that you will find most helpful and most
useful during your first stages of learning.)
 
In my examples I will give you a listing of the command to
type and what you will type will be enclosed in single
quote marks; 'type this'. Then always assume to hit the
ENTER key. Also, where command affects a file for you
to use then I will give a generic name to the file
for the examples' sake of 'filename' where you supply
the actual name of the file.
=================
bawk
        pattern matching language
 
cat
        concatenate files and write them to standard output
 
        This means that using 'cat' you can list the contents
        of a file to your screen.         
 
        'cat filename'
 
        (you can also use the 'more' command as the standard
        file 'browser' utility. 'less' is an enhanced 'more.')
 
        
cd
        change working directory
        
        'cd ..' moves you backup one directory in the directory
        tree. (branches, root).
 
        'cd /' moves you to the root/beginning.
 
        'cd /usr/bin' from anywhere that you are moves you to
        that subdirectory.
 
 
chmod
        change access modes for files, directories.
 
comm
        print lines common to two sorted files
 
compress
        compress a file
 
        'compress filename' creates; filename.Z
 
        'uncompress filename.Z' creates; filename
 
 
cp
        copy a file
 
        'cp filename /usr/bin/filename' copies the file
        to the /usr/bin directory.
 
cut
        cut out columns in a file
 
dd
        disk dumper
 
df
        report free disk space and i-nodes
 
        You can use just 'df' to see a report of how much free
        disk space you have.
 
du
        print disk usage
 
file
        guess at file's type by contents.
 
find
        find files meeting a given condition
 
grep
        search a file for lines containing a given pattern
 
        'grep anything filename' will find each occurance
        of 'anything' in the file 'filename.'
 
group
        group identity
 
head
        print the first few lines of a file.
 
        'head filename' prints the first 5 lines of the file.
 
issue
        system identification file
 
kill
        send a signal to

------------------------------

From: Peter.MacDonald@bcsystems.gov.bc.ca
Subject: Oleo available for Beta testing.
Date: 1 Apr 92 21:39:40 -0800



------------------------------

From: db1@ukc.ac.uk (D.Bolla)
Subject: Re: Ghostscript, printing of dvi/ps files using lp
Date: 2 Apr 92 07:48:41 GMT
Reply-To: db1@ukc.ac.uk (Damiano Bolla)

In article <92033132@gandalf.informatik.rwth-aachen.de> u31b3hs@messua.informatik.rwth-aachen.de (Michael Haardt) writes:
>From article <1992Mar28.202317.13578@utdallas.edu>, by ramesh@utdallas.edu (R. Ramesh):
>> I ported Ghostscript 2.4 (released a couple of days ago) to Linux.
>What does port mean here?  Did you have things to configure and compile
>or port in the meaning of debugging, patching, editing, getting long
>nights and cursing at the author :)  ?
No, "porting" ghostscript 2.4 is EASY
Define -DSYSVR4 and then you have just TWO things
sys_stat.h has st_blocks missing ( Solution is VERY easy left to the reader)
malloc.h is missing ( just copy the file that has the malloc def in malloc.h )

That's it.

>If it was difficult, then a diff package would be fine, otherwise just
>comment one or two problems and how to solve them.  I can really need
>it.
Very easy , at least with GCC 1.4 , ( The newgcc with the new libraryes
and the associated include ) NOT gcc 2.0

>Concerning grafics: Is there anyone porting MGR?  I recently used
>TeX-MGR, a TeX dvi previewer for MGR, on a Sun and it works pretty good.
>It uses the printer fonts, so no extra preview fonts are needed.  That
>should be reason enough to look at MGR, apart from the fact that it
>doesn't need much CPU time or memory.

I think that is worth waiting for X11.....

Damiano

------------------------------

Date: Thu,  2 Apr 1992 04:25:21 -0500 
From: Ke-Wei Ma <km4c+@andrew.cmu.edu>
Subject: SCSI Question.

    Since there wasn't a response from a similar post a ways back, I
dare ask if Linux will support systems with an Adaptec AHA-154x
controllers?  If not, is there one in development?
    Also, when is the new FAQ for newuser as mentioned in the most
recent FAQ coming out?

Ke-Wei


------------------------------

From: torvalds@klaava.Helsinki.FI (Linus Benedict Torvalds)
Subject: Re: Swap space for LINUX
Date: 2 Apr 92 10:24:09 GMT

In article <1992Apr1.180806.12778@nrao.edu> cflatter@nrao.edu writes:
>I'm about to take the plunge and replace MINIX with LINUX.  I am going to
>have to repartition my hard drive and I need to have some idea of how to
>calculate the size of a swap partition.  Does LINUX use the usual UNIX
>strategy of mapping the available virtual memory onto the swap partition
>so that the swap partition needs to be at least as large as the core memory
>or does the swap partition merely hold VM pages which are not currently in
>core.

The linux swapping algorithm, while stupid, works pretty well: it
doesn't map the virtual memory directly to the swap-space, but uses the
swap-space as /additional/ memory. Thus if you have a 4MB machine, linux
kernel+buffers eat away 1.5M of this, and you are left with 2.5M free
memory. By adding a 4MB swap-file (or partition) you effectively get
6.5MB free space to play around with.

The swapping algorithm does need 1 real-memory page to keep track of
which VM-pages are in use, as well as 2 swap-file-pages (ie 8kB of the
swapfile is unusable for swapping) for keeping track of good blocks and
as a temporary page.

Also note that not all real memory is swapped: the kernel and buffer
caches are never swapped out to disk, and all kernel data structures
(pipe buffers, page-tables, task-structure-pages) are also sacred, and
won't be paged out.  Under normal use this amounts to anything between
20 and 100 pages (numbers are total guesswork) of "free" memory.

                Linus

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and comp.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.95a released on March 17, 1992

End of Linux-Activists Digest
******************************
