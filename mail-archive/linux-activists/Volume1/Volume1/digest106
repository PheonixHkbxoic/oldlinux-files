From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Sat, 14 Mar 92 02:15:10 EST
Subject:  Linux-Activists Digest #106

Linux-Activists Digest #106, Volume #1           Sat, 14 Mar 92 02:15:10 EST

Contents:
  Re: Does compress/uncompress still have bugs? (Theodore Ts'o)
  Re: Linux source code reductions necessary or not? (Theodore Ts'o)
  Zmodem (anspaugh@memstvx1.memst.edu)
  Extended partitions (A. V. Le Blanc)
  ptrace bug in 0.95 (Ross Biro)
  Re: sz & rz on linux (David Fenyes)
  Re: Linux-0.95 (Charles Hedrick)
  Re: Complete Linux-stuff as tar.Z file ? (Michael Hamilton)
  Some Problems: Emacs, gdb, and recompiling 0.95 (Nolet Richard G.)
  Re: Documentation: an offer/an idea (pcouvares@hamp.hampshire.edu)
  Re: Linux source code reductions necessary or not? (Dan Miner)
  Re: Complete Linux-stuff as tar.Z file ? (Michael Hamilton)

----------------------------------------------------------------------------

From: tytso@ATHENA.MIT.EDU (Theodore Ts'o)
Subject: Re: Does compress/uncompress still have bugs?
Reply-To: tytso@athena.mit.edu
Date: Fri, 13 Mar 1992 23:35:58 GMT

   From: jem@niksula.hut.fi (Johan Myreen)
   Date: 13 Mar 92 18:58:48 GMT

   If you feed uncompress a corrupt file it goes mad, eating up all
   memory. This is true for uncompress in general, not only the Linux
   version.

That's true.  The difference is that on other systems, accesses to
memory that's clearly not part of the text or data segment will result
in a Segementation Violation.  Linux does not have that concept down
yet; if you access a non-existent page, it will map in a zero-filled
page for you.  It doesn't first check to see if it's reasonable for that
page to exist or not.  Therefore, it takes longer for uncompress on
Linux dies a slow painful death when you feed it a corrupt file, where
as on other systems it dies a quick one.  :-)

                                                - Ted


------------------------------

From: tytso@ATHENA.MIT.EDU (Theodore Ts'o)
Subject: Re: Linux source code reductions necessary or not?
Reply-To: tytso@athena.mit.edu
Date: Sat, 14 Mar 1992 00:15:09 GMT

   From: db1@ukc.ac.uk (D.Bolla)
   Date: 13 Mar 92 15:17:03 GMT
   Reply-To: db1@ukc.ac.uk (Damiano Bolla)

   1) Organize the ftp sites such there are different subtrees for different
      releases of linux.

The problem with this suggestion is that there are many things which
will work for multiple releases, and it's painful to have to do figure
out what should be considered Linux 0.12, or 0.13, or 0.11..... for
example, the gcc which I have been using up until very recently was the
original GCC compiler that was released for 0.10.  

It doesn't make sense to ask each FTP site maintainer to make their own
judgements about what binary works for which version of Linux.  I (at
the very least) do not have that kind of time on my hands.

I do recognize the need for what you are requesting, and I have been
pinning my hopes on the "ABC Release" of Linux, which will hopefully
have everything bundled up for people to use.  There will still be a
place for the more chaotic and concontrolled method of FTP distribution,
for people who are willing to live on the bleeding edge of technology.
But for most people, the "ABC Release" should make it much easier to put
together a release.  

Of course, I suspect that the "ABC Release" will lag a bit when compared
to Linus's release of the sources, but if you're really impatient, you
can either do it yourself or pay someone enough money that they feel
like doing it for you on your schedule.  Keep in mind, Linux is free
software, and that means is that while suggesting that someone might
want to do *X* can be productive, demanding that people to do things
just because it makes things more convenient for *you*, at possibly
great time and effort for *them*, doesn't necessarily go over very well.
:-)

                                        - Ted

------------------------------

From: anspaugh@memstvx1.memst.edu
Subject: Zmodem
Date: 14 Mar 92 00:13:54 GMT

Where can I get the Zmodem source code that will compile under Linux????

------------------------------

From: zlsiial@uts.mcc.ac.uk (A. V. Le Blanc)
Subject: Extended partitions
Date: 13 Mar 92 08:04:55 GMT
Reply-To: LeBlanc@mcc.ac.uk (A. V. Le Blanc)


In article <1992Mar11.225753.17289@colorado.edu> drew@cs.colorado.edu (Drew Eckhardt) writes:
>Of course, the drivers currently work with Linux .12, which allows 4 partitions
>per drive, and  64M per file system.  That's a limit of 256MB - but 
>that will change after the drivers are patched to use the .95 
>extended partitioning scheme.

The official documentation is rather vague about the extended partitions
scheme: warnings that it should be used with caution have little
effect if we don't know how to implement it.  Should there be
a special partition code in the primary partition table to indicate
a linux-style extended partition?  How does the extended partition
indicate its own parts?  How do we set it up and test it?

     -- Owen
     LeBlanc@mcc.ac.uk

------------------------------

From: bir7@leland.Stanford.EDU (Ross Biro)
Subject: ptrace bug in 0.95
Date: Sat, 14 Mar 1992 01:49:08 GMT


There is a bug in ptrace as supplied in 0.95.  Arount line 110 where 
the address is computed should be as given below.  The mistakes were
in the first line the mask was 0xffff000 and the shift was 8, and
in the third line addr was not added.  Sorry for any problems.

Also I've created a primitive kernel configuration system.  I
uploaded it to tsx-11.mit.edu, so it should be available soon.
(Of course with 0.95a comming out, everything will need to be
changed.)

        Ross Biro bir7@leland.stanford.edu 

  /* Now compute the address, and make sure that it is present. */
  address = ((task[tsk]->ldt[seg].a & 0xffff0000) >> 16) |
            ((task[tsk]->ldt[seg].b & 0xff) << 16 ) |
            (task[tsk]->ldt[seg].b & 0xff000000) + addr;

  page = *((unsigned long*) ((address >> 20) & 0xffc));



------------------------------

From: David Fenyes <dfenyes@thesis1.med.uth.tmc.edu>
Subject: Re: sz & rz on linux
Reply-To: dfenyes@thesis1.med.uth.tmc.edu
Date: Sat, 14 Mar 1992 02:32:30 GMT

wolff@neuron.et.tudelft.nl (Rogier Wolff) writes :

| zmodem is a protocol, it reqires actions from both sides of the 
| communication line. RZ will thus have to receive data, and send
| acknowledges over the modem. 
| Therefore you should use:
| 
| rz </dev/tty64 >/dev/tty64 
| 
| I use a script rzz with this command in it.

this construct will work, but the <xxx>xxx doesn't help, since
rz neither reads or writes standard i/o.  standard i/o behaves
like asynchronous streams.

To use sz & rz, do the following:

bin$ kermit
(Kermit startup message)
KERMIT> connect
(dial & login)
remote$ sz file1 file2 file3
(type CTRL-"\" "C" to escape to Kermit)
KERMIT> (type CTRL-Z to suspend Kermit)

bin$ rz &  # runs rz in the background

This transmits file1-3 from the remote host to my Linux machine.

typing "rz" at the remote host and "sz f1 f2 f3 &" on the local
machine sends files to the remote host.

The name of the modem is compiled into rz & sz.  I named the device
/dev/modem, which is a link to (in my case) /dev/tty66.

Good luck,

======
David Fenyes                                 dfenyes@thesis1.med.uth.tmc.edu
University of Texas Medical School           Houston, Texas


------------------------------

From: hedrick@dartagnan.rutgers.edu (Charles Hedrick)
Subject: Re: Linux-0.95
Date: 13 Mar 92 04:43:57 GMT

d_smith@csd.brispoly.ac.uk (Dylan Smith) writes:

>I see you are actually using ka9q - where do you get SL/IP for Linux from
>(I take it it is that what you are using.)

Huh?  KA9Q is an implementation of TCP/IP, which includes SLIP.  Thus
it is SL/IP for Linux.  I'm not sure what you are asking.  If you want
to know where KA9Q is, it's in athos.rutgers.edu:/pub/linux.  I'll be
doing another minor release once 0.95 stabilizes.  It has "ip stat"
report statistics on SLIP and header compression, and has an option to
adjust the timeout on the main select call (a very minor performance
tweak, useful primarily for debugging).  I'll upload that release to
tsx-11.  (Actually, if the tsx-11 mavens wanted to look at /pub/linux
I wouldn't complain.)

This is a very old version of KA9Q, before NOS.  However I've
retrofitted compressed SLIP, some minimal domain support, and a few of
the recent TCP protocol improvements.  I use it with a Cisco terminal
server, but SLIP support is available for a variety of other systems.
(Unfortunately I don't know where.)

The problem with using it under 0.12 is that you need 2 or 3 kernel
patches (all of which are in the same directory: You definitely need
nonblock.tar.Z and select.patch, and you probably want serial-hang,
though whether you need it seems to depend somewhat upon your serial
controller chip.)  SLIP basically works under 0.12 with these patches,
but there are performance problems, because the kernel tends to lose
characters on the serial line.

Under 0.95 no kernel patches seem to be needed, however until Linus
releases his fixed-up 0.95 (0.96?  0.95a?), there are going to be
performance problems that cause display to be choppy.  In fact KA9Q
can be used as a workaround for one of the bugs in 0.95: the TCP
checksum detects the problem reported earlier with characters getting
interchanged, so telnet sessions may work better than kermit sessions.
But that assumes that you find 0.95 usable otherwise.  Based on
reports here, this seems to depend upon the details of your system.

------------------------------

Subject: Re: Complete Linux-stuff as tar.Z file ?
From: hamilton@peponi.wcc.govt.nz (Michael Hamilton)
Date: Sat, 14 Mar 1992 04:14:43 GMT

In article <3784@mercury.brunel.ac.uk> cs89rdb@brunel.ac.uk (cs87ejh) writes:
>hfaester@Physik.TU-Muenchen.DE (Hannes Faestermann) writes:
>: Just a suggestion: I think it would be nice to have the complete Linux stuff 
>: available as one tar.Z file. It would save net traffic and other people could
>
>Find a way of fitting it on a 1.2|1.44 MB floppy and you have a chance.
>I think the best way for linux to be distributed is with a boot disk, an
>install disk and several files disks.
>

I found that this is in dead an easy way to get up and running.  I
originally took the 0.12 boot, root and rawrite, and created a hard
disk root, I then untarred 4 compressed tars, each one containing a
portion of the abc-banjo root.  I created the 4 tars by running the
following awk script to create lists of abc-banjo files that would fit
into a less than 1.44 Mb tar.Z.  If this were augmented with help on
configuration it would be even easier.

Here's the awk script, which I have found usefull for chopping up other
things I've moved to linux.
---- cut here ---
#
#  Creates LIST-n and a LIST-links files from the output of ls -lR.
#  The idea is to break down a list of files into several lists suitable
#  for distribution in several tars.  The spitting being based on the 
#  capacity of the output media in bytes.
#  You can feed LIST-n to "tar -cRf x.tar LIST-n" to create a multi-part 
#  distribution.   LIST-links can be feed to sh to re-create the links
#  after untarring at the destination.
#
#  Usage:    ls -lR | awk -f list.awk lsize=n size_col=m -
#
#  Where:    n is the desired total of the file sizes.
#
#  E.g.      ls -lR Release_dir | awk -f list.awk lsize=2000000 size_col=4 -
#            tar -cRf part-1.tar LIST-1
#            tar -cRf part-1.tar LIST-2
#            tar -cRf part-1.tar LIST-3
#            tar -cRf part-1.tar LIST-4
#            compress ...
#         
#            And with luck (depends on compressability), you should 
#            have 4 tars which compress to fit on 1.44 Mb floppies.
#

        {
                if (!init) 
                        {
                        print "max list size is " lsize ;
                        total = lsize + 1 ;
                        init = 1 ;
                        print "" > "LIST-links" ;
                        if (!size_col) size_col = 5 ;
                        }
        }       

$1 ~ /:/        {
                dirname = substr ($1,1,length($1) - 1) ;
        }

NF > 2 && substr ($1,1,1) != "d" {
                if ( $(NF -1) != "->" ) {
                        total += $size_col ;
                        if (total+0 > lsize+0) {
                                if (list_num) {
                                   print "Total size of files listed is " total - $size_col ;
                                }                               
                                list_num++ ;
                                total = $size_col ;
                                list_name = "LIST-" list_num ;
                                printf ("%s/%s\n", dirname, $NF) > list_name ;
                        }               
                        else {
                                printf ("%s/%s\n", dirname, $NF) >> list_name ;
                        }               
                }
                else {
                        printf ("ln %s/%s %s\n", dirname, $(NF-2), $NF ) >> "LIST-links" ;
                }
        }

END     {
                print "Total size of files listed is " total - $size_col
        }       
---- cut here ----
-- 
________________
Michael Hamilton, Computer Services Section, Wellington City Council, P.O. Box
2199, Wellington, New Zealand.  Phone: (64) (4)801-3300  FAX: (64) (4)801-3020
Domain: hamilton@csc.wcc.govt.nz          PSImail: PSI%0530147000090::HAMILTON 

------------------------------

From: nolet@concour.cs.concordia.ca (Nolet Richard G.)
Subject: Some Problems: Emacs, gdb, and recompiling 0.95
Date: 14 Mar 92 05:05:38 GMT


First of all: kudos to a successful os.  I've been using linux 0.12 since
around mid January. I've just upgraded to 0.95 and gcc 1.4. 
I waited until 0.95 came out to ask a few questions because I had applied
a number of patches to 0.12 and it becomes hard to figure out if it's a
patch that's causing the problems. Ok here goes - I noticed someone mention
this problem already but I may have missed the answer:

If I try to execute Emacs shell mode this is what I get:
   
Process shell background read attempted from control tty

The status line says:
--**-Emacs: *shell*                (Shell: stop)----All----etc.....

Needless to say the shell doesn't work :-( - Any ideas??? and yes it still
occurs in 0.95!

The next problem occurs with gdb. Basically I was testing it out on a simple
program - "hello world" that also asks for character input and branches 
accordingly.  This is what gdb tells me: 

(no debugging symbols found)...
(gdb) run
Starting program: /usr/root/hello 
[ioctl TIOCSPGRP failed in terminal_inferior: Not owner]

Program received signal 21, Stopped (tty input)
0x6cc in read ()
(gdb) quit
The program is running.  Quit anyway? (y or n)y

 Gee - if root isn't the owner than who is?
 Still - linux is great and it's free so I won't complain too loudly.
 *BUT* here comes the worst part - 0.95 and gcc 1.4 has trouble compiling.
 I picked up the new linux source from tsx-11 and wanted to recompile so
 I could use ps. Well!, it mostly compiled ok except for two files:
 
        console.c and fork.c

For both of these files I got this type of message:

gcc -Wall -O -fstrength-reduce -fomit-frame-pointer  -finline-functions -nostdin
Program  got fatal signal 436.
make[1]: *** [console.o] Error 1
make: *** [kernel/chr_drv/chr_drv.a] Error 1

The fix seems to be to remove -O from the Makefile - then it all compiles ok!
But by the time I create the Image file it's considerably larger than the
distribution (could be due to a change in optimization and 1.4 rather than
2.0 I guess):
 
tools/build boot/bootsect boot/setup tools/system /dev/hda4 > Image
Root device is (3, 4)
Boot sector 512 bytes.
Setup is 1384 bytes.
System is 217088 bytes.
sync

Booting from this Image is - well - not happening :-(
more output:

8 virtual consoles
4 pty's
stack segment: 0000
EIP:    0008:0000D2D6
EFLAGS: 00010202
fs: 0010
base: 00000000, limit: 000A0000
Pid: 0, process nr: 0
8b 45 cc 66 c7 04 cd e0 a4 00
Kernel panic: Trying to free up swapper memory space
In swapper task - not syncing

And then it just sits there - bummer.

One other thing with 0.95 - the keypad arrow keys output things like: 
^[Ox and ^[Ov rather than the usual  ^[OA and ^[OC etc.
This was another reason to recompile - maybe by changing the keyboard to US
it would change the keypad output.

Anyway - I've had no problems applying patches to 0.12 and recompiling the 
kernel. Am I doing something wrong with 0.95? Oh yeah - before I forget,
my system:
ALR 386 with math copro, 4MB mem

Thanks,
+-------------------------------------------------------------------------+
| Richard Nolet                          "I am not sure what this is, but |
| Montreal...                             an `F' would only dignify it."  |
|                                                                         |
| nolet@concour.cs.concordia.ca                              514-487-5817 |
+-------------------------------------------------------------------------+
--
+-------------------------------------------------------------------------+
| Richard Nolet                          "I am not sure what this is, but |
| 6030 Cote St. Luc #204 (H3X 2G7)        an `F' would only dignify it."  |
|                                                                         |

------------------------------

From: pcouvares@hamp.hampshire.edu
Subject: Re: Documentation: an offer/an idea
Date: Sat, 14 Mar 1992 03:00:54 GMT

 [stuff re: "idiot's guide" deleted]
>    Is this a daft idea?

        Absolutely not!  I am one such Unix idiot. I'm interested in installing
Linux on my PC so I can learn it, and I've been following this group for a week
or two. I understand about 1/4 of what I read, and a guide like this would help
a lot. I know I need to have some basic knowledge of Unix before I start, and I
think I have that.

-Peter Couvares
pcouvares@hamp.hampshire.edu
pfcouvares@amh.amherst.edu
pfcouvares@amherst.bitnet

------------------------------

From: dminer@mcs213e.cs.umr.edu (Dan Miner)
Subject: Re: Linux source code reductions necessary or not?
Date: 14 Mar 92 04:52:57 GMT


  My 2 cents on this is:   
Since Linux in still very deep in development stages, code combiming 
should be done much later on a much advanced system.  If you combine
all the code, then when something breaks
  1)  It is easier to fix when parts are separate.
  2)  Less things are effected by such a bug.

For ease of programmer (Like Linus), wait til you got it ALL working right.

 Dan
-- 
==========================================================================
 Dan Miner                         email:
                                     dminer@cs.umr.edu  (prefered)
Computer Science                     S101908@UMRVMA.BITNET

------------------------------

Subject: Re: Complete Linux-stuff as tar.Z file ?
From: hamilton@peponi.wcc.govt.nz (Michael Hamilton)
Date: Sat, 14 Mar 1992 04:25:37 GMT

In article <3784@mercury.brunel.ac.uk> cs89rdb@brunel.ac.uk (cs87ejh) writes:
>hfaester@Physik.TU-Muenchen.DE (Hannes Faestermann) writes:
>: Just a suggestion: I think it would be nice to have the complete Linux stuff 
>: available as one tar.Z file. It would save net traffic and other people could
>
>Find a way of fitting it on a 1.2|1.44 MB floppy and you have a chance.
>I think the best way for linux to be distributed is with a boot disk, an
>install disk and several files disks.
>

Rather than one tar.Z file, I think it would be better to have a set,
each small enough to fit on a floppy.  I originally took the 0.12
boot, root and rawrite, and created a hard disk root, I then untarred
4 compressed tars, each one containing a portion of the abc-banjo
root, over the top of the initial root.  I created the 4 tars by
running the following awk script to create lists of abc-banjo files
that would fit into a less than 1.44 Mb tar.Z.  If this were augmented
with help on configuration installs  would be even easier.

Here's the awk script.  I've found it usefull for chopping up other
things I've moved to linux.  I'm short of disk space so I also use the
same script on linux to help with backups to floppy.

---- cut here ---
#
#  Creates LIST-n and a LIST-links files from the output of ls -lR.
#  The idea is to break down a list of files into several lists suitable
#  for distribution in several tars.  The spitting being based on the 
#  capacity of the output media in bytes.
#  You can feed LIST-n to "tar -cRf x.tar LIST-n" to create a multi-part 
#  distribution.   LIST-links can be feed to sh to re-create the links
#  after untarring at the destination.
#
#  Usage:    ls -lR | awk -f list.awk lsize=n size_col=m -
#
#  Where:    n is the desired total of the file sizes.
#
#  E.g.      ls -lR Release_dir | awk -f list.awk lsize=2000000 size_col=4 -
#            tar -cRf part-1.tar LIST-1
#            tar -cRf part-1.tar LIST-2
#            tar -cRf part-1.tar LIST-3
#            tar -cRf part-1.tar LIST-4
#            compress ...
#         
#            And with luck (depends on compressability), you should 
#            have 4 tars which compress to fit on 1.44 Mb floppies.
#

        {
                if (!init) 
                        {
                        print "max list size is " lsize ;
                        total = lsize + 1 ;
                        init = 1 ;
                        print "" > "LIST-links" ;
                        if (!size_col) size_col = 5 ;
                        }
        }       

$1 ~ /:/        {
                dirname = substr ($1,1,length($1) - 1) ;
        }

NF > 2 && substr ($1,1,1) != "d" {
                if ( $(NF -1) != "->" ) {
                        total += $size_col ;
                        if (total+0 > lsize+0) {
                                if (list_num) {
                                   print "Total size of files listed is " total - $size_col ;
                                }                               
                                list_num++ ;
                                total = $size_col ;
                                list_name = "LIST-" list_num ;
                                printf ("%s/%s\n", dirname, $NF) > list_name ;
                        }               
                        else {
                                printf ("%s/%s\n", dirname, $NF) >> list_name ;
                        }               
                }
                else {
                        printf ("ln %s/%s %s\n", dirname, $(NF-2), $NF ) >> "LIST-links" ;
                }
        }

END     {
                print "Total size of files listed is " total - $size_col
        }       
---- cut here ----
-- 
________________
Michael Hamilton, Computer Services Section, Wellington City Council, P.O. Box
2199, Wellington, New Zealand.  Phone: (64) (4)801-3300  FAX: (64) (4)801-3020
Domain: hamilton@csc.wcc.govt.nz          PSImail: PSI%0530147000090::HAMILTON 

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
