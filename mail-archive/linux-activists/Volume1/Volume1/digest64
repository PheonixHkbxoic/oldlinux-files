From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Mon, 24 Feb 92 09:15:11 EST
Subject:  Linux-Activists Digest #64

Linux-Activists Digest #64, Volume #1            Mon, 24 Feb 92 09:15:11 EST

Contents:
  SML on Linux? (Peter Hawkins)
  Re: Easy video mode changes, nonstandard disk support, and v86 mode (Drew Eckhardt)
  Re: Easy video mode changes, nonstandard disk support, and v86 mode (Curtis Yarvin)
  poe-IGL sucks up cycles (Drew Eckhardt)
  new libc, file utils, date-related stuff (Charles Hedrick)
  Re: A couple of problems... (Charles Hedrick)
  Re: A couple of problems... (Charles Hedrick)
  Re: no subject (file transmission) (Charles Hedrick)
  new icon, math library fixes, libc fix (Charles Hedrick)
  new libraries (Douglas E. Quale)
  REQUEST: swapon binary (Ivan Cheng)

----------------------------------------------------------------------------

From: s6883289@ucc.umass.edu (Peter Hawkins)
Subject: SML on Linux?
Date: 24 Feb 92 03:10:07 GMT

did anyone successfully compile SML-NJ on Linux on a 386?

------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: Re: Easy video mode changes, nonstandard disk support, and v86 mode
Date: 24 Feb 92 05:17:50 GMT

In article <5376@falcon.ukc.ac.uk> db1@ukc.ac.uk (D.Bolla) writes:
>In article <1992Feb22.071709.14782@cs.brown.edu> cgy@cs.brown.edu (Curtis Yarvin) writes:
>>In article <1992Feb22.021526.225@colorado.edu> drew@hazelrah.Colorado.EDU (Drew Eckhardt) writes:
>>>We want X11 up on Linux.  Since not everybody has an ATI or Tseng chipset, we 
>>>also want to support the other cards out there - Trident 8800 / 8900, 
>>>Genoa, etc.  
>>
>>What's wrong with device drivers?  Ioctls for bank switching and so forth,
>>and maybe a mappable frame buffer, and porting X should be clean enough.
>             ^^^^^^^^^^^^^^^^^^^^^
>                YES

If you read the post, I was suggesting v86 support of BIOS for 
-INITIALIZATION- and that a syscall should be provided for 
bank switching.  These accomodated, we have -ONE- driver 
for virtually all SVGA cards.


Also, I suggested that this was a stopgap meassure until real 
support could be provided for everything.

>Agreed !
>I have a NON standard VGA card. It seems that I should be interested in
>using the BIOS, right ?
>NO. 
>This is UNIX. Let's leave DOS OUT !
>This doesn't mean that we loose the card. It means that we use UNIX
>tools to achieve the same result. 

>Eg: What about starting all the time using VGA and when the system is up

Maybe you have a VGA.  Maybe I have a SVGA.  Not everyone does. 

>and running using ioctl to select various modes ?
>It IS possible to avoid BIOS. !
>
>Damiano

Yes, I can write a driver for the Trident card, for my ST-02 (being 
debugged), etc.  This is optimal.  However, it takes time.  Having 
BIOS available as a fall back means it works now.  For any bizarre 
hardware out there with a BIOS interface (99% of what's outthere).

As far as using BIOS for kicking into SVGA modes - this is initialization.
The same code we're going to write for every SVGA chip out there.
Called once.  Well, the x386 server lets you change resolution dynamically - 
so maybe more than once. I honestly doubt that you would notice a 1 ms 
delay on X startup.

 

------------------------------

From: cgy@cs.brown.edu (Curtis Yarvin)
Subject: Re: Easy video mode changes, nonstandard disk support, and v86 mode
Date: 24 Feb 92 05:44:44 GMT

In article <1992Feb24.051750.25625@colorado.edu> drew@cs.colorado.edu (Drew Eckhardt) writes:
>
>Also, I suggested that this was a stopgap meassure until real 
>support could be provided for everything.

I don't like stopgap measures; they have a way of becoming permanent.  It
seems to me that stopgap measures are how Unix got as bloated as it is.

Anyone else share my prejudices?

c

------------------------------

From: drew@hazelrah.Colorado.EDU (Drew Eckhardt)
Subject: poe-IGL sucks up cycles
Date: 24 Feb 92 05:36:17 GMT

The infinite loop in simpleinit eats up cycles.  Under a load, you can 
notice a difference in performance (386-33).  A simple fix that works 
is to put a sleep(1) at the end of the loop.

------------------------------

From: hedrick@dumas.rutgers.edu (Charles Hedrick)
Subject: new libc, file utils, date-related stuff
Date: 23 Feb 92 07:37:08 GMT

I've just put up source and binary for libc, the Gnu file utilities,
and date-related programs on athos.rutgers.edu for anonymous FTP.
I'd appreciate it if the folks who are working on libc and the
kernel would take a look at this.  The following description is
from the README, READ.tim-futil.  (Sorry for the cryptic name --
14 characters, you know).

The changes to libc are:
  imported BSD versions of the time-related stuff, setenv, getenv
  fixed vprintf and friends
These are based on the new libc that came with GCC 1.40.  

This file describes the following sets of patches:

  futilbin.tar.Z  futilsrc.tar.Z
  libbin.tar.Z    libsrc.tar.Z
  kern-time.pat 

These are patches to the kernel and the new libc (the one with gcc
1.40 and improved math), as well as new copies of the Gnu file
utilities compiled with the new libc, and a couple of new programs
related to dates.

  futilbin contains new binaries of the Gnu file utilities
  futilsrc is the source to them.  This is fairly unchanged from
        the Gnu source, but a couple of minor things had to be done.
  libbin contains a new version of libc.a, as well as the binaries
        for the time-related programs: date, zic, setzone, and the
        source from which you can build /usr/share/zoneinfo and
        /etc/localtime.  I'm giving that as source because people
        may need to change it.  Once you've unloaded this stuff,
        you'll want to look at /usr/src/zic/README.  Basically,
        you just type "make install" as root in /usr/src/zic,
        and it will put the time zone stuff in /usr/share/zoneinfo.
        You'll want to make sure the Makefile has the right
        local time zone.
  libsrc contains source to the libc modules I have changed -- not
        all of libc -- and to date, zic, and setzone.
  kern-time.pat contains diffs to implement the rename system
        call (because the new libc uses it -- without this, the
        new "mv" won't work), and to make settimeofday set the
        CMOS clock.

The major changes should be apparent from this list.  I started out to
implement the "date" program and time zones.  I need time zone code
because I run my CMOS clock on GMT.  (I do this so that I don't have
to adjust it every time daylight time happens.  Unix handles this
automatically.)  You can of course continue to run your clock on local
time.  If you want to do things this way, then you don't need to do
anything with zic or setzone -- if the time zone descriptions are
missing, the library routines will treat the clock as local.

Once I did this, I decided to rebuild the file utilities, largely so
that "ls" would show the right creation times.  But it also fixes du
to show Kbytes instead of 512 byte blocks.  (I'm not sure why it was
using 512 blocks before -- this behavior is only suppose to happen if
you set the environment variable POSIX_ME_HARDER.  The new mv then
pushed me into implemented rename in the kernel, and in order to do
"make install", I had to fix rename so you can rename on top of
existing files.  The bug fixes for vXprintf also resulting from making
the file utilities work.

Time zone are a mess.  Partly for historical reasons: the new zoneinfo
thing is used by libraries like ctime, localtime, etc.  But the kernel
calls, gettimeofday and settimeofday, and the ftime library routine
use an old convention, where the system has a single time zone, and a
daylight saving code that's a small integer (0 for none, 1 for US).
SunOS has a program tzsetup that looks at /etc/localtime and tries to
figure out the old time zone and daylight savings code that's closest
to the information in the new format.  BSD has removed ftime
completely, claiming that it's impossible to map from the new system
to the old one, and everybody should convert.  I've taken the
intermediate strategy of letting you set a time zone using setzone.
Presumably this will be run in /etc/rc.  It takes as arguments the
values that xxxtimeofday and ftime want: minutes west of GMT and
daylight savings code.

The other oddity is raised by the CMOS clock.  Linux initializes the
time based on the CMOS clock.  Unfortunately that clock is used mostly
by MS/DOS, which runs on local time rather than GMT.  Thus when you
initialize this way, you end up with Linux running on local time, not
GMT.  When you set the time zone using setzone (or the settimeofday
system call with the tz argument specified), Linux will adjust its
internal clock to GMT.  If you keep your CMOS clock on GMT, you should
use setzone with the -u option.  This prevents Linux from adjusting
the time (by sort of a hack -- it sets the time to the current time --
when both the time zone and time are set at the same time,
settimeofday does not adjust the clock to GMT).  If you choose not to
use time zones at all, but simple let the clock stay on local time,
you can forget about setzone completely.

In summary, there are three reasonable time strategies:

  1) ignore it.  Don't set up zoneinfo and don't use setzone.
        Your internal clock will be on local time, set from
        the CMOS clock.

  2) set up timezones, and run your CMOS clock on local time,
        as in MS/DOS.  To do this, set up zoneinfo as
        indicated above, and run setzone in /etc/rc.
        E.g. if you are on the east cost, do
                /etc/setzone 300 1

  3) as above, but your CMS clock is on GMT.  Set up zoneinfo
        and run setzone, but with the -u option
                /etc/setzone -u 300 1

------------------------------

From: hedrick@dumas.rutgers.edu (Charles Hedrick)
Subject: Re: A couple of problems...
Date: 23 Feb 92 17:44:55 GMT

>2-  How do people backup their systems?  Trying to create
> large tar file either on floppies or to a disk file
>almost inevitably locks up my system.  A known 
>problem?  Maybe fixed in 0.13? :-) 

Linus has been hoping that these hangs (which occur to several people)
are due to running out of memory, or possibly to coming close to
running out (a situation which causes special code in the kernel to
run to free up memory).  I saw a great improvement when I allocated a
partition for swapping.  I have had only one hang since, and it was
late yesterday when I was experimenting with some dubious kernel
changes.

------------------------------

From: hedrick@dumas.rutgers.edu (Charles Hedrick)
Subject: Re: A couple of problems...
Date: 23 Feb 92 17:52:48 GMT

I just realized one thing that will cause I/O errors when doing
backups: if you have any bad blocks on the disk, "mkfs -c" will put
them into /.badblocks.  If you do a full backup, tar will try to read
that file, and of course will cause I/O errors.  You should use the -X
option to tar to exclude /.badblocks.

By the way, here's the way I do full backups.  I haven't gotten around
to doing partials yet, but at least keep a timestamp so I do can a
find -newer.  Note that what I'm doing is piping the backup into
mwrite, which writes a file under DOS.  Obviously this requires a lot
of disk space, since I end up with two copies of Linux, one under DOS.
I have a cartridge tape drive that works only under DOS, so I then
bring up DOS and do a backup there.  If you do that, don't forget to
keep a copy of mread somewhere under DOS, since you'd need that to
restore from backups.

#!/bin/sh
tar -c -b 200 -X /etc/dump.excludes -f - / | /usr/local/bin/mwrite - c:/unixback/dump.tar
touch /etc/dump0.stamp

/etc/dump.excludes is a file listing things not to backup.  It
currently lists only /.badblocks.

------------------------------

From: hedrick@dumas.rutgers.edu (Charles Hedrick)
Subject: Re: no subject (file transmission)
Date: 23 Feb 92 23:11:31 GMT

I hadn't tried any floating point with the old compiler.  But with the
new one, conversion from real to integer is wrong.  It's rounding
instead of truncating.  I don't know enough about the 387 to be able
to tell what the problem is, but it could certainly be the floating
point emulation in the kernel.  I'm using -lsoft, and I don't have a
387.  I'm much closer to having a releasable port of icon, but some of
the tests fail, and one even crashes.  I suspect it's because of this.
(I get array boundary out of bounds on some tests involving random
number.  I think because of rounding it's trying to access the next
element beyond the end.)

------------------------------

From: hedrick@athos.rutgers.edu (Charles Hedrick)
Subject: new icon, math library fixes, libc fix
Date: 24 Feb 92 07:09:55 GMT

On athos.rutgers.edu, in pub/linux, I've just put a copy of icon, as
icon.tar.Z.  It is designed to be used with a distribution of Icon,
from cs.arizona.edu, though if you don't need any of the libraries,
the binaries here may be enough for you.  (This isn't quite like libc
-- the libraries are various optional modules.  You can easily import
the ones you need and compile them individually.)  This tar file puts
things in /usr/icon/v8/bin and /usr/icon/v8/config/unix/linux.  The
first contains the execuatables icont and iconx (the translator and
runtime, respectively).  The second contains the implementation
specific source files.  The linux port did not require modifying any
of the main source file tree, so you should be able to install the
Linux configuration subdirectory and then following the normal
procedures for rebuilding icon.  I've run all the tests, and
everything works.  Note that building iconx uses -lm.  If you're
using libsoft.a (as I did here), you should make sure a copy of
libsoft.a is available as /usr/lib/libm.a.

In order to get things to this point, I had to fix several things.
The floating point fixes are in math.fixes:
  - fix crt0.s to initialize the 387 to truncate towards
        zero.  The coode produced by GCC seems to assume
        this.  Without it, assigning a floating point
        number to an integer uses rounding instead of
        truncation.  This caused disasters to the icon
        validation tests.
  - fix sqrt to be able to take sqrt(0)
  - add ecvt, which is needed by icon
By the way, libsoft.a apparently had not been ranlibbed.  I
got a complaint about a missing routine that went away
after I ranlibbed it.

I also had to fix fwrite.  If you tried to write a data structure that
had a -1 in just the wrong place, the write would blow up.  I've put
this fix into libsrc.tar.Z and libbin.tar.Z, which I described in a
previous posting.

------------------------------

From: quale@khan.cs.wisc.edu (Douglas E. Quale)
Subject: new libraries
Date: 24 Feb 92 07:11:32 GMT

Good stuff.

Do we have a timetable for the rest of the GNU C standard library?
After encouragement from Bruce Evans and John Kohl I found that Chris
Torek's new stdio implementation from the BSD Networking Release 2
compiles with relatively few changes.  This stdio is designed to be
ANSI and BSD compatible and is much better than the old BSD code.
If the GNU libc.a is going to be a long wait, we might want to use
this stdio.

In fact, enough of the BSD routines compile so that when combined with
what we already have in Linux to the best of my knowledge all that is
missing for a POSIX compatible libc.a is fpathconf, mkfifo, pathconf,
siglongjmp, sigsetjmp, strtod, tcdrain, tcflush and tcsendbreak.  In
particular, the BSD code contains all the POSIX time functions and
works with the TZ environment variable.

About the new library:  sysconf.c needs to be fixed to return the correct
answers for job control and saved ids.  This is utterly trivial, but we
don't want to overlook it, even though I haven't seen a single application
that uses it.  (The GNU utilities would use sysconf if any of the values
could change at runtime.  In Linux, all these values are constants and
can be snarfed from <limits.h> at compile time.)

Several folks have (quite reasonably) complained about the error messages
in sys_errlist.  Following is the error list I use.  (Add errlist.o to
the objects in gen/Makefile.)

# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#       errlist.c
#       strerror.c
#
echo x - errlist.c
sed 's/^X//' >errlist.c << 'END-of-errlist.c'
Xchar * sys_errlist[] = {
X       "Unknown error",                /* 0 */
X       "Operation not permitted",      /* EPERM */
X       "No such file or directory",    /* ENOENT */
X       "No such process",              /* ESRCH */
X       "Interrupted system call",      /* EINTR */
X       "I/O error",                    /* EIO */
X       "No such device",               /* ENXIO */
X       "Argument list too long",       /* E2BIG */
X       "Exec format error",            /* ENOEXEC */
X       "Bad file descriptor",          /* EBADF */
X       "No child processes",           /* ECHILD */
X       "Try again",                    /* EAGAIN */
X       "Out of memory",                /* ENOMEM */
X       "Permission denied",            /* EACCES */
X       "Invalid address",              /* EFAULT */
X       "Block device required",        /* ENOTBLK */
X       "Device or resource busy",      /* EBUSY */
X       "File exists",                  /* EEXIST */
X       "Cross device link",            /* EXDEV */
X       "No such device",               /* ENODEV */
X       "Not a directory",              /* ENOTDIR */
X       "Is a directory",               /* EISDIR */
X       "Invalid argument",             /* EINVAL */
X       "File table overflow",          /* ENFILE */
X       "Too many open files",          /* EMFILE */
X       "Inappropriate ioctl",          /* ENOTTY */
X       "Text file busy",               /* ETXTBSY */
X       "File too large",               /* EFBIG */
X       "No space left on device",      /* ENOSPC */
X       "Invalid seek",                 /* ESPIPE */
X       "Read-only file system",        /* EROFS */
X       "Too many links",               /* EMLINK */
X       "Broken pipe",                  /* EPIPE */
X       "Math argument out of domain",  /* EDOM */
X       "Result too large",             /* ERANGE */
X       "Resource deadlock would occur",/* EDEADLK */
X       "Filename too long",            /* ENAMETOOLONG */
X       "No locks available",           /* ENOLCK */
X       "Function not implemented",     /* ENOSYS */
X       "Directory not empty"           /* ENOTEMPTY */
X       };
X
X#define NR_ERRORS ((sizeof (sys_errlist))/(sizeof(char *))-1)
X
Xint sys_nerr = NR_ERRORS;
X
END-of-errlist.c
echo x - strerror.c
sed 's/^X//' >strerror.c << 'END-of-strerror.c'
X#include <string.h>
X
Xextern int sys_nerr;
Xextern char *sys_errlist[];
X
Xchar * strerror(int n)
X{
X       if (n<0 || n>sys_nerr) n=0;
X       return sys_errlist[n];
X}
X
END-of-strerror.c
exit

--
Doug Quale
quale@khan.cs.wisc.edu

------------------------------

From: cheng@iesd.auc.dk (Ivan Cheng)
Subject: REQUEST: swapon binary
Date: 24 Feb 92 13:09:27 GMT


Where can I find the binaries for swapon? I am unable to compile it
(only 2 Mb-RAM :-(

If it isn't available on ftp, could someone please mail an uuencoded
version of the binaries?

-Ivan

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
