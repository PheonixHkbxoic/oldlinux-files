From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Thu, 20 Feb 92 08:00:09 EST
Subject:  Linux-Activists Digest #58

Linux-Activists Digest #58, Volume #1            Thu, 20 Feb 92 08:00:09 EST

Contents:
  Installing Linux On a HD (Boston)
  Current status of LINUX (Juhana Kouhia)
  Re: More questions about Linux :-) (Mike Miller)
  Why can't /dev/kmem be world-readable? [was Re: More questions about Linux :-)] (Joel M. Hoffman)
  Re: More questions about Linux :-) (Neal Friedman)
  Re: Few comments about Linux (Peter Holzer)
  What is an `insn' (in GCC)? (Joel M. Hoffman)
  Re: Why can't /dev/kmem be world-readable? [was Re: More questions about Linux :-)] (Curtis Yarvin)
  Elvis and Linux (KiYun Roe)
  symlink permissions (Paul C. Janzen)
  Re: MGR, anyone? (Stephen Hite)
  Re: More questions about Linux :-) (Jim Stewart)
  FAQ - Where is it? (Jim Winstead Jr.)
  fix for keyboard hang on scroll lock (Andrew Haylett (GEC-Marconi Research Centre))
  Re: mtools source and binary available (A. V. Le Blanc)

----------------------------------------------------------------------------

From: bboston@engws8.ic.sunysb.edu (Boston)
Subject: Installing Linux On a HD
Date: 19 Feb 92 13:57:52 GMT

Hi, I would like to install Linux on my 386 HD, but unfortunantly I don't have
a tape backup and really don't feel like backing up 200 megs reformating the HD
then restoring said 200 megs.  However, I do run a program (PC-Tools Compress)
which moves all of the data to the very beginning of the HD, so what I am lookin
g for is a program that will directly modify the Partition table to add in a 
partition for Linux at the end of the HD.  Anyone know of one or feel comfortabl
e enough to write one?

------------------------------

From: jk87377@cc.tut.fi (Juhana Kouhia)
Subject: Current status of LINUX
Date: 19 Feb 92 15:01:43 GMT



Would somebody please tell me what is the current status of linux?
How complete it is? What is still missing from linux?

Why I should not start the use of linux for serious programming, text
typesettings and so on?

When it is good enough?

Juhana Kouhia

------------------------------

From: mke@redsun.pps.rain.com (Mike Miller)
Subject: Re: More questions about Linux :-)
Date: 19 Feb 92 16:53:59 GMT

jrc@brainiac.mn.org (Jeffrey Comstock) writes:

]]]I am a little confused by what you are saying.  You should read /dev/kmem with
]]]the kvm_open, kvm_read, kvm_getproc, etc calls.  The ps program in SunOS uses
]]]these routines.  If the kernel changes you rebuild ps with the new libkvm.a,
]]]ps.o stays the same.  
]]
]]Reading the kernal memory is a dirty stinking hack.  Not nice, not clean.

]I don't see what is wrong with it.  It lets you do anything you want with 
]the (running) system - no holds barred.  A system without it would be 
]crippled as far as I am concerned.  I realize that the object of this 
]thread is to come up with a better method, so I am anxious to hear what an
]alternative solution is.


Normal users can't read /dev/kmem, and with good reason I might add.  I
don't know what the solution is, but I do know that it would be nice
to allow normal users the opurtunity to use it without compromising the 
system.

]Sure, you can't strip it, but it is a nifty way to patch a running kernel.

Nifty and nice are not the same thing.  Its still a hack.

]I have seen quite a few posts against /dev/kmem.  I don't think it will make
]it into the release.  If that is what the world wants, so be it.

]Linus and Theodore - Would you please comment on this ?

]-- 
]Jeffrey R. Comstock 
]INET jrc@brainiac.mn.org
]CW   -. .-. ----- -..
-- 
*       Insert your favorite funny/witty saying here, but make it small.       *
* mke@cs.pdx.edu or mke@redsun.pps.rain.com or mke@kaberd.rain.com             *
* Michael J. Miller Jr.                                  Stand. disc. applies. *
*   Please Reply if the content of this message implies that one is expected.  *

------------------------------

From: joel@wam.umd.edu (Joel M. Hoffman)
Subject: Why can't /dev/kmem be world-readable? [was Re: More questions about Linux :-)]
Date: 19 Feb 92 19:07:40 GMT

In article <1992Feb19.165359.23713@redsun.pps.rain.com> mke@redsun.pps.rain.com (Mike Miller) writes:
>Normal users can't read /dev/kmem, and with good reason I might add.  I

This is probably an ignorant question, but why does giving ordinary
users READ (certainly not WRITE) access to /dev/kmem compromise system
security?

-Joel

------------------------------

From: nealf@mdd.comm.mot.com (Neal Friedman)
Subject: Re: More questions about Linux :-)
Date: 19 Feb 92 21:41:31 GMT


    In article <Feb.15.14.55.27.1992.13300@dumas.rutgers.edu> hedrick@dumas.rutgers.edu (Charles Hedrick) writes:
    >>3) Related to the above question there is the problem of the ps command
    >>   that now uses an ioctl to do it's job. This is not very standard.
    >>   Usually what ps does is to use the symbols in /vmlinux to look in
    >>   /dev/kmem for the right stuff. Of course to have a ps like this we need
    >>   a /vmlinux and a /dev/kmem working. Will it be done ?
    >
    >I think many people now believe it's a mistake to have programs
    >reading kernel memory.  This makes programs highly dependent upon the
    >structure of the kernel.

I suggest a /dev/proc (to read the process table),  a /dev/file (to read
the file table) etc...  Each is a different minor number relative to the
/dev/mem driver.   Actually pretty easy to implement, and the only thing
the user has to update is the .h file defining the structure that is returned
on a read (no ioctl: just read()s and write()s).

------------------------------

From: hp@vmars.tuwien.ac.at (Peter Holzer)
Subject: Re: Few comments about Linux
Date: 19 Feb 92 22:21:38 GMT

eichin@ATHENA.MIT.EDU ("Mark W. Eichin") writes:

>       BSD (and likewise SunOS) demonstrated that /dev/kmem was a bad
>idea for "real" code (very useful for kernel debugging, though.) I
>want a *deterministic* interface to the kernel data structures. (Just
>having libkvm is not enough; kvm_open, kvm_read are useless, though

I agree. They are just other names for open/nlist/read. kvm_nextproc,
kvm_getu, etc. are probably good enough as library functions, except
that there are too few of them. A much more complete library to do the
same thing is Dan Bernstein's kstuff package (Which also includes
functions like getavenrun, getboottime, etc.).

>       Also, note that the system call to read the table could be
>made non-privileged, whereas /dev/kmem and /dev/mem can't be readable
>by "normal" users if you are even pretending to have security.

Yes. Also, the kernel can decide which info it can give to users, while
/dev/kmem is ``all or nothing''. It can also convert the info to some
system independent format, so users don't have to know the actual
layout of kernel structures.

Somebody mentioned that a new system call had to be added to the kernel
for each information you might be interested in. I think this would be
relatively easy. You add one new syscall ``sysinfo'' (or similar),
which takes the name of an entity as an argument and returns its
value. The kernel has a table which contains (name, address, conv)
tupels. The syscall then just looks for name and converts the value at
address according to conv. If you need a new service you just extend
this table, no new code needed. 

Example: In Ultrix the average number of running processes are
internally stored as 24+8 bit fixed point numbers. A user process would
expect to get 3 doubles, so the entry could be something like:
{ "avenrun", "l.d.-8/l.d.-8/l.d.-8", avenrun}
which tells the routine to take the three long values at avenrun,
convert them to double, divide them by 256 and store them in a buffer
provided by the user.

The user would have something like
double av[3]; sysinfo ("avenrun", av);
in his code.

This scheme would work well both on monolithic systems like Unix or
Linux and distributed message-passing systems. (And if you cannot
change your kernel (because you are stuck with an OS without source)
you can implement it as a library function which just read /dev/kmem)
-- 
|    _  | Peter J. Holzer                       | Think of it   |
| |_|_) | Technical University Vienna           | as evolution  |
| | |   | Dept. for Real-Time Systems           | in action!    |
| __/   | hp@vmars.tuwien.ac.at                 |     Tony Rand |

------------------------------

From: joel@wam.umd.edu (Joel M. Hoffman)
Subject: What is an `insn' (in GCC)?
Date: Thu, 20 Feb 1992 01:07:39 GMT

I hope this isn't a foolish question:

I was compiling some code, with GCC, and on what looks to me to be 
a perfectly good piece of code, CC1 complained that:

        The following insn wasn't recognizable
        insn/i 74 73 75 [....]
        [...]

I didn't write down the rest of the stuff.  (Perhaps a PrtScn under
Linux would be nice after all.)

What is an insn?  What went wrong?  I've always been more of a Pascal
person than a C person, so I don't even know if this is a common
problem I should know about, or something very rare.  Of course, if
it's the former, please e-mail polite responses without wasting this
newsgroup's bandwidth any further.

-Joel
(joel@wam.umd.edu)





------------------------------

From: cgy@cs.brown.edu (Curtis Yarvin)
Subject: Re: Why can't /dev/kmem be world-readable? [was Re: More questions about Linux :-)]
Date: 20 Feb 92 01:51:13 GMT

In article <1992Feb19.190740.19189@wam.umd.edu> joel@wam.umd.edu (Joel M. Hoffman) writes:
|In article <1992Feb19.165359.23713@redsun.pps.rain.com> mke@redsun.pps.rain.com (Mike Miller) writes:
|>Normal users can't read /dev/kmem, and with good reason I might add.  I
|
|This is probably an ignorant question, but why does giving ordinary
|users READ (certainly not WRITE) access to /dev/kmem compromise system
|security?

You can read other peoples' tty buffers and such.  !good.

c

------------------------------

From: kroe@sbcs.sunysb.edu (KiYun Roe)
Subject: Elvis and Linux
Date: 19 Feb 92 22:07:50 GMT

I experienced a few minor problems using Elvis for a vi-replacement
under Linux.  First, screen refresh didn't work quite right.  I didn't
look at the problem closely, but it seemed that autowrap wasn't handled
properly by Elvis or Linux.  I took out the :am: setting from the
termcap entry, and screen refresh now works properly.  I don't know if
this means that the console driver didn't implement :am: correctly or
Elvis wasn't using it correctly.  Taking out :am: seemingly hasn't
broken anything else, but I don't use many other full-screen packages
under Linux.

The other problem was that Elvis was choking on one of the lines in my
.exrc file in which I map a key to a sequence which includes the |
command.  | is also used to delimit colon commands, and Elvis wasn't
letting me escape that function with a ^V in front of the |.  I
modified Elvis slightly to permit ^V to be used as an escape in .exrc
files.  Here's a patch for that:

*** ex.c.orig Wed Dec 05 16:50:56 1990
--- ex.c Wed Feb 19 15:16:34 1992
***************
*** 659,673 ****
  {
        char    *cmd;           /* start of a command */
        char    *end;           /* used to search for the end of cmd */
  
        /* find & do each command */
        for (cmd = buf; cmd < &buf[len]; cmd = end + 1)
        {
                /* find the end of the command */
!               for (end = cmd; end < &buf[len] && *end != '\n' && *end != '|'; end++)
                {
                }
!               *end = '\0';
  
                /* do it */
                doexcmd(cmd);
--- 659,679 ----
  {
        char    *cmd;           /* start of a command */
        char    *end;           /* used to search for the end of cmd */
+       char    *cpy;           /* used to copy characters */
  
        /* find & do each command */
        for (cmd = buf; cmd < &buf[len]; cmd = end + 1)
        {
                /* find the end of the command */
!               for (cpy = end = cmd; end < &buf[len] && *end != '\n' && *end != '|'; )
                {
+                       if (*end == ctrl('V'))
+                       {
+                           end++;
+                       }
+                       *cpy++ = *end++;
                }
!               *cpy = '\0';
  
                /* do it */
                doexcmd(cmd);
==========
--
KiYun Roe                                       kroe@sbcs.sunysb.edu
Department of Computer Science
SUNY at Stony Brook
Stony Brook, NY  11794-4400                     (516) 632-7675

------------------------------

From: ifai645@ccwf.cc.utexas.edu (Paul C. Janzen)
Subject: symlink permissions
Date: 20 Feb 92 05:40:06 GMT

Just got linux up, and am now prepared to go to war with those in
my household so that I can download the *rest* of everything on 
tsx11 at 1200 baud. :-)

One question: Symbolic links. Make one up, and gaze at the permissions
on it. All mine come back lrwxr-xr-x . Which is weird. It ought to 
be lrwxrwxrwx; it's been that way on every system I've ever used, and
more annoyingly, chmod won't let me chmod it. (do I need a new version?)

Of course, it doesn't make a bloody bit of difference when you're root, 
but alas, I'm not planning on being root forever...

Do the symlink permissions actually get tested anywhere?

I guess I'll go back to downloading source again now, so maybe someday 
I can find out.

========================================================================
Paul C. Janzen                Perfect day for scrubbing the floor and
ifai645@ccwf.cc.utexas.edu    other exciting things.
========================================================================

------------------------------

From: shite@sinkhole.unf.edu (Stephen Hite)
Subject: Re: MGR, anyone?
Date: 19 Feb 92 17:42:30 GMT

In article <1992Feb18.150246.15290@daffy.cs.wisc.edu> badger@cat59.cs.wisc.edu (Jonathan Badger) writes:
>With all the excitement over planned ports of X11 to Linux, has anyone
>given a thought to porting the excellent MGR windowing system? It's much
>less taxing in disk space and memory than X, and should be much easier to 
>port, too - although not so easy that I could do it, I'm afraid :)

  A port of MGR to Minix is in its second release.  Start with that.
You can find its location at a comp.archives site (last month's, look
at cs.utoronto.edu for the archive files).

  The reason X is preferable over MGR for Linux is that there are a
plethora of freely available X programs ready to be ported or easily
re-compiled.   If you could compare the followings of X programmers and
MGR programmers to the current republican presidential candidates in 
popularity, then X would be Bush and MGR would be Tom Laughlin 
(aka Billy Jack). 

Steve Hite
shite@sinkhole.unf.edu


 

------------------------------

From: stewart@wimsey.bc.ca (Jim Stewart)
Subject: Re: More questions about Linux :-)
Date: 20 Feb 92 07:09:39 GMT

In article <1992Feb19.214131.11710@mdd.comm.mot.com> nealf@mdd.comm.mot.com (Neal Friedman) writes:
>    In article <Feb.15.14.55.27.1992.13300@dumas.rutgers.edu> hedrick@dumas.rutgers.edu (Charles Hedrick) writes:
>    >>3) Related to the above question there is the problem of the ps command
>
>    [stuff about SunOS ioctl deleted]
>
>    >>   a /vmlinux and a /dev/kmem working. Will it be done ?
>    >
>    >I think many people now believe it's a mistake to have programs
>    >reading kernel memory.  This makes programs highly dependent upon the
>    >structure of the kernel.
>
>I suggest a /dev/proc (to read the process table),  a /dev/file (to read
>the file table) etc...  Each is a different minor number relative to the
>/dev/mem driver.   Actually pretty easy to implement, and the only thing
>the user has to update is the .h file defining the structure that is returned
>on a read (no ioctl: just read()s and write()s).

Using a /dev/proc and a  dev/file to support access to kernel structures
is a little like the *information services* in VMS.  $GETJPI gets Job and
Process information and $GETSYI retrieves misc. system stuff.  These 
services work well as the layer of abstraction needed to simplify generic
information commands.  They do not, however,  eliminate the need for direct
access to kernel space. 

My interest in linux is focused on  crash dump analysis and performance 
monitoring tools.  To do this kind of work I NEED nlist(3) and /dev/kmem.
Inventing new syscalls and protocol every time I change the instrumentation
in the kernel would be pointless effort. 

js 
 

------------------------------

From: jwinstea@jarthur.claremont.edu (Jim Winstead Jr.)
Subject: FAQ - Where is it?
Date: Thu, 20 Feb 1992 07:19:27 GMT


Whatever happened to the FAQ?  Is the current maintainer planning on
continuing it further, or has he disappeared?

If the current maintainer is no longer around, I'd be willing to pick
up where he left off.  Otherwise, I would definitely recommend pushing
the release of the FAQ to weekly.  With Linux being as new as it is,
and this newsgroup still gaining new readers, it seems there are a lot
of questions that were/should be in the FAQ.

-- 
Jim Winstead Jr. (CSci '95)    | "Catch a fish!"
Harvey Mudd College            |  -Geddy Lee,
jwinstea@jarthur.Claremont.EDU |   San Diego Sports Arena
Disclaimer: Mine, not theirs!  |   January 20, 1992

------------------------------

From: Andrew Haylett (GEC-Marconi Research Centre) <ajh@gec-mrc.co.uk>
Subject: fix for keyboard hang on scroll lock
Reply-To: ajh@gec-mrc.co.uk
Date: Thu, 20 Feb 1992 09:02:14 GMT

Here's a tiny fix for a problem that perhaps no-one else is having, at least I
haven't seen it mentioned. keyboard.S has a feature whereby if Scroll Lock is
pressed, the current task state is displayed, and if shifted, the memory state
is displayed. Very useful, except that it used to hang up my machine every few
invocations. Seems to be something to do with the keyboard controller buffer
not emptying, and the lack of a timeout in kb_wait. The following replacement
code fragment in kernel/chr_drv/keyboard.S seems to fix it.

/*
 * kb_wait waits for the keyboard controller buffer to empty.
 * there is no timeout - if the buffer doesn't empty, we hang.
 * timeout added by ajh.
 */
kb_wait:
        pushl %eax
        pushl %ebx
        movw $0xffff,%bx
1:      inb $0x64,%al
        testb $0x02,%al
        je 2f
        subw $0x1,%bx
        cmpw $0x0,%bx
        jne 1b
2:      popl %ebx
        popl %eax
        ret

Also, flow control (xon/xoff) doesn't seem to work on VCs. Is it just my
problem, or isn't it implemented?

----
Andrew Haylett       | Inet: ajh@gec-mrc.co.uk   | Fax: +44 245 75244
GEC-Marconi Research | Tel: +44 245 73331 x.3283 | Telex: 995016 GECRES G


------------------------------

From: zlsiial@uts.mcc.ac.uk (A. V. Le Blanc)
Subject: Re: mtools source and binary available
Date: 19 Feb 92 08:10:27 GMT

In article <Feb.15.14.35.57.1992.13239@dumas.rutgers.edu> hedrick@dumas.rutgers.edu (Charles Hedrick) writes:
>I've just put my copy of mtools on athos.rutgers.edu:/pub/linux.
>
>I've tested the code carefully with hard disk files, and not at all
>with floppy files.

I'm very grateful to those who are putting in such efforts with
mtools, but this version as well is unable to deal with my hard
disk.  mcd and attempts to read files cause reports of FAT problems,
and writing to the DOS partition still corrupts it.

I am using an Opus 386sx with DOS 3.3.  The MINIX dosread and doswrite,
recompiled for Linux, work correctly on this machine.  Surely there
is some bug or shortcoming in mtools.

     A. V. Le Blanc
     University of Manchester
     LeBlanc@mcc.ac.uk

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
