From:     Digestifier <Linux-Activists-Request@news-digests.mit.edu>
To:       Linux-Activists@news-digests.mit.edu
Reply-To: Linux-Activists@news-digests.mit.edu
Date:     Sun, 15 Mar 92 21:45:12 EST
Subject:  Linux-Activists Digest #111

Linux-Activists Digest #111, Volume #1           Sun, 15 Mar 92 21:45:12 EST

Contents:
  Beginner questions (Budi Rahardjo)
  Re: gdb: "Bad things happen" (Linus Benedict Torvalds)
  Re: mtools on root image (Werner Almesberger)
  Re: Beginner questions (Jim Winstead Jr.)
  Beginners Guide: Request for sources (I Reid)
  Re: mtools on root image (Werner Almesberger)
  'pklite' for Linux. (Josh Yelon)
  Re: mtools on root image (Steven Wilson)
  Re: 'pklite' for Linux. (Drew Eckhardt)

----------------------------------------------------------------------------

From: rahard@eeserv.ee.umanitoba.ca (Budi Rahardjo)
Subject: Beginner questions
Date: 15 Mar 92 21:13:29 GMT

Thanks for the help I can start playing with Linux, here's what I got so far :

Trying version 0.12 :
+ able to get the boot and root images on floppies.
- the boot image decided that I have an EGAc (I have SVGA), but this is
  minor problem
- 'fdisk' reports that I have extended partition. The installation doc
  says that version 0.12 does not recognize extended partion. Oh, well.
- Every ftp sites mentioned that version 0.12 is better than 0.95.
  Should I stick with 0.12 ? But I can't use my extended partition ...
  (I have freed my F: drive for Linux, but don't know how to)

Trying version 0.95 :
+ able to get both boot and root images on 1.2 M floppies
+ boot able to detect SVGA
- then the floppy made a noise and error msgs printed :

Reset-floppy
Reset-floppy
Kernel panic: Unable to mount root

Is my copy of rootimage-0.95 bad ? or my floppy is bad ?

-- budi
--
Budi Rahardjo
<rahardj@ccu.umanitoba.ca>      <rahard@ee.umanitoba.ca> 
Electrical Engineering - University of Manitoba - Canada

------------------------------

From: torvalds@klaava.Helsinki.FI (Linus Benedict Torvalds)
Subject: Re: gdb: "Bad things happen"
Date: 15 Mar 92 21:03:10 GMT

In article <Mar.15.12.47.54.1992.3590@dartagnan.rutgers.edu> hedrick@dartagnan.rutgers.edu (Charles Hedrick) writes:
>I've been trying out gdb, from tsx-11.  It's not entirely easy to
>install it, as I had to figure out what libg.a is supposed to be,
>and I had to remember to use cc1-g from the 1.40 distribution.
>But I've got something that mostly works.  However when I try
>to step through a call to localtime, I get
>
>  Bad things happen: nonexistent page error in do_no_page
>  Segmentation fault
>
>This is the version of localtime from the BSD ctime.c, which is
>in the libc I put out on athos.rutgers.edu a couple of weeks ago.

The "bad things" error is a message that happens when the memory manager
gets a request for a page not in the users process-space, which
shouldn't be possible (as those errors should be trapped by the
segmentation handler).  However, ptrace() does some mucking around with
the memory, and it had a bug (now fixed, I hope) that is probably the
reason for this.  I'm happy most of it seems to work, though. 

                Linus

------------------------------

From: almesber@nessie.cs.id.ethz.ch (Werner Almesberger)
Subject: Re: mtools on root image
Date: 15 Mar 92 21:44:01 GMT

In article <1992Mar15.164911.2835@muddcs.claremont.edu> jwinstea@jarthur.claremont.edu (Jim Winstead Jr.) writes:
>> The devices database could be loaded at run-time. If you stuff everything
>> into a single binary, this gets even easier (single entry point).
>
> Easier to program, but not necessarily easier to use by a novice.

Why ? I have an /etc/mtools file right now, which looks like that:

A /dev/at0
B /dev/PS1
C /dev/hda1

No FAT bits, no sector numbers, etc. Of course, if the defaults don't
fit, or if the device has a strange name, one would have to specify the
other parameters too. (E.g. B /dev/dosB 12 80 2 18)

I few questions remain, however:
  a) has anybody *ever* seen a floppy disk with a 16 bit FAT on it ?
  b) has anybody *ever* seen a hard disk with a 12 bit FAT on it ?
  c) what are the /dev/dosA and /dev/dosC devices for ?

(Please mail, this mtools discussion already hogs alt.os.linux too much.)

There is a mechanism by which DOS determines the disk parameters, which is
based on a historically grown mixture of media bytes and format descriptors
(very ugly). I think it should be relatively easy to use that one.

> If you can pull this off, and I can fit it on the root floppy, it will
> be there.  In any case, a better mtools would be ideal - the current
> one obviously has some holes in it.

Hmm ... are there any other known problems other than its awkward
configuration ?

- Werner
-- 
   _________________________________________________________________________
  / Werner Almesberger, ETH Zuerich, CH      almesber@nessie.cs.id.ethz.ch /
 / IFW A44  Tel. +41 1 254 7213                 almesberger@rzvax.ethz.ch /
/_BITNET:_ALMESBER@CZHETH5A__HEPNET/CHADNET:_[20579::]57414::ALMESBERGER_/

------------------------------

From: jwinstea@jarthur.claremont.edu (Jim Winstead Jr.)
Subject: Re: Beginner questions
Date: 15 Mar 92 22:08:26 GMT

In article <1992Mar15.211329.25517@ccu.umanitoba.ca> rahard@eeserv.ee.umanitoba.ca (Budi Rahardjo) writes:
>Thanks for the help I can start playing with Linux, here's what I got so far :
>
>Trying version 0.12 :
>+ able to get the boot and root images on floppies.

That's good.

>- the boot image decided that I have an EGAc (I have SVGA), but this is
>  minor problem

This is correct, actually.  You have an EGA+ card (SVGA) with a color
monitor.  The only four possible things the kernel will report are
EGAc, EGAm, *MDA, and *CGA.  (According to the code in
kernel/chr_dev/console.c, at least.)

>- 'fdisk' reports that I have extended partition. The installation doc
>  says that version 0.12 does not recognize extended partion. Oh, well.
>- Every ftp sites mentioned that version 0.12 is better than 0.95.
>  Should I stick with 0.12 ? But I can't use my extended partition ...
>  (I have freed my F: drive for Linux, but don't know how to)

You could use something like Norton's Disk Editor to make the extended
partition into another partition type, such as PC/nix or Minix or
something.  Or wait for 0.95a, which should handle extended partitions
properly.

>Trying version 0.95 :
>+ able to get both boot and root images on 1.2 M floppies

Still good!

>+ boot able to detect SVGA

I don't see how this should be any different - as far as I noticed,
the SVGA detection code didn't change from 0.12 to 0.95.

I'm willing to bet it still print EGAc in the corner, but you didn't
notice!  The true test if Linux detects your video card is if you
press <RETURN> at the 'Press <RETURN> to see SVGA-modes...' message.
If you have a a SVGA card that Linux recognizes, it will ask you to
choose a screen size (132x50, whatever).  In 0.95a, if Linux doesn't
detect a SVGA card, it will default to 80x50 mode.  (Thus, for those
who are content with 80x25, you should hit any key except <RETURN> at
the above prompt, such as the spacebar.)  At least, I sent the patch
for 80x50 to Linus, and he said it'd be in 0.95a.  If not, I'll post a
patch here...

>Reset-floppy
>Reset-floppy
>Kernel panic: Unable to mount root

This is a known problem with 0.95.  Due to a small bug, it doesn't
work on all machines.  This will be corrected in 0.95a, along with a
nasty tty bug (crashed my machine twice yesterday...) and some other
problems.  Another main feature of 0.95a is a greatly improved root
disk.
-- 
Jim Winstead Jr. (CSci '95)    | "Catch a fish!"
Harvey Mudd College            |  -Geddy Lee,
jwinstea@jarthur.Claremont.EDU |   San Diego Sports Arena
Disclaimer: Mine, not theirs!  |   January 20, 1992

------------------------------

From: eonu24@castle.ed.ac.uk (I Reid)
Subject: Beginners Guide: Request for sources
Date: 15 Mar 92 22:47:09 GMT

Ok, Ok, Ok... enough! I've had lots of replies saying how much people want a
beginners guide and my mailbox is filling up with people saying what a good
idea it is. Please send me stuff you want in the guide and please no more "good
idea" mailers.

Ta, Iain

p.s. Sorry for the brevity (costly dial up line :-()

------------------------------

From: almesber@nessie.cs.id.ethz.ch (Werner Almesberger)
Subject: Re: mtools on root image
Date: 15 Mar 92 22:29:25 GMT

In article <1992Mar15.164911.2835@muddcs.claremont.edu> jwinstea@jarthur.claremont.edu (Jim Winstead Jr.) writes:
>> The devices database could be loaded at run-time. If you stuff everything
>> into a single binary, this gets even easier (single entry point).
>
> Easier to program, but not necessarily easier to use by a novice.

Why ? I have an /etc/mtools file right now, which looks like that:

A /dev/at0
B /dev/PS1
C /dev/hda1

No FAT bits, no sector numbers, etc. Of course, if the defaults don't
fit, or if the device has a strange name, one would have to specify the
other parameters too. (E.g. B /dev/dosB 12 80 2 18)

I few questions remain, however:
  a) has anybody *ever* seen a floppy disk with a 16 bit FAT on it ?
  b) has anybody *ever* seen a hard disk with a 12 bit FAT on it ?
  c) what are the /dev/dosA and /dev/dosC devices for ?

(Please mail, this mtools discussion already hogs alt.os.linux too much.)

There is a mechanism by which DOS determines the disk parameters, which is
based on a historically grown mixture of media bytes and format descriptors
(very ugly). Mtools already knows about this. I'll have a look at that.

> If you can pull this off, and I can fit it on the root floppy, it will
> be there.  In any case, a better mtools would be ideal - the current
> one obviously has some holes in it.

Hmm ... are there any other known problems other than its awkward
configuration ?

- Werner
-- 
   _________________________________________________________________________
  / Werner Almesberger, ETH Zuerich, CH      almesber@nessie.cs.id.ethz.ch /
 / IFW A44  Tel. +41 1 254 7213                 almesberger@rzvax.ethz.ch /
/_BITNET:_ALMESBER@CZHETH5A__HEPNET/CHADNET:_[20579::]57414::ALMESBERGER_/


-- 
   _________________________________________________________________________
  / Werner Almesberger, ETH Zuerich, CH      almesber@nessie.cs.id.ethz.ch /
 / IFW A44  Tel. +41 1 254 7213                 almesberger@rzvax.ethz.ch /
/_BITNET:_ALMESBER@CZHETH5A__HEPNET/CHADNET:_[20579::]57414::ALMESBERGER_/

------------------------------

From: Josh Yelon <jyelon@cs.uiuc.edu>
Subject: 'pklite' for Linux.
Reply-To: jyelon@cs.uiuc.edu
Date: Mon, 16 Mar 1992 00:30:27 GMT

I considering writing binary file compressor for Linux, much like
pklite for msdos. The salient characteristic will be that you
can compress a program, and you won't have to decompress it
in order to run it. (It would decompress itself automatically
into RAM). I need ideas.

First of all, how do I pull it off?

Here is plan 1:

    1. start the to-be-compressed executable using ptrace.
    2. read out all of its memory into a file.
    3. compress the file.
    4. prepend a tiny in-memory decompression routine to the file,
    5. prepend the proper headers for an executable program, and presto!

The disadvantages:

    1. I like shared pages. However, a text segment that gets
       decompressed at runtime isn't 'read-only', so that does
       it in for shared pages.

    2. Shared libraries would probably get linked in as soon as
       ptrace ran the thing, so the libraries would become a part
       of the compressed file. Yuck!

    3. Thousands of copies of this decompression routine, one in
       every executable, like a virus. Gross. Plus, the kernel
       is constantly loading the same decompression routine from
       disk. Wasteful.

The advantages:

    1. It's pretty easy, considering that I already have the
       code for dumping a running process into an executable file.
    2. Nobody has to be aware of it. A compressed program would
       run just like any other.

Here's another plan:

    1. Edit the kernel code for exec, to look for a new 'compressed
       executable' magic number.
    2. Have it then decompress/load the file into ram, and
    3. Have it then proceed as if it had just loaded a non-demand-paged
       executable.

The advantages.

    1. Its very clean.
    2. The decompression routine is in the kernel, so it only
       needs to be loaded once.
    3. It sounds more reliable than the above approach.

The disadvantages.

    1. The kernel is getting bigger (although not much,
       assuming that the decompression routine is small).
    2. You have to have the decompressing-kernel to run
       compressed programs.
    3. Again, compressed files are not demand-paged. (I, personally,
       could care less - I tend to think that demand-paging slows
       things down as much as it speeds things up).

Whaddaya think?

Also, about compression algorithms:

I have considered using 16-bit Huffman codes, but I'm only getting
a 70% compression ratio. Lempel-Ziv is okay (that's what compress
uses), but it takes gobs of ram to use it. Besides, I prefer a
static scheme- one where the decompression tables are fixed. (after
all, everything being compressed will be stylized gnu C 386 code...
why use an adaptive algorithm when there is nothing to adapt to?)
On that note, I was also considering inventing a specialized
algorithm for compressing 386 opcodes (it would still produce correct
output on other stuff, it just wouldn't be able to compress much).
Anybody know anything concrete about the feasibility of this?

PS: In order to do this I would need sample data - namely, assembly
listings containing BOTH opcodes and mnemonics, so I can pore them
over and see what kinds of regular patterns the gnu C compiler
typically produces. I cannot obtain this, since I do not have
access to a 386 right now. Would anybody be able to mail me a 100K
listing from the assembler?
y
Thanks in advance 4 ideas!
                                                    - Josh

PS: this might help alleviate some of the root-disk woes!

------------------------------

From: stevew@netcom.com (Steven Wilson)
Subject: Re: mtools on root image
Date: Sun, 15 Mar 92 23:59:07 GMT

In article <1992Mar14.235708.27170@muddcs.claremont.edu>, jwinstea@jarthur.claremont.edu (Jim Winstead Jr.) writes:
> How is this less tedious than having to copy files to a spare DOS
> floppy, and then using the 'bare-bones' mtools that you proposed to
> read them?  That just adds another, unnecessary step...  All one
> really needs to do is this:

Ok.. I'm speaking from experience here...having not had a working 
mtools until AFTER I had installed just about all of the currently
ported linux packages.  

My boot path was as follows:  I moved all of the existing files
over to a local internet host, then used a DOS based comm package
to move them over to my home PC over the phone line.  So here
I sit with ALL of linux in a DOS directory and 1 at a time
rawriting them onto a floppy, rebooting LINUX,  taring the package
into linux, rebooting DOS, rawriting the next package, rebooting
LINUX, etc.

Once I got mtools working(which took more than one attempt
due to local stupidity on my part)  it was merely a matter
reading all of the files from my C DOS drive onto LINUX. 
No more rebooting(YEEEEAAAAH!)

I spent something like 10 hours moving packages over the hard 
way BEFORE I got mtools up and running.  That could have been
reduced by half if I'd had mtools up and running earlier.

Steve Wilson



------------------------------

From: drew@cs.colorado.edu (Drew Eckhardt)
Subject: Re: 'pklite' for Linux.
Date: 16 Mar 92 02:16:52 GMT

In article <1992Mar16.003027.2064@athena.mit.edu> jyelon@cs.uiuc.edu writes:
>I considering writing binary file compressor for Linux, much like
>pklite for msdos. The salient characteristic will be that you
>can compress a program, and you won't have to decompress it
>in order to run it. (It would decompress itself automatically
>into RAM). I need ideas.
>
>First of all, how do I pull it off?
>
>Here is plan 1:
>
>    1. start the to-be-compressed executable using ptrace.
>    2. read out all of its memory into a file.
>    3. compress the file.
>    4. prepend a tiny in-memory decompression routine to the file,
>    5. prepend the proper headers for an executable program, and presto!
>
>The disadvantages:
>
>    1. I like shared pages. However, a text segment that gets
>       decompressed at runtime isn't 'read-only', so that does
>       it in for shared pages.

Disk is cheap, memory is expensive.  If you can't share
pages, you're going to loose memory, and start swapping to disk
much sooner.  I sometimes look at the memory allocation, and 
see 100+ shared pages when I'm heavily loaded - that's
400K.

Puting the decompression code in the kernel eliminates this problem :
the pages can still be read / execute only, and clean, and still
be shared.

>    2. Shared libraries would probably get linked in as soon as
>       ptrace ran the thing, so the libraries would become a part
>       of the compressed file. Yuck!

Why use ptrace?  You probably want to set up a new magic number,
and prepend that to a compressed a.out file.

>    3. Thousands of copies of this decompression routine, one in
>       every executable, like a virus. Gross. Plus, the kernel
>       is constantly loading the same decompression routine from
>       disk. Wasteful.

If its in the kernel, there aren't "thousands of copies of this routine"

>The advantages:
>
>    1. Edit the kernel code for exec, to look for a new 'compressed
>       executable' magic number.
>    2. Have it then decompress/load the file into ram, and
>    3. Have it then proceed as if it had just loaded a non-demand-paged
>       executable.

Much better.  You still have shared pages, etc.  The only real problem
you still have is not being able to page from the file, and text gets
swapped like data.

>The advantages.
>
>    1. Its very clean.
>    2. The decompression routine is in the kernel, so it only
>       needs to be loaded once.
>    3. It sounds more reliable than the above approach.
>
>The disadvantages.
>
>    1. The kernel is getting bigger (although not much,
>       assuming that the decompression routine is small).
>    2. You have to have the decompressing-kernel to run
>       compressed programs.
>    3. Again, compressed files are not demand-paged. (I, personally,
>       could care less - I tend to think that demand-paging slows
>       things down as much as it speeds things up).
>

Demand paging speeds things up in several ways : 
1,  Exec is faster because fewer pages are loaded at once.
2.  Real memory use is lower, as the whole thing hasn't 
        been loaded.  Less real memory used = less 
        swapping.  Remember, disk is 1000 times slower 
        than real memory. 

You might look at what happens to compression, etc if the file
is compressed in Xk hunks, X some small multiple of page size 
(4K).  This way you could seek to that part of 
the compressed image (using a directory at the begining),
and still demmand page / not swap text.

>Also, about compression algorithms:
>

Kludge alert : 
Why not, atleast for prototyping purposes, do a 
pipe(2), fork(2), and exec  /<standard location>/uncomrpess? 
The code isn't in the kernel.

>PS: this might help alleviate some of the root-disk woes!

PPS : root disk woes : 

1.  Put a scaled down shell on.
2.  Loose init, etc.  I'd much rather have compress, tar on my root floppy than
        init, login, getty, and their ilk. 

------------------------------


** FOR YOUR REFERENCE **

The service address, to which questions about the list itself and requests
to be added to or deleted from it should be directed, is:

    Internet: Linux-Activists-Request@NEWS-DIGESTS.MIT.EDU

You can send mail to the entire list (and alt.os.linux) via:

    Internet: Linux-Activists@NEWS-DIGESTS.MIT.EDU

Linux may be obtained via one of these FTP sites:
    nic.funet.fi				pub/OS/Linux
    tsx-11.mit.edu				pub/linux
    tupac-amaru.informatik.rwth-aachen.de	pub/msdos/replace

The current version of Linux is 0.12, released on Jan 14, 1992

End of Linux-Activists Digest
******************************
