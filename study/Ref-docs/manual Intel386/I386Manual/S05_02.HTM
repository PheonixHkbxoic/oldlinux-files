<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Section 5.2</title>
	</head>

	<body>
		<b>up:</b> <a href="C05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C05.HTM">Chapter 5 -- Memory Management</a><br>
		<b>prev:</b> <a href="S05_01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S05_01.HTM">5.1 Segment Translation</a><br>
		<b>next:</b> <a href="S05_03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S05_03.HTM">5.3 Combining Segment and Page Translation</a>
		<p>
		<hr>
		<p>
		<h1>5.2 Page Translation</h1>
		In the second phase of address transformation, the 80386 transforms a linear address into a physical address. This phase of address transformation implements the basic features needed for page-oriented virtual-memory systems and page-level protection.
		<p>The page-translation step is optional. Page translation is in effect only when the PG bit of CR0 is set. This bit is typically set by the operating system during software initialization. The PG bit must be set if the operating system is to implement multiple virtual 8086 tasks, page-oriented protection, or page-oriented virtual memory.
		<h2>5.2.1 Page Frame</h2>
		A page frame is a 4K-byte unit of contiguous addresses of physical memory. Pages begin onbyte boundaries and are fixed in size.
		<h2>5.2.2 Linear Address</h2>
		A linear address refers indirectly to a physical address by specifying a page table, a page within that table, and an offset within that page. <a href="#fig5-8">Figure 5-8</a> shows the format of a linear address.
		<p><a href="#fig5-9">Figure 5-9</a> shows how the processor converts the DIR, PAGE, and OFFSET fields of a linear address into the physical address by consulting two levels of page tables. The addressing mechanism uses the DIR field as an index into a page directory, uses the PAGE field as an index into the page table determined by the page directory, and uses the OFFSET field to address a byte within the page determined by the page table.
		<p><a name="fig5-8"><img align="center" src="FIG5-8.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-8.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig5-9"><img align="center" src="FIG5-9.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-9.GIF" border="0">
		<p>
		<h2>5.2.3 Page Tables</h2>
		A page table is simply an array of 32-bit page specifiers. A page table is itself a page, and therefore contains 4 Kilobytes of memory or at most 1K 32-bit entries.
		<p>Two levels of tables are used to address a page of memory. At the higher level is a page directory. The page directory addresses up to 1K page tables of the second level. A page table of the second level addresses up to 1K pages. All the tables addressed by one page directory, therefore, can address 1M pages (2^(20)). Because each page contains 4K bytes 2^(12) bytes), the tables of one page directory can span the entire physical address space of the 80386 (2^(20) times 2^(12) = 2^(32)).
		<p>The physical address of the current page directory is stored in the CPU register CR3, also called the page directory base register (PDBR). Memory management software has the option of using one page directory for all tasks, one page directory for each task, or some combination of the two. Refer to <a href="C10.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C10.HTM">Chapter 10</a> for information on initialization of CR3 . Refer to <a href="C07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C07.HTM">Chapter 7</a> to see how CR3 can change for each task .
		<h2>5.2.4 Page-Table Entries</h2>
		Entries in either level of page tables have the same format. <a href="#fig5-10">Figure 5-10</a> illustrates this format.
		<h3>5.2.4.1 Page Frame Address</h3>
		The page frame address specifies the physical starting address of a page. Because pages are located on 4K boundaries, the low-order 12 bits are always zero. In a page directory, the page frame address is the address of a page table. In a second-level page table, the page frame address is the address of the page frame that contains the desired memory operand.
		<h3>5.2.4.2 Present Bit</h3>
		The Present bit indicates whether a page table entry can be used in address translation. P=1 indicates that the entry can be used.
		<p>When P=0 in either level of page tables, the entry is not valid for address translation, and the rest of the entry is available for software use; none of the other bits in the entry is tested by the hardware. <a href="#fig5-11">Figure 5-11</a> illustrates the format of a page-table entry when P=0.
		<p>If P=0 in either level of page tables when an attempt is made to use a page-table entry for address translation, the processor signals a page exception. In software systems that support paged virtual memory, the page-not-present exception handler can bring the required page into physical memory. The instruction that caused the exception can then be reexecuted. Refer to <a href="C09.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C09.HTM">Chapter 9</a> for more information on exception handlers .
		<p>Note that there is no present bit for the page directory itself. The page directory may be not-present while the associated task is suspended, but the operating system must ensure that the page directory indicated by the CR3 image in the TSS is present in physical memory before the task is dispatched . Refer to <a href="C07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C07.HTM">Chapter 7</a> for an explanation of the TSS and task dispatching.
		<p><a name="fig5-10"><img align="center" src="FIG5-10.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-10.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig5-11"><img align="center" src="FIG5-11.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-11.GIF" border="0">
		<p>
		<h3>5.2.4.3 Accessed and Dirty Bits</h3>
		These bits provide data about page usage in both levels of the page tables. With the exception of the dirty bit in a page directory entry, these bits are set by the hardware; however, the processor does not clear any of these bits.
		<p>The processor sets the corresponding accessed bits in both levels of page tables to one before a read or write operation to a page.
		<p>The processor sets the dirty bit in the second-level page table to one before a write to an address covered by that page table entry. The dirty bit in directory entries is undefined.
		<p>An operating system that supports paged virtual memory can use these bits to determine what pages to eliminate from physical memory when the demand for memory exceeds the physical memory available. The operating system is responsible for testing and clearing these bits.
		<p>Refer to <a href="C11.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C11.HTM">Chapter 11</a> for how the 80386 coordinates updates to the accessed and dirty bits in multiprocessor systems.
		<h3>5.2.4.4 Read/Write and User/Supervisor Bits</h3>
		These bits are not used for address translation, but are used for page-level protection, which the processor performs at the same time as address translation . Refer to <a href="C06.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C06.HTM">Chapter 6</a> where protection is discussed in detail.
		<h2>5.2.5 Page Translation Cache</h2>
		For greatest efficiency in address translation, the processor stores the most recently used page-table data in an on-chip cache. Only if the necessary paging information is not in the cache must both levels of page tables be referenced.
		<p>The existence of the page-translation cache is invisible to applications programmers but not to systems programmers; operating-system programmers must flush the cache whenever the page tables are changed. The page-translation cache can be flushed by either of two methods:
		<ol>
			<li>By reloading CR3 with a <a href="MOVRS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MOVRS.HTM">MOV</a> instruction; for example:
			<pre>



<a href="MOVRS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MOVRS.HTM">MOV</a> CR3, EAX
</pre>
			<li>By performing a task switch to a TSS that has a different CR3 image than the current TSS . (Refer to <a href="C07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C07.HTM">Chapter 7</a> for more information on task switching.)
		</ol>
		<p>
		<hr>
		<p><b>up:</b> <a href="C05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C05.HTM">Chapter 5 -- Memory Management</a><br>
		<b>prev:</b> <a href="S05_01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S05_01.HTM">5.1 Segment Translation</a><br>
		<b>next:</b> <a href="S05_03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S05_03.HTM">5.3 Combining Segment and Page Translation</a>
	</body>

