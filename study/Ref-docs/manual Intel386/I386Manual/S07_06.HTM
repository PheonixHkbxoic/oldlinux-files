<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Section 7.6</title>
	</head>

	<body>
		<b>up:</b> <a href="C07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C07.HTM">Chapter 7 -- Multitasking</a><br>
		<b>prev:</b> <a href="S07_05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S07_05.HTM">7.5 Task Switching</a><br>
		<b>next:</b> <a href="S07_07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S07_07.HTM">7.7 Task Address Space</a>
		<p>
		<hr>
		<p>
		<h1>7.6 Task Linking</h1>
		The back-link field of the TSS and the NT (nested task) bit of the flag word together allow the 80386 to automatically return to a task that <a href="CALL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CALL.HTM">CALL</a>ed another task or was interrupted by another task. When a <a href="CALL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CALL.HTM">CALL</a> instruction, an interrupt instruction, an external interrupt, or an exception causes a switch to a new task, the 80386 automatically fills the back-link of the new TSS with the selector of the outgoing task's TSS and, at the same time, sets the NT bit in the new task's flag register. The NT flag indicates whether the back-link field is valid. The new task releases control by executing an <a href="IRET.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IRET.HTM">IRET</a> instruction. When interpreting an <a href="IRET.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IRET.HTM">IRET</a>, the 80386 examines the NT flag. If NT is set, the 80386 switches back to the task selected by the back-link field. Table 7-2 summarizes the uses of these fields.
		<pre>



Table 7-2. Effect of Task Switch on BUSY, NT, and Back-Link

Affected Field      Effect of JMP      Effect of            Effect of
                    Instruction        CALL Instruction     IRET Instruction

Busy bit of         Set, must be       Set, must be 0       Unchanged,
incoming task       0 before           before               must be set

Busy bit of         Cleared            Unchanged            Cleared
outgoing task                          (already set)

NT bit of           Cleared            Set                  Unchanged
incoming task

NT bit of           Unchanged          Unchanged            Cleared
outgoing task

Back-link of        Unchanged          Set to outgoing      Unchanged
incoming task                          TSS selector

Back-link of        Unchanged          Unchanged            Unchanged
outgoing task

</pre>
		<h2>7.6.1 Busy Bit Prevents Loops</h2>
		The B-bit (busy bit) of the TSS descriptor ensures the integrity of the back-link. A chain of back-links may grow to any length as interrupt tasks interrupt other interrupt tasks or as called tasks call other tasks. The busy bit ensures that the CPU can detect any attempt to create a loop. A loop would indicate an attempt to reenter a task that is already busy; however, the TSS is not a reentrable resource.
		<p>The processor uses the busy bit as follows:
		<ol>
			<li>When switching to a task, the processor automatically sets the busy bit of the new task.
			<li>When switching from a task, the processor automatically clears the busy bit of the old task if that task is not to be placed on the back-link chain (i.e., the instruction causing the task switch is <a href="JMP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/JMP.HTM">JMP</a> or <a href="IRET.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IRET.HTM">IRET</a>). If the task is placed on the back-link chain, its busy bit remains set.
			<li>When switching to a task, the processor signals an exception if the busy bit of the new task is already set.
		</ol>
		By these actions, the processor prevents a task from switching to itself or to any task that is on a back-link chain, thereby preventing invalid reentry into a task.
		<p>The busy bit is effective even in multiprocessor configurations, because the processor automatically asserts a bus lock when it sets or clears the busy bit. This action ensures that two processors do not invoke the same task at the same time . (Refer to <a href="C11.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C11.HTM">Chapter 11</a> for more on multiprocessing.)
		<h2>7.6.2 Modifying Task Linkages</h2>
		Any modification of the linkage order of tasks should be accomplished only by software that can be trusted to correctly update the back-link and the busy-bit. Such changes may be needed to resume an interrupted task before the task that interrupted it. Trusted software that removes a task from the back-link chain must follow one of the following policies:
		<ol>
			<li>First change the back-link field in the TSS of the interrupting task, then clear the busy-bit in the TSS descriptor of the task removed from the list.
			<li>Ensure that no interrupts occur between updating the back-link chain and the busy bit.
		</ol>
		<p>
		<hr>
		<p><b>up:</b> <a href="C07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C07.HTM">Chapter 7 -- Multitasking</a><br>
		<b>prev:</b> <a href="S07_05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S07_05.HTM">7.5 Task Switching</a><br>
		<b>next:</b> <a href="S07_07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S07_07.HTM">7.7 Task Address Space</a>
	</body>

