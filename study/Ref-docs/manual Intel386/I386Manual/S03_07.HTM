<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Section 3.7</title>
	</head>

	<body>
		<b>up:</b> <a href="C03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C03.HTM">Chapter 3 -- Applications Instruction Set</a><br>
		<b>prev:</b> <a href="S03_06.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_06.HTM">3.6 String and Character Translation Instructions</a><br>
		<b>next:</b> <a href="S03_08.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_08.HTM">3.8 Flag Control Instructions</a>
		<p>
		<hr>
		<p>
		<h1>3.7 Instructions for Block-Structured Languages</h1>
		The instructions in this section provide machine-language support for functions normally found in high-level languages. These instructions include <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> and <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a>, which simplify the programming of procedures.
		<p><a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> (Enter Procedure) creates a stack frame that may be used to implement the scope rules of block-structured high-level languages. A <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> instruction at the end of a procedure complements an <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> at the beginning of the procedure to simplify stack management and to control access to variables for nested procedures.
		<p>The <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> instruction includes two parameters. The first parameter specifies the number of bytes of dynamic storage to be allocated on the stack for the routine being entered. The second parameter corresponds to the lexical nesting level (0-31) of the routine. (Note that the lexical level has no relationship to either the protection privilege levels or to the I/O privilege level.)
		<p>The specified lexical level determines how many sets of stack frame pointers the CPU copies into the new stack frame from the preceding frame. This list of stack frame pointers is sometimes called the display. The first word of the display is a pointer to the last stack frame. This pointer enables a <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> instruction to reverse the action of the previous <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> instruction by effectively discarding the last stack frame. Example:
		<pre>



<a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> 2048,3
</pre>
		Allocates 2048 bytes of dynamic storage on the stack and sets up pointers to two previous stack frames in the stack frame that <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> creates for this procedure. After <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> creates the new display for a procedure, it allocates the dynamic storage space for that procedure by decrementing ESP by the number of bytes specified in the first parameter. This new value of ESP serves as a starting point for all <a href="PUSH.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PUSH.HTM">PUSH</a> and <a href="POP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/POP.HTM">POP</a> operations within that procedure.
		<p>To enable a procedure to address its display, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> leaves EBP pointing to the beginning of the new stack frame. Data manipulation instructions that specify EBP as a base register implicitly address locations within the stack segment instead of the data segment.
		<p>The <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> instruction can be used in two ways: nested and non-nested. If the lexical level is 0, the non-nested form is used. Since the second operand is 0, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> pushes EBP, copies ESP to EBP and then subtracts the first operand from ESP. The nested form of <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> occurs when the second parameter (lexical level) is not 0.
		<p><a href="#fig3-16">Figure 3-16</a> gives the formal definition of <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a>.
		<p>The main procedure (with other procedures nested within) operates at the highest lexical level, level 1. The first procedure it calls operates at the next deeper lexical level, level 2. A level 2 procedure can access the variables of the main program which are at fixed locations specified by the compiler. In the case of level 1, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> allocates only the requested dynamic storage on the stack because there is no previous display to copy.
		<p>A program operating at a higher lexical level calling a program at a lower lexical level requires that the called procedure should have access to the variables of the calling program. <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> provides this access through a display that provides addressability to the calling program's stack frame.
		<p>A procedure calling another procedure at the same lexical level implies that they are parallel procedures and that the called procedure should not have access to the variables of the calling procedure. In this case, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> copies only that portion of the display from the calling procedure which refers to previously nested procedures operating at higher lexical levels. The new stack frame does not include the pointer for addressing the calling procedure's stack frame.
		<p><a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> treats a reentrant procedure as a procedure calling another procedure at the same lexical level. In this case, each succeeding iteration of the reentrant procedure can address only its own variables and the variables of the calling procedures at higher lexical levels. A reentrant procedure can always address its own variables; it does not require pointers to the stack frames of previous iterations.
		<p>By copying only the stack frame pointers of procedures at higher lexical levels, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> makes sure that procedures access only those variables of higher lexical levels, not those at parallel lexical levels (see <a href="#fig3-17">Figure 3-17</a> ). <a href="#fig3-18">Figures 3-18</a> through 3-21 demonstrate the actions of the <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> instruction if the modules shown in <a href="#fig3-17">Figure 3-17</a> were to call one another in alphabetic order.
		<p>Block-structured high-level languages can use the lexical levels defined by <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> to control access to the variables of previously nested procedures. Referring to <a href="#fig3-17">Figure 3-17</a> for example, if PROCEDURE A calls PROCEDURE B which, in turn, calls PROCEDURE C, then PROCEDURE C will have access to the variables of MAIN and PROCEDURE A, but not PROCEDURE B because they operate at the same lexical level. Following is the complete definition of access to variables for <a href="#fig3-17">Figure 3-17</a> .
		<ol>
			<li>MAIN PROGRAM has variables at fixed locations.
			<li>PROCEDURE A can access only the fixed variables of MAIN.
			<li>PROCEDURE B can access only the variables of PROCEDURE A and MAIN. PROCEDURE B cannot access the variables of PROCEDURE C or PROCEDURE D.
			<li>PROCEDURE C can access only the variables of PROCEDURE A and MAIN. PROCEDURE C cannot access the variables of PROCEDURE B or PROCEDURE D.
			<li>PROCEDURE D can access the variables of PROCEDURE C, PROCEDURE A, and MAIN. PROCEDURE D cannot access the variables of PROCEDURE B.
		</ol>
		<a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> at the beginning of the MAIN PROGRAM creates dynamic storage space for MAIN but copies no pointers. The first and only word in the display points to itself because there is no previous value for <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> to return to EBP. See <a href="#fig3-18">Figure 3-18</a> .
		<p>After MAIN calls PROCEDURE A, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> creates a new display for PROCEDURE A with the first word pointing to the previous value of EBP (BPM for <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> to return to the MAIN stack frame) and the second word pointing to the current value of EBP. Procedure A can access variables in MAIN since MAIN is at level 1. Therefore the base for the dynamic storage for MAIN is at [EBP-2]. All dynamic variables for MAIN are at a fixed offset from this value. See <a href="#fig3-19">Figure 3-19</a> .
		<p>After PROCEDURE A calls PROCEDURE B, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> creates a new display for PROCEDURE B with the first word pointing to the previous value of EBP, the second word pointing to the value of EBP for MAIN, and the third word pointing to the value of EBP for A and the last word pointing to the current EBP. B can access variables in A and MAIN by fetching from the display the base addresses of the respective dynamic storage areas. See <a href="#fig3-20">Figure 3-20</a> . After PROCEDURE B calls PROCEDURE C, <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> creates a new display for PROCEDURE C with the first word pointing to the previous value of EBP, the second word pointing to the value of EBP for MAIN, and the third word pointing to the EBP value for A and the third word pointing to the current value of EBP. Because PROCEDURE B and PROCEDURE C have the same lexical level, PROCEDURE C is not allowed access to variables in B and therefore does not receive a pointer to the beginning of PROCEDURE B's stack frame. See <a href="#fig3-21">Figure 3-21</a> .
		<p><a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> (Leave Procedure) reverses the action of the previous <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> instruction. The <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> instruction does not include any operands. <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> copies EBP to ESP to release all stack space allocated to the procedure by the most recent <a href="ENTER.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ENTER.HTM">ENTER</a> instruction. Then <a href="LEAVE.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LEAVE.HTM">LEAVE</a> pops the old value of EBP from the stack. A subsequent <a href="RET.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/RET.HTM">RET</a> instruction can then remove any arguments that were pushed on the stack by the calling program for use by the called procedure.
		<p><a name="fig3-16"><img align="center" src="FIG3-16.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG3-16.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig3-17"><img align="center" src="FIG3-17.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG3-17.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig3-18"><img align="center" src="FIG3-18.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG3-18.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig3-19"><img align="center" src="FIG3-19.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG3-19.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig3-20"><img align="center" src="FIG3-20.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG3-20.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig3-21"><img align="center" src="FIG3-21.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG3-21.GIF" border="0">
		<p>
		<hr>
		<p><b>up:</b> <a href="C03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C03.HTM">Chapter 3 -- Applications Instruction Set</a><br>
		<b>prev:</b> <a href="S03_06.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_06.HTM">3.6 String and Character Translation Instructions</a><br>
		<b>next:</b> <a href="S03_08.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_08.HTM">3.8 Flag Control Instructions</a>
	</body>

