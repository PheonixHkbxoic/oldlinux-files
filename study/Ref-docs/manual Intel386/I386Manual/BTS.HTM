<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Opcode BTS</title>
	</head>

	<body>
		<b>up:</b> <a href="C17.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C17.HTM">Chapter 17 -- 80386 Instruction Set</a><br>
		<b>prev:</b><a href="BTR.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/BTR.HTM"> BTR Bit Test and Reset</a><br>
		<b>next:</b><a href="CALL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CALL.HTM"> CALL Call Procedure</a>
		<p>
		<hr>
		<p>
		<h1>BTS -- Bit Test and Set</h1>
		<pre>



Opcode        Instruction     Clocks  Description

0F  AB        BTS r/m16,r16   6/13    Save bit in carry flag and set
0F  AB        BTS r/m32,r32   6/13    Save bit in carry flag and set
0F  BA /5 ib  BTS r/m16,imm8  6/8     Save bit in carry flag and set
0F  BA /5 ib  BTS r/m32,imm8  6/8     Save bit in carry flag and set
</pre>
		<h2>Operation</h2>
		<pre>



CF := BIT[LeftSRC, RightSRC];
BIT[LeftSRC, RightSRC] := 1;
</pre>
		<h2>Description</h2>
		BTS saves the value of the bit indicated by the base (first operand) and the bit offset (second operand) into the carry flag and then stores 1 in the bit.
		<h2>Flags Affected</h2>
		CF as described above
		<h2>Protected Mode Exceptions</h2>
		#GP(0) if the result is in a nonwritable segment; #GP(0) for an illegal memory operand effective address in the CS, DS, ES, FS, or GS segments; #SS(0) for an illegal address in the SS segment; #PF(fault-code) for a page fault
		<h2>Real Address Mode Exceptions</h2>
		Interrupt 13 if any part of the operand would lie outside of the effective address space from 0 to 0FFFFH
		<h2>Virtual 8086 Mode Exceptions</h2>
		Same exceptions as in Real Address Mode; #PF(fault-code) for a page fault
		<h2>Notes</h2>
		The index of the selected bit can be given by the immediate constant in the instruction or by a value in a general register. Only an 8-bit immediate value is used in the instruction. This operand is taken modulo 32, so the range of immediate bit offsets is 0..31. This allows any bit within a register to be selected. For memory bit strings, this immediate field gives only the bit offset within a word or doubleword. Immediate bit offsets larger than 31 are supported by using the immediate bit offset field in combination with the displacement field of the memory operand. The low-order 3 to 5 bits of the immediate bit offset are stored in the immediate bit offset field, and the high order 27 to 29 bits are shifted and combined with the byte displacement in the addressing mode.
		<p>When accessing a bit in memory, the processor may access four bytes starting from the memory address given by:
		<pre>



   Effective Address + (4 * (BitOffset DIV 32))
</pre>
		for a 32-bit operand size, or two bytes starting from the memory address given by:
		<pre>



   Effective Address + (2 * (BitOffset DIV 16))
</pre>
		for a 16-bit operand size. It may do this even when only a single byte needs to be accessed in order to get at the given bit. Thus the programmer must be careful to avoid referencing areas of memory close to address space holes. In particular, avoid references to memory-mapped I/O registers. Instead, use the <a href="MOV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MOV.HTM">MOV</a> instructions to load from or store to these addresses, and use the register form of these instructions to manipulate the data.
		<p>
		<hr>
		<p><b>up:</b> <a href="C17.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C17.HTM">Chapter 17 -- 80386 Instruction Set</a><br>
		<b>prev:</b><a href="BTR.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/BTR.HTM"> BTR Bit Test and Reset</a><br>
		<b>next:</b><a href="CALL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CALL.HTM"> CALL Call Procedure</a>
	</body>

