<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Opcode POPF</title>
	</head>

	<body>
		<b>up:</b> <a href="C17.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C17.HTM">Chapter 17 -- 80386 Instruction Set</a><br>
		<b>prev:</b><a href="POPA.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/POPA.HTM"> POPA/POPAD Pop all General Registers</a><br>
		<b>next:</b><a href="PUSH.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PUSH.HTM"> PUSH Push Operand onto the Stack</a>
		<p>
		<hr>
		<p>
		<h1>POPF/POPFD -- Pop Stack into FLAGS or EFLAGS Register</h1>
		<pre>



Opcode   Instruction   Clocks   Description

9D       POPF          5        Pop top of stack FLAGS
9D       POPFD         5        Pop top of stack into EFLAGS
</pre>
		<h2>Operation</h2>
		Flags := Pop();
		<h2>Description</h2>
		POPF/POPFD pops the word or doubleword on the top of the stack and stores the value in the flags register. If the operand-size attribute of the instruction is 16 bits, then a word is popped and the value is stored in FLAGS. If the operand-size attribute is 32 bits, then a doubleword is popped and the value is stored in EFLAGS.
		<p>Refer to <a href="C02.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C02.HTM">Chapter 2</a> and <a href="C04.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C04.HTM">Chapter 4</a> for information about the FLAGS and EFLAGS registers. Note that bits 16 and 17 of EFLAGS, called VM and RF, respectively, are not affected by POPF or POPFD.
		<p>The I/O privilege level is altered only when executing at privilege level 0. The interrupt flag is altered only when executing at a level at least as privileged as the I/O privilege level. (Real-address mode is equivalent to privilege level 0.) If a POPF instruction is executed with insufficient privilege, an exception does not occur, but the privileged bits do not change.
		<h2>Flags Affected</h2>
		All flags except VM and RF
		<h2>Protected Mode Exceptions</h2>
		#SS(0) if the top of stack is not within the stack segment
		<h2>Real Address Mode Exceptions</h2>
		Interrupt 13 if any part of the operand would lie outside of the effective address space from 0 to 0FFFFH
		<h2>Virtual 8086 Mode Exceptions</h2>
		#GP(0) fault if IOPL is less than 3, to permit emulation
		<p>
		<hr>
		<p><b>up:</b> <a href="C17.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C17.HTM">Chapter 17 -- 80386 Instruction Set</a><br>
		<b>prev:</b><a href="POPA.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/POPA.HTM"> POPA/POPAD Pop all General Registers</a><br>
		<b>next:</b><a href="PUSH.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PUSH.HTM"> PUSH Push Operand onto the Stack</a>
	</body>

