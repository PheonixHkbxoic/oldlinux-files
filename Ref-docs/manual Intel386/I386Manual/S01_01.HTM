<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Section 1.1</title>
	</head>

	<body>
		<b>up:</b> <a href="C01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C01.HTM">Chapter 1 -- Introduction to the 80386</a><br>
		<b>prev:</b> <a href="C01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C01.HTM">Chapter 1 -- Introduction to the 80386</a><br>
		<b>next:</b> <a href="S01_02.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S01_02.HTM">1.2 Related Literature</a>
		<p>
		<hr>
		<p>
		<h1>1.1 Organization of This Manual</h1>
		This book presents the architecture of the 80386 in five parts:
		<ul>
			<li><a href="PI.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PI.HTM">Part I -- Applications Programming</a>
			<li><a href="PII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PII.HTM">Part II -- Systems Programming</a>
			<li><a href="PIII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PIII.HTM">Part III -- Compatibility</a>
			<li><a href="PIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PIV.HTM">Part IV -- Instruction Set</a>
			<li><a href="APP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/APP.HTM">Appendices</a>
		</ul>
		These divisions are determined in part by the architecture itself and in part by the different ways the book will be used. As the following table indicates, the latter two parts are intended as reference material for programmers actually engaged in the process of developing software for the 80386. The first three parts are explanatory, showing the purpose of architectural features, developing terminology and concepts, and describing instructions as they relate to specific purposes or to specific architectural features.
		<dl>
			<br>
			<dt>Explanation
			<dd>
			<ul>
				<li><a href="PI.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PI.HTM">Part I -- Applications Programming</a>
				<li><a href="PII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PII.HTM">Part II -- Systems Programming</a>
				<li><a href="PIII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PIII.HTM">Part III -- Compatibility</a>
			</ul>
			<dt>Reference
			<dd>
			<ul>
				<li><a href="PIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PIV.HTM">Part IV -- Instruction Set</a>
				<li><a href="APP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/APP.HTM">Appendices</a>
			</ul>
		</dl>
		The first three parts follow the execution modes and protection features of the 80386 CPU. The distinction between applications features and systems features is determined by the protection mechanism of the 80386. One purpose of protection is to prevent applications from interfering with the operating system; therefore, the processor makes certain registers and instructions inaccessible to applications programs. The features discussed in Part I are those that are accessible to applications; the features in Part II are available only to systems software that has been given special privileges or in unprotected systems.
		<p>The processing mode of the 80386 also determines the features that are accessible. The 80386 has three processing modes:
		<p>
		<ol>
			<li>Protected Mode.
			<li>Real-Address Mode.
			<li>Virtual 8086 Mode.
		</ol>
		Protected mode is the natural 32-bit environment of the 80386 processor. In this mode all instructions and features are available.
		<p>Real-address mode (often called just &quot;real mode&quot;) is the mode of the processor immediately after RESET. In real mode the 80386 appears to programmers as a fast 8086 with some new instructions. Most applications of the 80386 will use real mode for initialization only.
		<p>Virtual 8086 mode (also called V86 mode) is a dynamic mode in the sense that the processor can switch repeatedly and rapidly between V86 mode and protected mode. The CPU enters V86 mode from protected mode to execute an 8086 program, then leaves V86 mode and enters protected mode to continue executing a native 80386 program.
		<p>The features that are available to applications programs in protected mode and to all programs in V86 mode are the same. These features form the content of Part I. The additional features that are available to systems software in protected mode form Part II. Part III explains real-address mode and V86 mode, as well as how to execute a mix of 32-bit and 16-bit programs.
		<dl>
			<dt>Available in All Modes
			<dd><a href="PI.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PI.HTM">Part I -- Applications Programming</a>
			<dt>Available in Protected Mode Only
			<dd><a href="PII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PII.HTM">Part II -- Systems Programming</a>
			<dt>Compatibility Modes
			<dd><a href="PIII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PIII.HTM">Part III -- Compatibility</a>
		</dl>
		<h2>1.1.1 <a href="PI.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PI.HTM">Part I -- Applications Programming</a></h2>
		This part presents those aspects of the architecture that are customarily used by applications programmers.
		<p>
		<h4><a href="C02.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C02.HTM">Chapter 2 -- Basic Programming Model:</a></h4>
		Introduces the models of memory organization. Defines the data types. Presents the register set used by applications. Introduces the stack. Explains string operations. Defines the parts of an instruction. Explains addressing calculations. Introduces interrupts and exceptions as they may apply to applications programming.
		<p>
		<h4><a href="C03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C03.HTM">Chapter 3 -- Application Instruction Set:</a></h4>
		Surveys the instructions commonly used for applications programming. Considers instructions in functionally related groups; for example, string instructions are considered in one section, while control-transfer instructions are considered in another. Explains the concepts behind the instructions. Details of individual instructions are deferred until Part IV, the instruction-set reference.
		<h2>1.1.2 <a href="PII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PII.HTM">Part II -- Systems Programming</a></h2>
		This part presents those aspects of the architecture that are customarily used by programmers who write operating systems, device drivers, debuggers, and other software that supports applications programs in the protected mode of the 80386.
		<p>
		<h4><a href="C04.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C04.HTM">Chapter 4 -- Systems Architecture:</a></h4>
		Surveys the features of the 80386 that are used by systems programmers. Introduces the remaining registers and data structures of the 80386 that were not discussed in Part I. Introduces the systems-oriented instructions in the context of the registers and data structures they support. Points to the chapter where each register, data structure, and instruction is considered in more detail.
		<h4><a href="C05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C05.HTM">Chapter 5 -- Memory Management:</a></h4>
		Presents details of the data structures, registers, and instructions that support virtual memory and the concepts of segmentation and paging. Explains how systems designers can choose a model of memory organization ranging from completely linear (&quot;flat&quot;) to fully paged and segmented.
		<h4><a href="C06.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C06.HTM">Chapter 6 -- Protection:</a></h4>
		Expands on the memory management features of the 80386 to include protection as it applies to both segments and pages. Explains the implementation of privilege rules, stack switching, pointer validation, user and supervisor modes. Protection aspects of multitasking are deferred until the following chapter.
		<h4><a href="C07.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C07.HTM">Chapter 7 -- Multitasking:</a></h4>
		Explains how the hardware of the 80386 supports multitasking with context-switching operations and intertask protection.
		<h4><a href="C08.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C08.HTM">Chapter 8 -- Input/Output:</a></h4>
		Reveals the I/O features of the 80386, including I/O instructions, protection as it relates to I/O, and the I/O permission map.
		<h4><a href="C09.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C09.HTM">Chapter 9 -- Exceptions and Interrupts:</a></h4>
		Explains the basic interrupt mechanisms of the 80386. Shows how interrupts and exceptions relate to protection. Discusses all possible exceptions, listing causes and including information needed to handle and recover from the exception.
		<h4><a href="C10.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C10.HTM">Chapter 10 -- Initialization:</a></h4>
		Defines the condition of the processor after RESET or power-up. Explains how to set up registers, flags, and data structures for either real-address mode or protected mode. Contains an example of an initialization program.
		<h4><a href="C11.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C11.HTM">Chapter 11 -- Coprocessing and Multiprocessing:</a></h4>
		Explains the instructions and flags that support a numerics coprocessor and multiple CPUs with shared memory.
		<h4><a href="C12.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C12.HTM">Chapter 12 -- Debugging:</a></h4>
		Tells how to use the debugging registers of the 80386.
		<h2>1.1.3 <a href="PIII.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PIII.HTM">Part III -- Compatibility</a></h2>
		Other parts of the book treat the processor primarily as a 32-bit machine, omitting for simplicity its facilities for 16-bit operations. Indeed, the 80386 is a 32-bit machine, but its design fully supports 16-bit operands and addressing, too. This part completes the picture of the 80386 by explaining the features of the architecture that support 16-bit programs and 16-bit operations in 32-bit programs. All three processor modes are used to execute 16-bit programs: protected mode can directly execute 16-bit 80286 protected mode programs, real mode executes 8086 programs and real-mode 80286 programs, and virtual 8086 mode executes 8086 programs in a multitasking environment with other 80386 protected-mode programs. In addition, 32-bit and 16-bit modules and individual 32-bit and 16-bit operations can be mixed in protected mode.
		<p>
		<h4><a href="C13.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C13.HTM">Chapter 13 -- Executing 80286 Protected-Mode Code:</a></h4>
		In its protected mode, the 80386 can execute complete 80286 protected-mode systems, because 80286 capabilities are a subset of 80386 capabilities.
		<h4><a href="C14.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C14.HTM">Chapter 14 -- 80386 Real-Address Mode:</a></h4>
		Explains the real mode of the 80386 CPU. In this mode the 80386 appears as a fast real-mode 80286 or fast 8086 enhanced with additional instructions.
		<h4><a href="C15.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C15.HTM">Chapter 15 -- Virtual 8086 Mode:</a></h4>
		The 80386 can switch rapidly between its protected mode and V86 mode, giving it the ability to multiprogram 8086 programs along with &quot;native mode&quot; 32-bit programs.
		<h4><a href="C16.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C16.HTM">Chapter 16 -- Mixing 16-Bit and 32-Bit Code:</a></h4>
		Even within a program or task, the 80386 can mix 16-bit and 32-bit modules. Furthermore, any given module can utilize both 16-bit and 32-bit operands and addresses.
		<h2>1.1.4 <a href="PIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PIV.HTM">Part IV -- Instruction Set</a></h2>
		Parts I, II, and III present overviews of the instructions as they relate to specific aspects of the architecture, but this part presents the instructions in alphabetical order, providing the detail needed by assembly-language programmers and programmers of debuggers, compilers, operating systems, etc. Instruction descriptions include algorithmic description of operation, effect of flag settings, effect on flag settings, effect of operand- or address-size attributes, effect of processor modes, and possible exceptions.
		<h2>1.1.5 <a href="APP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/APP.HTM">Appendices</a></h2>
		The appendices present tables of encodings and other details in a format designed for quick reference by assembly-language and systems programmers.
		<p>
		<hr>
		<p><b>up:</b> <a href="C01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C01.HTM">Chapter 1 -- Introduction to the 80386</a><br>
		<b>prev:</b> <a href="C01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C01.HTM">Chapter 1 -- Introduction to the 80386</a><br>
		<b>next:</b> <a href="S01_02.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S01_02.HTM">1.2 Related Literature</a>
	</body>

