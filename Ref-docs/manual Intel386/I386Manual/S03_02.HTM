<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Section 3.2</title>
	</head>

	<body>
		<b>up:</b> <a href="C03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C03.HTM">Chapter 3 -- Applications Instruction Set</a><br>
		<b>prev:</b> <a href="S03_01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_01.HTM">3.1 Data Movement Instructions</a><br>
		<b>next:</b> <a href="S03_03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_03.HTM">3.3 Decimal Arithmetic Instructions</a>
		<p>
		<hr>
		<p>
		<h1>3.2 Binary Arithmetic Instructions</h1>
		The arithmetic instructions of the 80386 processor simplify the manipulation of numeric data that is encoded in binary. Operations include the standard add, subtract, multiply, and divide as well as increment, decrement, compare, and change sign. Both signed and unsigned binary integers are supported. The binary arithmetic instructions may also be used as one step in the process of performing arithmetic on decimal integers.
		<p>Many of the arithmetic instructions operate on both signed and unsigned integers. These instructions update the flags ZF, CF, SF, and OF in such a manner that subsequent instructions can interpret the results of the arithmetic as either signed or unsigned. CF contains information relevant to unsigned integers; SF and OF contain information relevant to signed integers. ZF is relevant to both signed and unsigned integers; ZF is set when all bits of the result are zero.
		<p>If the integer is unsigned, CF may be tested after one of these arithmetic operations to determine whether the operation required a carry or borrow of a one-bit in the high-order position of the destination operand. CF is set if a one-bit was carried out of the high-order position (addition instructions <a href="ADD.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADD.HTM">ADD</a>, <a href="ADC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADC.HTM">ADC</a>, <a href="AAA.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/AAA.HTM">AAA</a>, and <a href="DAA.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DAA.HTM">DAA</a>) or if a one-bit was carried (i.e. borrowed) into the high-order bit (subtraction instructions <a href="SUB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SUB.HTM">SUB</a>, <a href="SBB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SBB.HTM">SBB</a>, <a href="AAS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/AAS.HTM">AAS</a>, <a href="DAS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DAS.HTM">DAS</a>, <a href="CMP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CMP.HTM">CMP</a>, and <a href="NEG.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/NEG.HTM">NEG</a>).
		<p>If the integer is signed, both SF and OF should be tested. SF always has the same value as the sign bit of the result. The most significant bit (MSB) of a signed integer is the bit next to the -- 6 of a byte, bit 14 of a word, or bit 30 of a doubleword. OF is set in either of these cases:
		<ul>
			<li>A one-bit was carried out of the MSB into the sign bit but no one bit was carried out of the sign bit (addition instructions <a href="ADD.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADD.HTM">ADD</a>, <a href="ADC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADC.HTM">ADC</a>, <a href="INC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/INC.HTM">INC</a>, <a href="AAA.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/AAA.HTM">AAA</a>, and <a href="DAA.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DAA.HTM">DAA</a>). In other words, the result was greater than the greatest positive number that could be contained in the destination operand.
			<li>A one-bit was carried from the sign bit into the MSB but no one bit was carried into the sign bit (subtraction instructions <a href="SUB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SUB.HTM">SUB</a>, <a href="SBB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SBB.HTM">SBB</a>, <a href="DEC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DEC.HTM">DEC</a>, <a href="AAS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/AAS.HTM">AAS</a>, <a href="DAS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DAS.HTM">DAS</a>, <a href="CMP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CMP.HTM">CMP</a>, and <a href="NEG.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/NEG.HTM">NEG</a>). In other words, the result was smaller that the smallest negative number that could be contained in the destination operand.
		</ul>
		These status flags are tested by executing one of the two families of conditional instructions: <a href="JCC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/JCC.HTM">Jcc</a> (jump on condition cc) or <a href="SETCC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SETCC.HTM">SETcc</a> (byte set on condition).
		<h2>3.2.1 Addition and Subtraction Instructions</h2>
		<a href="ADD.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADD.HTM">ADD</a> (Add Integers) replaces the destination operand with the sum of the source and destination operands. Sets CF if overflow.
		<p><a href="ADC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADC.HTM">ADC</a> (Add Integers with Carry) sums the operands, adds one if CF is set, and replaces the destination operand with the result. If CF is cleared, <a href="ADC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADC.HTM">ADC</a> performs the same operation as the <a href="ADD.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADD.HTM">ADD</a> instruction. An <a href="ADD.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADD.HTM">ADD</a> followed by multiple <a href="ADC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADC.HTM">ADC</a> instructions can be used to add numbers longer than 32 bits.
		<p><a href="INC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/INC.HTM">INC</a> (Increment) adds one to the destination operand. <a href="INC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/INC.HTM">INC</a> does not affect CF. Use <a href="ADD.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/ADD.HTM">ADD</a> with an immediate value of 1 if an increment that updates carry (CF) is needed.
		<p><a href="SUB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SUB.HTM">SUB</a> (Subtract Integers) subtracts the source operand from the destination operand and replaces the destination operand with the result. If a borrow is required, the CF is set. The operands may be signed or unsigned bytes, words, or doublewords.
		<p><a href="SBB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SBB.HTM">SBB</a> (Subtract Integers with Borrow) subtracts the source operand from the destination operand, subtracts 1 if CF is set, and returns the result to the destination operand. If CF is cleared, <a href="SBB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SBB.HTM">SBB</a> performs the same operation as <a href="SUB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SUB.HTM">SUB</a>. <a href="SUB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SUB.HTM">SUB</a> followed by multiple <a href="SBB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SBB.HTM">SBB</a> instructions may be used to subtract numbers longer than 32 bits. If CF is cleared, <a href="SBB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SBB.HTM">SBB</a> performs the same operation as <a href="SUB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SUB.HTM">SUB</a>.
		<p><a href="DEC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DEC.HTM">DEC</a> (Decrement) subtracts 1 from the destination operand. <a href="DEC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DEC.HTM">DEC</a> does not update CF. Use <a href="SUB.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SUB.HTM">SUB</a> with an immediate value of 1 to perform a decrement that affects carry.
		<h2>3.2.2 Comparison and Sign Change Instruction</h2>
		<a href="CMP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CMP.HTM">CMP</a> (Compare) subtracts the source operand from the destination operand. It updates OF, SF, ZF, AF, PF, and CF but does not alter the source and destination operands. A subsequent <a href="JCC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/JCC.HTM">Jcc</a> or <a href="SETCC.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SETCC.HTM">SETcc</a> instruction can test the appropriate flags.
		<p><a href="NEG.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/NEG.HTM">NEG</a> (Negate) subtracts a signed integer operand from zero. The effect of <a href="NEG.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/NEG.HTM">NEG</a> is to reverse the sign of the operand from positive to negative or from negative to positive.
		<h2>3.2.3 Multiplication Instructions</h2>
		The 80386 has separate multiply instructions for unsigned and signed operands. <a href="MUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MUL.HTM">MUL</a> operates on unsigned numbers, while <a href="IMUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IMUL.HTM">IMUL</a> operates on signed integers as well as unsigned.
		<p><a href="MUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MUL.HTM">MUL</a> (Unsigned Integer Multiply) performs an unsigned multiplication of the source operand and the accumulator. If the source is a byte, the processor multiplies it by the contents of AL and returns the double-length result to AH and AL. If the source operand is a word, the processor multiplies it by the contents of AX and returns the double-length result to DX and AX. If the source operand is a doubleword, the processor multiplies it by the contents of EAX and returns the 64-bit result in EDX and EAX. <a href="MUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MUL.HTM">MUL</a> sets CF and OF when the upper half of the result is nonzero; otherwise, they are cleared.
		<p><a href="IMUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IMUL.HTM">IMUL</a> (Signed Integer Multiply) performs a signed multiplication operation. <a href="IMUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IMUL.HTM">IMUL</a> has three variations:
		<ol>
			<li>A one-operand form. The operand may be a byte, word, or doubleword located in memory or in a general register. This instruction uses EAX and EDX as implicit operands in the same way as the <a href="MUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MUL.HTM">MUL</a> instruction.
			<li>A two-operand form. One of the source operands may be in any general register while the other may be either in memory or in a general register. The product replaces the general-register operand.
			<li>A three-operand form; two are source and one is the destination operand. One of the source operands is an immediate value stored in the instruction; the second may be in memory or in any general register. The product may be stored in any general register. The immediate operand is treated as signed. If the immediate operand is a byte, the processor automatically sign-extends it to the size of the second operand before performing the multiplication.
		</ol>
		The three forms are similar in most respects:
		<ul>
			<li>The length of the product is calculated to twice the length of the operands.
			<li>The CF and OF flags are set when significant bits are carried into the high-order half of the result. CF and OF are cleared when the high-order half of the result is the sign-extension of the low-order half.
		</ul>
		However, forms 2 and 3 differ in that the product is truncated to the length of the operands before it is stored in the destination register. Because of this truncation, OF should be tested to ensure that no significant bits are lost. (For ways to test OF, refer to the <a href="INT.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/INT.HTM">INTO</a> and <a href="PUSHF.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/PUSHF.HTM">PUSHF</a> instructions.)
		<p>Forms 2 and 3 of <a href="IMUL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IMUL.HTM">IMUL</a> may also be used with unsigned operands because, whether the operands are signed or unsigned, the low-order half of the product is the same.
		<h2>3.2.4 Division Instructions</h2>
		The 80386 has separate division instructions for unsigned and signed operands. <a href="DIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DIV.HTM">DIV</a> operates on unsigned numbers, while <a href="IDIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IDIV.HTM">IDIV</a> operates on signed integers as well as unsigned. In either case, an exception (interrupt zero) occurs if the divisor is zero or if the quotient is too large for AL, AX, or EAX.
		<p><a href="DIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DIV.HTM">DIV</a> (Unsigned Integer Divide) performs an unsigned division of the accumulator by the source operand. The dividend (the accumulator) is twice the size of the divisor (the source operand); the quotient and remainder have the same size as the divisor, as the following table shows.
		<pre>



Size of Source Operand
(divisor)             Dividend       Quotient      Remainder
Byte                        AX             AL            AH
Word                        DX:AX          AX            DX
Doubleword                  EDX:EAX        EAX           EDX
</pre>
		Non-integral quotients are truncated to integers toward 0. The remainder is always less than the divisor. For unsigned byte division, the largest quotient is 255. For unsigned word division, the largest quotient is 65,535. For unsigned doubleword division the largest quotient is 2^(32) -1.
		<p><a href="IDIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IDIV.HTM">IDIV</a> (Signed Integer Divide) performs a signed division of the accumulator by the source operand. <a href="IDIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/IDIV.HTM">IDIV</a> uses the same registers as the <a href="DIV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/DIV.HTM">DIV</a> instruction.
		<p>For signed byte division, the maximum positive quotient is +127, and the minimum negative quotient is -128. For signed word division, the maximum positive quotient is +32,767, and the minimum negative quotient is -32,768. For signed doubleword division the maximum positive quotient is 2^(31) -1, the minimum negative quotient is -2^(31). Non-integral results are truncated towards 0. The remainder always has the same sign as the dividend and is less than the divisor in magnitude.
		<p>
		<hr>
		<p><b>up:</b> <a href="C03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C03.HTM">Chapter 3 -- Applications Instruction Set</a><br>
		<b>prev:</b> <a href="S03_01.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_01.HTM">3.1 Data Movement Instructions</a><br>
		<b>next:</b> <a href="S03_03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S03_03.HTM">3.3 Decimal Arithmetic Instructions</a>
	</body>

