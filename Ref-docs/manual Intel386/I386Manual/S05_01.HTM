<html><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>

	<head>
		<title>80386 Programmer's Reference Manual -- Section 5.1</title>
	</head>

	<body>
		<b>up:</b> <a href="C05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C05.HTM">Chapter 5 -- Memory Management</a><br>
		<b>prev:</b> <a href="C05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C05.HTM">Chapter 5 -- Memory Management</a><br>
		<b>next:</b> <a href="S05_02.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S05_02.HTM">5.2 Page Translation</a>
		<p>
		<hr>
		<p>
		<h1>5.1 Segment Translation</h1>
		<a href="#fig5-2">Figure 5-2</a> shows in more detail how the processor converts a logical address into a linear address.
		<p>To perform this translation, the processor uses the following data structures:
		<ul>
			<li>Descriptors
			<li>Descriptor tables
			<li>Selectors
			<li>Segment Registers
		</ul>
		<h2>5.1.1 Descriptors</h2>
		The segment descriptor provides the processor with the data it needs to map a logical address into a linear address. Descriptors are created by compilers, linkers, loaders, or the operating system, not by applications programmers. <a href="#fig5-3">Figure 5-3</a> illustrates the two general descriptor formats. All types of segment descriptors take one of these formats. Segment-descriptor fields are:
		<p>BASE: Defines the location of the segment within the 4 gigabyte linear address space. The processor concatenates the three fragments of the base address to form a single 32-bit value.
		<p>LIMIT: Defines the size of the segment. When the processor concatenates the two parts of the limit field, a 20-bit value results. The processor interprets the limit field in one of two ways, depending on the setting of the granularity bit:
		<ol>
			<li>In units of one byte, to define a limit of up to 1 megabyte.
			<li>In units of 4 Kilobytes, to define a limit of up to 4 gigabytes. The limit is shifted left by 12 bits when loaded, and low-order one-bits are inserted.
		</ol>
		Granularity bit: Specifies the units with which the LIMIT field is interpreted. When thebit is clear, the limit is interpreted in units of one byte; when set, the limit is interpreted in units of 4 Kilobytes.
		<p>TYPE: Distinguishes between various kinds of descriptors.
		<p>DPL (Descriptor Privilege Level): Used by the protection mechanism (refer to <a href="C06.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C06.HTM">Chapter 6</a> ) .
		<p>Segment-Present bit: If this bit is zero, the descriptor is not valid for use in address transformation; the processor will signal an exception when a selector for the descriptor is loaded into a segment register. <a href="#fig5-4">Figure 5-4</a> shows the format of a descriptor when the present-bit is zero. The operating system is free to use the locations marked AVAILABLE. Operating systems that implement segment-based virtual memory clear the present bit in either of these cases:
		<ul>
			<li>When the linear space spanned by the segment is not mapped by the paging mechanism.
			<li>When the segment is not present in memory.
		</ul>
		Accessed bit: The processor sets this bit when the segment is accessed; i.e., a selector for the descriptor is loaded into a segment register or used by a selector test instruction. Operating systems that implement virtual memory at the segment level may, by periodically testing and clearing this bit, monitor frequency of segment usage.
		<p>Creation and maintenance of descriptors is the responsibility of systems software, usually requiring the cooperation of compilers, program loaders or system builders, and therating system.
		<p><a name="fig5-2"><img align="center" src="FIG5-2.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-2.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig5-3"><img align="center" src="FIG5-3.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-3.GIF" border="0">
		<p>
		<h2>5.1.2 Descriptor Tables</h2>
		Segment descriptors are stored in either of two kinds of descriptor table:
		<ul>
			<li>The global descriptor table (GDT)
			<li>A local descriptor table (LDT)
		</ul>
		A descriptor table is simply a memory array of 8-byte entries that contain descriptors, as <a href="#fig5-5">Figure 5-5</a> shows. A descriptor table is variable in length and may contain up to 8192 (2^(13)) descriptors. The first entry of the GDT (INDEX=0) is not used by the processor, however.
		<p>The processor locates the GDT and the current LDT in memory by means of the GDTR and LDTR registers. These registers store the base addresses of the tables in the linear address space and store the segment limits. The instructions <a href="LGDT.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LGDT.HTM">LGDT</a> and <a href="SGDT.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SGDT.HTM">SGDT</a> give access to the GDTR; the instructions <a href="LLDT.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LLDT.HTM">LLDT</a> and <a href="SLDT.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/SLDT.HTM">SLDT</a> give access to the LDTR.
		<p><a name="fig5-4"><img align="center" src="FIG5-4.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-4.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig5-5"><img align="center" src="FIG5-5.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-5.GIF" border="0">
		<p>
		<h2>5.1.3 Selectors</h2>
		The selector portion of a logical address identifies a descriptor by specifying a descriptor table and indexing a descriptor within that table. Selectors may be visible to applications programs as a field within a pointer variable, but the values of selectors are usually assigned (fixed up) by linkers or linking loaders. <a href="#fig5-6">Figure 5-6</a> shows the format of a selector.
		<p>Index: Selects one of 8192 descriptors in a descriptor table. The processor simply multiplies this index value by 8 (the length of a descriptor), and adds the result to the base address of the descriptor table in order to access the appropriate segment descriptor in the table.
		<p>Table Indicator: Specifies to which descriptor table the selector refers. A zero indicates the GDT; a one indicates the current LDT.
		<p>Requested Privilege Level: Used by the protection mechanism. (Refer to <a href="C06.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C06.HTM">Chapter 6</a>)
		<p>Because the first entry of the GDT is not used by the processor, a selector that has an index of zero and a table indicator of zero (i.e., a selector that points to the first entry of the GDT), can be used as a null selector. The processor does not cause an exception when a segment register (other than CS or SS) is loaded with a null selector. It will, however, cause an exception when the segment register is used to access memory. This feature is useful for initializing unused segment registers so as to trap accidental references.
		<p><a name="fig5-6"><img align="center" src="FIG5-6.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-6.GIF" border="0">
		<p>
		<hr>
		<p><a name="fig5-7"><img align="center" src="FIG5-7.GIF" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/FIG5-7.GIF" border="0">
		<p>
		<h2>5.1.4 Segment Registers</h2>
		The 80386 stores information from descriptors in segment registers, thereby avoiding the need to consult a descriptor table every time it accesses memory.
		<p>Every segment register has a &quot;visible&quot; portion and an &quot;invisible&quot; portion, as <a href="#fig5-7">Figure 5-7</a> illustrates. The visible portions of these segment address registers are manipulated by programs as if they were simply 16-bit registers. The invisible portions are manipulated by the processor.
		<p>The operations that load these registers are normal program instructions (previously described in <a href="C03.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C03.HTM">Chapter 3</a>). These instructions are of two classes:
		<ol>
			<li>Direct load instructions; for example, <a href="MOV.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/MOV.HTM">MOV</a>, <a href="POP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/POP.HTM">POP</a>, <a href="LGS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LGS.HTM">LDS</a>, <a href="LGS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LGS.HTM">LSS</a>, <a href="LGS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LGS.HTM">LGS</a>, <a href="LGS.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/LGS.HTM">LFS</a>. These instructions explicitly reference the segment registers.
			<li>Implied load instructions; for example, far <a href="CALL.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/CALL.HTM">CALL</a> and <a href="JMP.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/JMP.HTM">JMP</a>. These instructions implicitly reference the CS register, and load it with a new value.
		</ol>
		Using these instructions, a program loads the visible part of the segment register with a 16-bit selector. The processor automatically fetches the base address, limit, type, and other information from a descriptor table and loads them into the invisible part of the segment register.
		<p>Because most instructions refer to data in segments whose selectors have already been loaded into segment registers, the processor can add the segment-relative offset supplied by the instruction to the segment base address with no additional overhead.
		<p>
		<hr>
		<p><b>up:</b> <a href="C05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C05.HTM">Chapter 5 -- Memory Management</a><br>
		<b>prev:</b> <a href="C05.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/C05.HTM">Chapter 5 -- Memory Management</a><br>
		<b>next:</b> <a href="S05_02.HTM" tppabs="http://webster.cs.ucr.edu/Page_TechDocs/Doc386/S05_02.HTM">5.2 Page Translation</a>
	</body>

